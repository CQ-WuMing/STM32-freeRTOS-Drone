
Fly.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070fc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08007210  08007210  00017210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007340  08007340  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08007340  08007340  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007340  08007340  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007344  08007344  00017344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e0  2000007c  080073c4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000145c  080073c4  0002145c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001523e  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b7c  00000000  00000000  00035326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00038ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd7  00000000  00000000  0003a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0aa  00000000  00000000  0003b2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0b2  00000000  00000000  000563a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095b21  00000000  00000000  00070453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005998  00000000  00000000  00105f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0010b90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080071f4 	.word	0x080071f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080071f4 	.word	0x080071f4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2iz>:
 8000f58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30f      	bcc.n	8000f82 <__aeabi_f2iz+0x2a>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d90d      	bls.n	8000f88 <__aeabi_f2iz+0x30>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	bf18      	it	ne
 8000f7e:	4240      	negne	r0, r0
 8000f80:	4770      	bx	lr
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	4770      	bx	lr
 8000f88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_f2iz+0x3a>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d105      	bne.n	8000f9e <__aeabi_f2iz+0x46>
 8000f92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f96:	bf08      	it	eq
 8000f98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <DataRead>:

PidObject *pids[] = {&pidPitch,&pidRoll, &pidYaw, &pidRateX, &pidRateY, &pidRateZ};
_stRemote remote;
uint8_t unlock_flag = 0;
//解析接收到的数据
void DataRead(uint8_t *buf, uint8_t len){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	connect_flag ++;
 8000fb0:	4b72      	ldr	r3, [pc, #456]	; (800117c <DataRead+0x1d8>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b70      	ldr	r3, [pc, #448]	; (800117c <DataRead+0x1d8>)
 8000fba:	801a      	strh	r2, [r3, #0]
	if(connect_flag == 1){
 8000fbc:	4b6f      	ldr	r3, [pc, #444]	; (800117c <DataRead+0x1d8>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	f040 80ca 	bne.w	800115a <DataRead+0x1b6>

	uint32_t rc_sum = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
	uint32_t fly_sum = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
	//_stRemote remote;

	//校验帧头
	if(!((*buf == 0xAA) && (*(buf+1) == 0xAF))){
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2baa      	cmp	r3, #170	; 0xaa
 8000fd4:	f040 80ca 	bne.w	800116c <DataRead+0x1c8>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2baf      	cmp	r3, #175	; 0xaf
 8000fe0:	f040 80c4 	bne.w	800116c <DataRead+0x1c8>
		return;
	}

	//校验和检验
	rc_sum = *(buf+len - 4) <<24 |*(buf +len - 3) <<16 |*(buf+len -2) << 8 | *(buf + len -1);
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	061a      	lsls	r2, r3, #24
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	3b03      	subs	r3, #3
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	440b      	add	r3, r1
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	3b02      	subs	r3, #2
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	440b      	add	r3, r1
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	4313      	orrs	r3, r2
 800100c:	78fa      	ldrb	r2, [r7, #3]
 800100e:	3a01      	subs	r2, #1
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	440a      	add	r2, r1
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	4313      	orrs	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < len -4; i++){
 800101a:	2300      	movs	r3, #0
 800101c:	74fb      	strb	r3, [r7, #19]
 800101e:	e00a      	b.n	8001036 <DataRead+0x92>
		fly_sum += buf[i];
 8001020:	7cfb      	ldrb	r3, [r7, #19]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	4413      	add	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
	for(uint8_t i = 0; i < len -4; i++){
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	3301      	adds	r3, #1
 8001034:	74fb      	strb	r3, [r7, #19]
 8001036:	7cfa      	ldrb	r2, [r7, #19]
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	3b04      	subs	r3, #4
 800103c:	429a      	cmp	r2, r3
 800103e:	dbef      	blt.n	8001020 <DataRead+0x7c>

	}

	if(fly_sum != rc_sum){
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 8093 	bne.w	8001170 <DataRead+0x1cc>
		return;
	}
	//判断功能字
	if(buf[2] == 0x03){
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3302      	adds	r3, #2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b03      	cmp	r3, #3
 8001052:	f040 8082 	bne.w	800115a <DataRead+0x1b6>
		//取出数据
		remote.THR  = (uint16_t)( *(buf+4) << 8 | *(buf+5));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3304      	adds	r3, #4
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3305      	adds	r3, #5
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b44      	ldr	r3, [pc, #272]	; (8001180 <DataRead+0x1dc>)
 800106e:	801a      	strh	r2, [r3, #0]
		remote.YAW = (uint16_t)( *(buf+6) << 8 | *(buf+7));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3306      	adds	r3, #6
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3307      	adds	r3, #7
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <DataRead+0x1dc>)
 8001088:	805a      	strh	r2, [r3, #2]
		remote.ROL  = (uint16_t)( *(buf+8) << 8 | *(buf+9));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3308      	adds	r3, #8
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21a      	sxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3309      	adds	r3, #9
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21a      	sxth	r2, r3
 80010a0:	4b37      	ldr	r3, [pc, #220]	; (8001180 <DataRead+0x1dc>)
 80010a2:	809a      	strh	r2, [r3, #4]
		remote.PIT    = (uint16_t)( *(buf+10) << 8 | *(buf+11));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	330a      	adds	r3, #10
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	330b      	adds	r3, #11
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <DataRead+0x1dc>)
 80010bc:	80da      	strh	r2, [r3, #6]

		//辅助通道数据
		remote.AUX1    = (uint16_t)( *(buf+12) << 8 | *(buf+13));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	330c      	adds	r3, #12
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	330d      	adds	r3, #13
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <DataRead+0x1dc>)
 80010d6:	811a      	strh	r2, [r3, #8]
		remote.AUX2    = (uint16_t)( *(buf+14) << 8 | *(buf+15));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	330e      	adds	r3, #14
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	330f      	adds	r3, #15
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <DataRead+0x1dc>)
 80010f0:	815a      	strh	r2, [r3, #10]
		remote.AUX3    = (uint16_t)( *(buf+16) << 8 | *(buf+17));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3310      	adds	r3, #16
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3311      	adds	r3, #17
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21a      	sxth	r2, r3
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <DataRead+0x1dc>)
 800110a:	819a      	strh	r2, [r3, #12]
		remote.AUX4    = (uint16_t)( *(buf+18) << 8 | *(buf+19));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3312      	adds	r3, #18
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3313      	adds	r3, #19
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b21a      	sxth	r2, r3
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <DataRead+0x1dc>)
 8001124:	81da      	strh	r2, [r3, #14]
		remote.AUX5    = (uint16_t)( *(buf+20) << 8 | *(buf+21));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3314      	adds	r3, #20
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3315      	adds	r3, #21
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <DataRead+0x1dc>)
 800113e:	821a      	strh	r2, [r3, #16]
		remote.AUX6    = (uint16_t)( *(buf+22) << 8 | *(buf+23));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3316      	adds	r3, #22
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3317      	adds	r3, #23
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <DataRead+0x1dc>)
 8001158:	825a      	strh	r2, [r3, #18]
	}
	}
	if(connect_flag > 500){
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <DataRead+0x1d8>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001162:	d906      	bls.n	8001172 <DataRead+0x1ce>

		connect_flag = 1;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <DataRead+0x1d8>)
 8001166:	2201      	movs	r2, #1
 8001168:	801a      	strh	r2, [r3, #0]
 800116a:	e002      	b.n	8001172 <DataRead+0x1ce>
		return;
 800116c:	bf00      	nop
 800116e:	e000      	b.n	8001172 <DataRead+0x1ce>
		return;
 8001170:	bf00      	nop

	}

}
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000001a 	.word	0x2000001a
 8001180:	20000158 	.word	0x20000158

08001184 <PID_Control>:


	}
}

void PID_Control(){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	static uint8_t status = WAITTING_1;
	switch(status){
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <PID_Control+0x90>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b03      	cmp	r3, #3
 800118e:	d016      	beq.n	80011be <PID_Control+0x3a>
 8001190:	2b03      	cmp	r3, #3
 8001192:	dc3d      	bgt.n	8001210 <PID_Control+0x8c>
 8001194:	2b01      	cmp	r3, #1
 8001196:	d002      	beq.n	800119e <PID_Control+0x1a>
 8001198:	2b02      	cmp	r3, #2
 800119a:	d008      	beq.n	80011ae <PID_Control+0x2a>
				CasecadePID(&pidRoll, &pidRateX,0.002f);
				CasecadePID(&pidYaw, &pidRateZ,0.002f);
				break;

  }
}
 800119c:	e038      	b.n	8001210 <PID_Control+0x8c>
				if(unlock_flag == 1){
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <PID_Control+0x94>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d133      	bne.n	800120e <PID_Control+0x8a>
					status = WAITTING_2;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <PID_Control+0x90>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	701a      	strb	r2, [r3, #0]
				break;
 80011ac:	e02f      	b.n	800120e <PID_Control+0x8a>
				ResetPID(pids, 6);
 80011ae:	2106      	movs	r1, #6
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <PID_Control+0x98>)
 80011b2:	f000 ff83 	bl	80020bc <ResetPID>
				status = WAITTING_3;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <PID_Control+0x90>)
 80011b8:	2203      	movs	r2, #3
 80011ba:	701a      	strb	r2, [r3, #0]
				break;
 80011bc:	e028      	b.n	8001210 <PID_Control+0x8c>
				pidPitch.measured =pitch;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <PID_Control+0x9c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <PID_Control+0xa0>)
 80011c4:	6193      	str	r3, [r2, #24]
				pidRoll.measured = roll;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <PID_Control+0xa4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a18      	ldr	r2, [pc, #96]	; (800122c <PID_Control+0xa8>)
 80011cc:	6193      	str	r3, [r2, #24]
				pidYaw.measured = yaw;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <PID_Control+0xac>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <PID_Control+0xb0>)
 80011d4:	6193      	str	r3, [r2, #24]
				pidRateX.measured = roll_g;
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <PID_Control+0xb4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a18      	ldr	r2, [pc, #96]	; (800123c <PID_Control+0xb8>)
 80011dc:	6193      	str	r3, [r2, #24]
				pidRateY.measured = pitch_g;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <PID_Control+0xbc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <PID_Control+0xc0>)
 80011e4:	6193      	str	r3, [r2, #24]
				pidRateZ.measured = yaw_g;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <PID_Control+0xc4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <PID_Control+0xc8>)
 80011ec:	6193      	str	r3, [r2, #24]
				CasecadePID(&pidPitch, &pidRateY,0.002f);
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <PID_Control+0xcc>)
 80011f0:	4914      	ldr	r1, [pc, #80]	; (8001244 <PID_Control+0xc0>)
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <PID_Control+0xa0>)
 80011f4:	f000 ff4c 	bl	8002090 <CasecadePID>
				CasecadePID(&pidRoll, &pidRateX,0.002f);
 80011f8:	4a15      	ldr	r2, [pc, #84]	; (8001250 <PID_Control+0xcc>)
 80011fa:	4910      	ldr	r1, [pc, #64]	; (800123c <PID_Control+0xb8>)
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <PID_Control+0xa8>)
 80011fe:	f000 ff47 	bl	8002090 <CasecadePID>
				CasecadePID(&pidYaw, &pidRateZ,0.002f);
 8001202:	4a13      	ldr	r2, [pc, #76]	; (8001250 <PID_Control+0xcc>)
 8001204:	4911      	ldr	r1, [pc, #68]	; (800124c <PID_Control+0xc8>)
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <PID_Control+0xb0>)
 8001208:	f000 ff42 	bl	8002090 <CasecadePID>
				break;
 800120c:	e000      	b.n	8001210 <PID_Control+0x8c>
				break;
 800120e:	bf00      	nop
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000018 	.word	0x20000018
 8001218:	2000016c 	.word	0x2000016c
 800121c:	20000000 	.word	0x20000000
 8001220:	200004b4 	.word	0x200004b4
 8001224:	20000098 	.word	0x20000098
 8001228:	200004b0 	.word	0x200004b0
 800122c:	200000b8 	.word	0x200000b8
 8001230:	200004b8 	.word	0x200004b8
 8001234:	200000d8 	.word	0x200000d8
 8001238:	200004a4 	.word	0x200004a4
 800123c:	200000f8 	.word	0x200000f8
 8001240:	200004a8 	.word	0x200004a8
 8001244:	20000118 	.word	0x20000118
 8001248:	200004ac 	.word	0x200004ac
 800124c:	20000138 	.word	0x20000138
 8001250:	3b03126f 	.word	0x3b03126f

08001254 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4a06      	ldr	r2, [pc, #24]	; (800127c <vApplicationGetIdleTaskMemory+0x28>)
 8001264:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	4a05      	ldr	r2, [pc, #20]	; (8001280 <vApplicationGetIdleTaskMemory+0x2c>)
 800126a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	2000017c 	.word	0x2000017c
 8001280:	2000021c 	.word	0x2000021c

08001284 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b096      	sub	sp, #88	; 0x58
 8001288:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_FREERTOS_Init+0x7c>)
 800128c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001290:	461d      	mov	r5, r3
 8001292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001296:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800129a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800129e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f004 f9e7 	bl	8005678 <osThreadCreate>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a15      	ldr	r2, [pc, #84]	; (8001304 <MX_FREERTOS_Init+0x80>)
 80012ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_2ms */
  osThreadDef(Task_2ms, StartTask_2ms, osPriorityHigh, 0, 128);
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_FREERTOS_Init+0x84>)
 80012b2:	f107 0420 	add.w	r4, r7, #32
 80012b6:	461d      	mov	r5, r3
 80012b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_2msHandle = osThreadCreate(osThread(Task_2ms), NULL);
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 f9d4 	bl	8005678 <osThreadCreate>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <MX_FREERTOS_Init+0x88>)
 80012d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_4ms */
  osThreadDef(Task_4ms, StartTask_4ms, osPriorityIdle, 0, 128);
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_FREERTOS_Init+0x8c>)
 80012d8:	1d3c      	adds	r4, r7, #4
 80012da:	461d      	mov	r5, r3
 80012dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_4msHandle = osThreadCreate(osThread(Task_4ms), NULL);
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 f9c3 	bl	8005678 <osThreadCreate>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <MX_FREERTOS_Init+0x90>)
 80012f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80012f8:	bf00      	nop
 80012fa:	3758      	adds	r7, #88	; 0x58
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001300:	0800721c 	.word	0x0800721c
 8001304:	20000170 	.word	0x20000170
 8001308:	08007244 	.word	0x08007244
 800130c:	20000174 	.word	0x20000174
 8001310:	0800726c 	.word	0x0800726c
 8001314:	20000178 	.word	0x20000178

08001318 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f004 f9f5 	bl	8005710 <osDelay>
 8001326:	e7fb      	b.n	8001320 <StartDefaultTask+0x8>

08001328 <StartTask_2ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_2ms */
void StartTask_2ms(void const * argument)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_2ms */
	TickType_t pxPreviousWakeTime;
	pxPreviousWakeTime = xTaskGetTickCount();
 8001330:	f004 fe22 	bl	8005f78 <xTaskGetTickCount>
 8001334:	4603      	mov	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  MPU6050_Read_Result();//获取数据，计算欧拉角
 8001338:	f000 faca 	bl	80018d0 <MPU6050_Read_Result>
	  PID_Control();
 800133c:	f7ff ff22 	bl	8001184 <PID_Control>
	  Motor_Control();//电机控制
 8001340:	f000 f956 	bl	80015f0 <Motor_Control>
	  vTaskDelayUntil(&pxPreviousWakeTime, 2);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2102      	movs	r1, #2
 800134a:	4618      	mov	r0, r3
 800134c:	f004 fc4e 	bl	8005bec <vTaskDelayUntil>
	  MPU6050_Read_Result();//获取数据，计算欧拉角
 8001350:	e7f2      	b.n	8001338 <StartTask_2ms+0x10>
	...

08001354 <StartTask_4ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_4ms */
void StartTask_4ms(void const * argument)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_4ms */
	TickType_t pxPreviousWakeTime;
	pxPreviousWakeTime = xTaskGetTickCount();
 800135c:	f004 fe0c 	bl	8005f78 <xTaskGetTickCount>
 8001360:	4603      	mov	r3, r0
 8001362:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  NRF24L01_RxPacket(RX_BUFF);//接收数据
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <StartTask_4ms+0x2c>)
 8001366:	f000 fddf 	bl	8001f28 <NRF24L01_RxPacket>
	  DataRead(RX_BUFF,TX_PLOAD_WIDTH);//解析数据
 800136a:	2120      	movs	r1, #32
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <StartTask_4ms+0x2c>)
 800136e:	f7ff fe19 	bl	8000fa4 <DataRead>
	  vTaskDelayUntil(&pxPreviousWakeTime, 4);
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2104      	movs	r1, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fc37 	bl	8005bec <vTaskDelayUntil>
	  NRF24L01_RxPacket(RX_BUFF);//接收数据
 800137e:	e7f1      	b.n	8001364 <StartTask_4ms+0x10>
 8001380:	200004bc 	.word	0x200004bc

08001384 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_GPIO_Init+0x78>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a17      	ldr	r2, [pc, #92]	; (80013fc <MX_GPIO_Init+0x78>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_GPIO_Init+0x78>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_GPIO_Init+0x78>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a11      	ldr	r2, [pc, #68]	; (80013fc <MX_GPIO_Init+0x78>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_GPIO_Init+0x78>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|CE_Pin|CS_Pin|LED2_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f641 2102 	movw	r1, #6658	; 0x1a02
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_GPIO_Init+0x7c>)
 80013d0:	f001 fc22 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|CE_Pin|CS_Pin|LED2_Pin;
 80013d4:	f641 2302 	movw	r3, #6658	; 0x1a02
 80013d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4619      	mov	r1, r3
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_GPIO_Init+0x7c>)
 80013ee:	f001 fa8f 	bl	8002910 <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010c00 	.word	0x40010c00

08001404 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_I2C1_Init+0x50>)
 800140a:	4a13      	ldr	r2, [pc, #76]	; (8001458 <MX_I2C1_Init+0x54>)
 800140c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_I2C1_Init+0x50>)
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <MX_I2C1_Init+0x58>)
 8001412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_I2C1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_I2C1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_I2C1_Init+0x50>)
 8001422:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001426:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MX_I2C1_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_I2C1_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_I2C1_Init+0x50>)
 8001442:	f001 fc01 	bl	8002c48 <HAL_I2C_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800144c:	f000 f8ca 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000041c 	.word	0x2000041c
 8001458:	40005400 	.word	0x40005400
 800145c:	000186a0 	.word	0x000186a0

08001460 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <HAL_I2C_MspInit+0x70>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d123      	bne.n	80014c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001498:	23c0      	movs	r3, #192	; 0xc0
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149c:	2312      	movs	r3, #18
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <HAL_I2C_MspInit+0x78>)
 80014ac:	f001 fa30 	bl	8002910 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ba:	61d3      	str	r3, [r2, #28]
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010c00 	.word	0x40010c00

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e0:	f001 f8e0 	bl	80026a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e4:	f000 f830 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e8:	f7ff ff4c 	bl	8001384 <MX_GPIO_Init>
  MX_SPI2_Init();
 80014ec:	f000 fe74 	bl	80021d8 <MX_SPI2_Init>
  MX_TIM2_Init();
 80014f0:	f000 ffd0 	bl	8002494 <MX_TIM2_Init>
  MX_I2C1_Init();
 80014f4:	f7ff ff86 	bl	8001404 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	 NRF24L01_RX_Mode();//开启接收模式
 80014f8:	f000 fd3e 	bl	8001f78 <NRF24L01_RX_Mode>
	 Pid_Init();
 80014fc:	f000 fe14 	bl	8002128 <Pid_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001500:	2100      	movs	r1, #0
 8001502:	480f      	ldr	r0, [pc, #60]	; (8001540 <main+0x64>)
 8001504:	f003 fa3a 	bl	800497c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001508:	2104      	movs	r1, #4
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <main+0x64>)
 800150c:	f003 fa36 	bl	800497c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001510:	2108      	movs	r1, #8
 8001512:	480b      	ldr	r0, [pc, #44]	; (8001540 <main+0x64>)
 8001514:	f003 fa32 	bl	800497c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001518:	210c      	movs	r1, #12
 800151a:	4809      	ldr	r0, [pc, #36]	; (8001540 <main+0x64>)
 800151c:	f003 fa2e 	bl	800497c <HAL_TIM_PWM_Start>
	//自检，连接正常就亮LED2
if(NRF24L01_Check()  == 0){
 8001520:	f000 fc10 	bl	8001d44 <NRF24L01_Check>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <main+0x5a>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <main+0x68>)
 8001532:	f001 fb71 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);*/

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001536:	f7ff fea5 	bl	8001284 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800153a:	f004 f896 	bl	800566a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800153e:	e7fe      	b.n	800153e <main+0x62>
 8001540:	2000057c 	.word	0x2000057c
 8001544:	40010c00 	.word	0x40010c00

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b090      	sub	sp, #64	; 0x40
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	2228      	movs	r2, #40	; 0x28
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f005 fb12 	bl	8006b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156e:	2301      	movs	r3, #1
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001572:	2310      	movs	r3, #16
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001576:	2300      	movs	r3, #0
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	4618      	mov	r0, r3
 8001580:	f002 f9f0 	bl	8003964 <HAL_RCC_OscConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800158a:	f000 f82b 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158e:	230f      	movs	r3, #15
 8001590:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fc5e 	bl	8003e68 <HAL_RCC_ClockConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015b2:	f000 f817 	bl	80015e4 <Error_Handler>
  }
}
 80015b6:	bf00      	nop
 80015b8:	3740      	adds	r7, #64	; 0x40
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015d2:	f001 f87d 	bl	80026d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40000800 	.word	0x40000800

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <Motor_Control>:
int16_t motor1 = 0;
int16_t motor2 = 0;
int16_t motor3 = 0;
int16_t motor4 = 0;

void Motor_Control(){
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
	uint8_t statue = WAITTING_1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	71fb      	strb	r3, [r7, #7]
	//阶段一，判断解锁标志位
	switch(statue){
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d02b      	beq.n	8001658 <Motor_Control+0x68>
 8001600:	2b03      	cmp	r3, #3
 8001602:	f300 813e 	bgt.w	8001882 <Motor_Control+0x292>
 8001606:	2b01      	cmp	r3, #1
 8001608:	d002      	beq.n	8001610 <Motor_Control+0x20>
 800160a:	2b02      	cmp	r3, #2
 800160c:	d01a      	beq.n	8001644 <Motor_Control+0x54>
 800160e:	e138      	b.n	8001882 <Motor_Control+0x292>

		case WAITTING_1:
		motor1 = motor2= motor3= motor4 =0;
 8001610:	4b92      	ldr	r3, [pc, #584]	; (800185c <Motor_Control+0x26c>)
 8001612:	2200      	movs	r2, #0
 8001614:	801a      	strh	r2, [r3, #0]
 8001616:	4b91      	ldr	r3, [pc, #580]	; (800185c <Motor_Control+0x26c>)
 8001618:	f9b3 2000 	ldrsh.w	r2, [r3]
 800161c:	4b90      	ldr	r3, [pc, #576]	; (8001860 <Motor_Control+0x270>)
 800161e:	801a      	strh	r2, [r3, #0]
 8001620:	4b8f      	ldr	r3, [pc, #572]	; (8001860 <Motor_Control+0x270>)
 8001622:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001626:	4b8f      	ldr	r3, [pc, #572]	; (8001864 <Motor_Control+0x274>)
 8001628:	801a      	strh	r2, [r3, #0]
 800162a:	4b8e      	ldr	r3, [pc, #568]	; (8001864 <Motor_Control+0x274>)
 800162c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001630:	4b8d      	ldr	r3, [pc, #564]	; (8001868 <Motor_Control+0x278>)
 8001632:	801a      	strh	r2, [r3, #0]
		if(unlock_flag == 1){
 8001634:	4b8d      	ldr	r3, [pc, #564]	; (800186c <Motor_Control+0x27c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	f040 810d 	bne.w	8001858 <Motor_Control+0x268>
			statue = WAITTING_2;
 800163e:	2302      	movs	r3, #2
 8001640:	71fb      	strb	r3, [r7, #7]
		}
			break;
 8001642:	e109      	b.n	8001858 <Motor_Control+0x268>
	//阶段二，判断油门动了>1000，进入正式控制
		case WAITTING_2:
			if(remote.THR > 1000){
 8001644:	4b8a      	ldr	r3, [pc, #552]	; (8001870 <Motor_Control+0x280>)
 8001646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800164e:	f340 8117 	ble.w	8001880 <Motor_Control+0x290>
				statue = WAITTING_3;
 8001652:	2303      	movs	r3, #3
 8001654:	71fb      	strb	r3, [r7, #7]
			}
		break;
 8001656:	e113      	b.n	8001880 <Motor_Control+0x290>
	//正式控制，摇杆减1000，如果油门小于1050 pwm=0；限制到900+3个pid
		case WAITTING_3:
		motor1 =    remote.THR - 1000;
 8001658:	4b85      	ldr	r3, [pc, #532]	; (8001870 <Motor_Control+0x280>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	b29b      	uxth	r3, r3
 8001660:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001664:	b29b      	uxth	r3, r3
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b7f      	ldr	r3, [pc, #508]	; (8001868 <Motor_Control+0x278>)
 800166a:	801a      	strh	r2, [r3, #0]
		motor2 = 	remote.PIT - 1000;
 800166c:	4b80      	ldr	r3, [pc, #512]	; (8001870 <Motor_Control+0x280>)
 800166e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001672:	b29b      	uxth	r3, r3
 8001674:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001678:	b29b      	uxth	r3, r3
 800167a:	b21a      	sxth	r2, r3
 800167c:	4b79      	ldr	r3, [pc, #484]	; (8001864 <Motor_Control+0x274>)
 800167e:	801a      	strh	r2, [r3, #0]
		motor3 = 	remote.ROL - 1000;
 8001680:	4b7b      	ldr	r3, [pc, #492]	; (8001870 <Motor_Control+0x280>)
 8001682:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001686:	b29b      	uxth	r3, r3
 8001688:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800168c:	b29b      	uxth	r3, r3
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b73      	ldr	r3, [pc, #460]	; (8001860 <Motor_Control+0x270>)
 8001692:	801a      	strh	r2, [r3, #0]
		motor4 = 	remote.YAW - 1000;
 8001694:	4b76      	ldr	r3, [pc, #472]	; (8001870 <Motor_Control+0x280>)
 8001696:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800169a:	b29b      	uxth	r3, r3
 800169c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	4b6d      	ldr	r3, [pc, #436]	; (800185c <Motor_Control+0x26c>)
 80016a6:	801a      	strh	r2, [r3, #0]
		//如果油门低，直接不转
		if(remote.THR < 1500){
 80016a8:	4b71      	ldr	r3, [pc, #452]	; (8001870 <Motor_Control+0x280>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	f240 52db 	movw	r2, #1499	; 0x5db
 80016b2:	4293      	cmp	r3, r2
 80016b4:	dc11      	bgt.n	80016da <Motor_Control+0xea>
			motor1 = motor2= motor3= motor4 =0;
 80016b6:	4b69      	ldr	r3, [pc, #420]	; (800185c <Motor_Control+0x26c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	801a      	strh	r2, [r3, #0]
 80016bc:	4b67      	ldr	r3, [pc, #412]	; (800185c <Motor_Control+0x26c>)
 80016be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016c2:	4b67      	ldr	r3, [pc, #412]	; (8001860 <Motor_Control+0x270>)
 80016c4:	801a      	strh	r2, [r3, #0]
 80016c6:	4b66      	ldr	r3, [pc, #408]	; (8001860 <Motor_Control+0x270>)
 80016c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016cc:	4b65      	ldr	r3, [pc, #404]	; (8001864 <Motor_Control+0x274>)
 80016ce:	801a      	strh	r2, [r3, #0]
 80016d0:	4b64      	ldr	r3, [pc, #400]	; (8001864 <Motor_Control+0x274>)
 80016d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016d6:	4b64      	ldr	r3, [pc, #400]	; (8001868 <Motor_Control+0x278>)
 80016d8:	801a      	strh	r2, [r3, #0]
		}
		//预留100给pid
		if(motor1 >900){
 80016da:	4b63      	ldr	r3, [pc, #396]	; (8001868 <Motor_Control+0x278>)
 80016dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80016e4:	dd03      	ble.n	80016ee <Motor_Control+0xfe>
			motor1 = 900;
 80016e6:	4b60      	ldr	r3, [pc, #384]	; (8001868 <Motor_Control+0x278>)
 80016e8:	f44f 7261 	mov.w	r2, #900	; 0x384
 80016ec:	801a      	strh	r2, [r3, #0]
		}
		if(motor2 >900){
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <Motor_Control+0x274>)
 80016f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80016f8:	dd03      	ble.n	8001702 <Motor_Control+0x112>
			motor2 = 900;
 80016fa:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <Motor_Control+0x274>)
 80016fc:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001700:	801a      	strh	r2, [r3, #0]
		}
		if(motor3 >900){
 8001702:	4b57      	ldr	r3, [pc, #348]	; (8001860 <Motor_Control+0x270>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800170c:	dd03      	ble.n	8001716 <Motor_Control+0x126>
			motor3 = 900;
 800170e:	4b54      	ldr	r3, [pc, #336]	; (8001860 <Motor_Control+0x270>)
 8001710:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001714:	801a      	strh	r2, [r3, #0]
		}
		if(motor4 >900){
 8001716:	4b51      	ldr	r3, [pc, #324]	; (800185c <Motor_Control+0x26c>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001720:	dd03      	ble.n	800172a <Motor_Control+0x13a>
			motor4 = 900;
 8001722:	4b4e      	ldr	r3, [pc, #312]	; (800185c <Motor_Control+0x26c>)
 8001724:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001728:	801a      	strh	r2, [r3, #0]
		}

		motor1 += pidRateX.out+pidRateY.out+pidRateZ.out;
 800172a:	4b52      	ldr	r3, [pc, #328]	; (8001874 <Motor_Control+0x284>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a52      	ldr	r2, [pc, #328]	; (8001878 <Motor_Control+0x288>)
 8001730:	69d2      	ldr	r2, [r2, #28]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff f9b7 	bl	8000aa8 <__addsf3>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	4b4f      	ldr	r3, [pc, #316]	; (800187c <Motor_Control+0x28c>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4619      	mov	r1, r3
 8001744:	4610      	mov	r0, r2
 8001746:	f7ff f9af 	bl	8000aa8 <__addsf3>
 800174a:	4603      	mov	r3, r0
 800174c:	461c      	mov	r4, r3
 800174e:	4b46      	ldr	r3, [pc, #280]	; (8001868 <Motor_Control+0x278>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fa5b 	bl	8000c10 <__aeabi_i2f>
 800175a:	4603      	mov	r3, r0
 800175c:	4619      	mov	r1, r3
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff f9a2 	bl	8000aa8 <__addsf3>
 8001764:	4603      	mov	r3, r0
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fbf6 	bl	8000f58 <__aeabi_f2iz>
 800176c:	4603      	mov	r3, r0
 800176e:	b21a      	sxth	r2, r3
 8001770:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <Motor_Control+0x278>)
 8001772:	801a      	strh	r2, [r3, #0]
		motor2 += pidRateX.out- pidRateY.out- pidRateZ.out;
 8001774:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <Motor_Control+0x284>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	4a3f      	ldr	r2, [pc, #252]	; (8001878 <Motor_Control+0x288>)
 800177a:	69d2      	ldr	r2, [r2, #28]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f990 	bl	8000aa4 <__aeabi_fsub>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4b3c      	ldr	r3, [pc, #240]	; (800187c <Motor_Control+0x28c>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f7ff f988 	bl	8000aa4 <__aeabi_fsub>
 8001794:	4603      	mov	r3, r0
 8001796:	461c      	mov	r4, r3
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <Motor_Control+0x274>)
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fa36 	bl	8000c10 <__aeabi_i2f>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff f97d 	bl	8000aa8 <__addsf3>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fbd1 	bl	8000f58 <__aeabi_f2iz>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <Motor_Control+0x274>)
 80017bc:	801a      	strh	r2, [r3, #0]
		motor3 += -pidRateX.out- pidRateY.out+pidRateZ.out;
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <Motor_Control+0x284>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017c6:	4a2c      	ldr	r2, [pc, #176]	; (8001878 <Motor_Control+0x288>)
 80017c8:	69d2      	ldr	r2, [r2, #28]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff f969 	bl	8000aa4 <__aeabi_fsub>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <Motor_Control+0x28c>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f7ff f963 	bl	8000aa8 <__addsf3>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461c      	mov	r4, r3
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <Motor_Control+0x270>)
 80017e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fa0f 	bl	8000c10 <__aeabi_i2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7ff f956 	bl	8000aa8 <__addsf3>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fbaa 	bl	8000f58 <__aeabi_f2iz>
 8001804:	4603      	mov	r3, r0
 8001806:	b21a      	sxth	r2, r3
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <Motor_Control+0x270>)
 800180a:	801a      	strh	r2, [r3, #0]
		motor4 += -pidRateX.out+pidRateY.out - pidRateZ.out;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <Motor_Control+0x288>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <Motor_Control+0x284>)
 8001812:	69d2      	ldr	r2, [r2, #28]
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f944 	bl	8000aa4 <__aeabi_fsub>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <Motor_Control+0x28c>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f7ff f93c 	bl	8000aa4 <__aeabi_fsub>
 800182c:	4603      	mov	r3, r0
 800182e:	461c      	mov	r4, r3
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <Motor_Control+0x26c>)
 8001832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f9ea 	bl	8000c10 <__aeabi_i2f>
 800183c:	4603      	mov	r3, r0
 800183e:	4619      	mov	r1, r3
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff f931 	bl	8000aa8 <__addsf3>
 8001846:	4603      	mov	r3, r0
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fb85 	bl	8000f58 <__aeabi_f2iz>
 800184e:	4603      	mov	r3, r0
 8001850:	b21a      	sxth	r2, r3
 8001852:	4b02      	ldr	r3, [pc, #8]	; (800185c <Motor_Control+0x26c>)
 8001854:	801a      	strh	r2, [r3, #0]
			break;
 8001856:	e014      	b.n	8001882 <Motor_Control+0x292>
			break;
 8001858:	bf00      	nop
 800185a:	e012      	b.n	8001882 <Motor_Control+0x292>
 800185c:	20000476 	.word	0x20000476
 8001860:	20000474 	.word	0x20000474
 8001864:	20000472 	.word	0x20000472
 8001868:	20000470 	.word	0x20000470
 800186c:	2000016c 	.word	0x2000016c
 8001870:	20000158 	.word	0x20000158
 8001874:	200000f8 	.word	0x200000f8
 8001878:	20000118 	.word	0x20000118
 800187c:	20000138 	.word	0x20000138
		break;
 8001880:	bf00      	nop
	}
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,motor3);
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <Motor_Control+0x2cc>)
 8001884:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <Motor_Control+0x2d0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,motor2);
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <Motor_Control+0x2d4>)
 8001890:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <Motor_Control+0x2d0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,motor4);
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <Motor_Control+0x2d8>)
 800189c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <Motor_Control+0x2d0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,motor1);
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <Motor_Control+0x2dc>)
 80018a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <Motor_Control+0x2d0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40


}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd90      	pop	{r4, r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000474 	.word	0x20000474
 80018c0:	2000057c 	.word	0x2000057c
 80018c4:	20000472 	.word	0x20000472
 80018c8:	20000476 	.word	0x20000476
 80018cc:	20000470 	.word	0x20000470

080018d0 <MPU6050_Read_Result>:
 因为我很菜，要是下面的代码有错误，那你自己改改
*/

//此函数是读取结果，当然这个结果是互补滤波法计算的
//如果你想读取yaw roll pitch 仅需调用此函数
void MPU6050_Read_Result(void){
 80018d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018d4:	b08a      	sub	sp, #40	; 0x28
 80018d6:	af04      	add	r7, sp, #16

	//复制上面的
	uint8_t Rec_Data_A[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data_A, 6, 1000);
 80018d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2306      	movs	r3, #6
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2301      	movs	r3, #1
 80018ea:	223b      	movs	r2, #59	; 0x3b
 80018ec:	21d0      	movs	r1, #208	; 0xd0
 80018ee:	48bc      	ldr	r0, [pc, #752]	; (8001be0 <MPU6050_Read_Result+0x310>)
 80018f0:	f001 faee 	bl	8002ed0 <HAL_I2C_Mem_Read>
	Accel_X_RAW = (int16_t)(Rec_Data_A[0] << 8 | Rec_Data_A[1]);
 80018f4:	7b3b      	ldrb	r3, [r7, #12]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	7b7b      	ldrb	r3, [r7, #13]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	b21a      	sxth	r2, r3
 8001902:	4bb8      	ldr	r3, [pc, #736]	; (8001be4 <MPU6050_Read_Result+0x314>)
 8001904:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data_A[2] << 8 | Rec_Data_A[3]);
 8001906:	7bbb      	ldrb	r3, [r7, #14]
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b21a      	sxth	r2, r3
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	b21b      	sxth	r3, r3
 8001910:	4313      	orrs	r3, r2
 8001912:	b21a      	sxth	r2, r3
 8001914:	4bb4      	ldr	r3, [pc, #720]	; (8001be8 <MPU6050_Read_Result+0x318>)
 8001916:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data_A[4] << 8 | Rec_Data_A[5]);
 8001918:	7c3b      	ldrb	r3, [r7, #16]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	b21a      	sxth	r2, r3
 800191e:	7c7b      	ldrb	r3, [r7, #17]
 8001920:	b21b      	sxth	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	b21a      	sxth	r2, r3
 8001926:	4bb1      	ldr	r3, [pc, #708]	; (8001bec <MPU6050_Read_Result+0x31c>)
 8001928:	801a      	strh	r2, [r3, #0]
	Ax = Accel_X_RAW / 2048.0;
 800192a:	4bae      	ldr	r3, [pc, #696]	; (8001be4 <MPU6050_Read_Result+0x314>)
 800192c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fd5f 	bl	80003f4 <__aeabi_i2d>
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4bad      	ldr	r3, [pc, #692]	; (8001bf0 <MPU6050_Read_Result+0x320>)
 800193c:	f7fe feee 	bl	800071c <__aeabi_ddiv>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f858 	bl	80009fc <__aeabi_d2f>
 800194c:	4603      	mov	r3, r0
 800194e:	4aa9      	ldr	r2, [pc, #676]	; (8001bf4 <MPU6050_Read_Result+0x324>)
 8001950:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW / 2048.0;
 8001952:	4ba5      	ldr	r3, [pc, #660]	; (8001be8 <MPU6050_Read_Result+0x318>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fd4b 	bl	80003f4 <__aeabi_i2d>
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4ba3      	ldr	r3, [pc, #652]	; (8001bf0 <MPU6050_Read_Result+0x320>)
 8001964:	f7fe feda 	bl	800071c <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f844 	bl	80009fc <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	4aa0      	ldr	r2, [pc, #640]	; (8001bf8 <MPU6050_Read_Result+0x328>)
 8001978:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW  / 2048.0 -0.5;//此处多减0.5是我的硬件问题，如果你硬件是好的，就不用减
 800197a:	4b9c      	ldr	r3, [pc, #624]	; (8001bec <MPU6050_Read_Result+0x31c>)
 800197c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fd37 	bl	80003f4 <__aeabi_i2d>
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b99      	ldr	r3, [pc, #612]	; (8001bf0 <MPU6050_Read_Result+0x320>)
 800198c:	f7fe fec6 	bl	800071c <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b97      	ldr	r3, [pc, #604]	; (8001bfc <MPU6050_Read_Result+0x32c>)
 800199e:	f7fe fbdb 	bl	8000158 <__aeabi_dsub>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f827 	bl	80009fc <__aeabi_d2f>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a93      	ldr	r2, [pc, #588]	; (8001c00 <MPU6050_Read_Result+0x330>)
 80019b2:	6013      	str	r3, [r2, #0]

	//复制上面的
	uint8_t Rec_Data_G[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data_G, 6, 1000);
 80019b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	2306      	movs	r3, #6
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	2243      	movs	r2, #67	; 0x43
 80019c6:	21d0      	movs	r1, #208	; 0xd0
 80019c8:	4885      	ldr	r0, [pc, #532]	; (8001be0 <MPU6050_Read_Result+0x310>)
 80019ca:	f001 fa81 	bl	8002ed0 <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t)(Rec_Data_G[0] << 8 | Rec_Data_G[1]);
 80019ce:	793b      	ldrb	r3, [r7, #4]
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	797b      	ldrb	r3, [r7, #5]
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	4313      	orrs	r3, r2
 80019da:	b21a      	sxth	r2, r3
 80019dc:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <MPU6050_Read_Result+0x334>)
 80019de:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data_G[2] << 8 | Rec_Data_G[3]);
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	b21a      	sxth	r2, r3
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	4b86      	ldr	r3, [pc, #536]	; (8001c08 <MPU6050_Read_Result+0x338>)
 80019f0:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data_G[4] << 8 | Rec_Data_G[5]);
 80019f2:	7a3b      	ldrb	r3, [r7, #8]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	7a7b      	ldrb	r3, [r7, #9]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <MPU6050_Read_Result+0x33c>)
 8001a02:	801a      	strh	r2, [r3, #0]
	Gx = Gyro_X_RAW / 16.384;
 8001a04:	4b7f      	ldr	r3, [pc, #508]	; (8001c04 <MPU6050_Read_Result+0x334>)
 8001a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fcf2 	bl	80003f4 <__aeabi_i2d>
 8001a10:	a36d      	add	r3, pc, #436	; (adr r3, 8001bc8 <MPU6050_Read_Result+0x2f8>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fe81 	bl	800071c <__aeabi_ddiv>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7fe ffeb 	bl	80009fc <__aeabi_d2f>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a79      	ldr	r2, [pc, #484]	; (8001c10 <MPU6050_Read_Result+0x340>)
 8001a2a:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW / 16.384;
 8001a2c:	4b76      	ldr	r3, [pc, #472]	; (8001c08 <MPU6050_Read_Result+0x338>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fcde 	bl	80003f4 <__aeabi_i2d>
 8001a38:	a363      	add	r3, pc, #396	; (adr r3, 8001bc8 <MPU6050_Read_Result+0x2f8>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fe6d 	bl	800071c <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7fe ffd7 	bl	80009fc <__aeabi_d2f>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4a70      	ldr	r2, [pc, #448]	; (8001c14 <MPU6050_Read_Result+0x344>)
 8001a52:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW / 16.384;
 8001a54:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <MPU6050_Read_Result+0x33c>)
 8001a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fcca 	bl	80003f4 <__aeabi_i2d>
 8001a60:	a359      	add	r3, pc, #356	; (adr r3, 8001bc8 <MPU6050_Read_Result+0x2f8>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fe59 	bl	800071c <__aeabi_ddiv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7fe ffc3 	bl	80009fc <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a67      	ldr	r2, [pc, #412]	; (8001c18 <MPU6050_Read_Result+0x348>)
 8001a7a:	6013      	str	r3, [r2, #0]


	//使用加速度计算欧拉角，如果用3.1415926，计算结果巨慢，所以，写短些
	roll_a = atan2(Ay, Az) /3.14f * 180;
 8001a7c:	4b5e      	ldr	r3, [pc, #376]	; (8001bf8 <MPU6050_Read_Result+0x328>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fcc9 	bl	8000418 <__aeabi_f2d>
 8001a86:	4680      	mov	r8, r0
 8001a88:	4689      	mov	r9, r1
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <MPU6050_Read_Result+0x330>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fcc2 	bl	8000418 <__aeabi_f2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4640      	mov	r0, r8
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	f005 f948 	bl	8006d30 <atan2>
 8001aa0:	a34b      	add	r3, pc, #300	; (adr r3, 8001bd0 <MPU6050_Read_Result+0x300>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fe39 	bl	800071c <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <MPU6050_Read_Result+0x34c>)
 8001ab8:	f7fe fd06 	bl	80004c8 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7fe ff9a 	bl	80009fc <__aeabi_d2f>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a55      	ldr	r2, [pc, #340]	; (8001c20 <MPU6050_Read_Result+0x350>)
 8001acc:	6013      	str	r3, [r2, #0]
	pitch_a = - atan2(Ax, Az) /3.14f * 180;
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <MPU6050_Read_Result+0x324>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fca0 	bl	8000418 <__aeabi_f2d>
 8001ad8:	4680      	mov	r8, r0
 8001ada:	4689      	mov	r9, r1
 8001adc:	4b48      	ldr	r3, [pc, #288]	; (8001c00 <MPU6050_Read_Result+0x330>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fc99 	bl	8000418 <__aeabi_f2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4640      	mov	r0, r8
 8001aec:	4649      	mov	r1, r9
 8001aee:	f005 f91f 	bl	8006d30 <atan2>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001afc:	a334      	add	r3, pc, #208	; (adr r3, 8001bd0 <MPU6050_Read_Result+0x300>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7fe fe09 	bl	800071c <__aeabi_ddiv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <MPU6050_Read_Result+0x34c>)
 8001b18:	f7fe fcd6 	bl	80004c8 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7fe ff6a 	bl	80009fc <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4a3e      	ldr	r2, [pc, #248]	; (8001c24 <MPU6050_Read_Result+0x354>)
 8001b2c:	6013      	str	r3, [r2, #0]

	//使用角速度计算欧拉角
	yaw_g = yaw + Gz * 0.005;
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <MPU6050_Read_Result+0x358>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fc70 	bl	8000418 <__aeabi_f2d>
 8001b38:	4604      	mov	r4, r0
 8001b3a:	460d      	mov	r5, r1
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <MPU6050_Read_Result+0x348>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fc69 	bl	8000418 <__aeabi_f2d>
 8001b46:	a324      	add	r3, pc, #144	; (adr r3, 8001bd8 <MPU6050_Read_Result+0x308>)
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fcbc 	bl	80004c8 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4620      	mov	r0, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7fe fb00 	bl	800015c <__adddf3>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7fe ff4a 	bl	80009fc <__aeabi_d2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a30      	ldr	r2, [pc, #192]	; (8001c2c <MPU6050_Read_Result+0x35c>)
 8001b6c:	6013      	str	r3, [r2, #0]
	roll_g = roll + Gx * 0.005;
 8001b6e:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <MPU6050_Read_Result+0x360>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fc50 	bl	8000418 <__aeabi_f2d>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	460d      	mov	r5, r1
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <MPU6050_Read_Result+0x340>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fc49 	bl	8000418 <__aeabi_f2d>
 8001b86:	a314      	add	r3, pc, #80	; (adr r3, 8001bd8 <MPU6050_Read_Result+0x308>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe fc9c 	bl	80004c8 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fae0 	bl	800015c <__adddf3>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7fe ff2a 	bl	80009fc <__aeabi_d2f>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <MPU6050_Read_Result+0x364>)
 8001bac:	6013      	str	r3, [r2, #0]
	pitch_g = pitch + Gy * 0.005;
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <MPU6050_Read_Result+0x368>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fc30 	bl	8000418 <__aeabi_f2d>
 8001bb8:	4604      	mov	r4, r0
 8001bba:	460d      	mov	r5, r1
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MPU6050_Read_Result+0x344>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fc29 	bl	8000418 <__aeabi_f2d>
 8001bc6:	e039      	b.n	8001c3c <MPU6050_Read_Result+0x36c>
 8001bc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bcc:	4030624d 	.word	0x4030624d
 8001bd0:	60000000 	.word	0x60000000
 8001bd4:	40091eb8 	.word	0x40091eb8
 8001bd8:	47ae147b 	.word	0x47ae147b
 8001bdc:	3f747ae1 	.word	0x3f747ae1
 8001be0:	2000041c 	.word	0x2000041c
 8001be4:	20000478 	.word	0x20000478
 8001be8:	2000047a 	.word	0x2000047a
 8001bec:	2000047c 	.word	0x2000047c
 8001bf0:	40a00000 	.word	0x40a00000
 8001bf4:	20000484 	.word	0x20000484
 8001bf8:	20000488 	.word	0x20000488
 8001bfc:	3fe00000 	.word	0x3fe00000
 8001c00:	2000048c 	.word	0x2000048c
 8001c04:	2000047e 	.word	0x2000047e
 8001c08:	20000480 	.word	0x20000480
 8001c0c:	20000482 	.word	0x20000482
 8001c10:	20000490 	.word	0x20000490
 8001c14:	20000494 	.word	0x20000494
 8001c18:	20000498 	.word	0x20000498
 8001c1c:	40668000 	.word	0x40668000
 8001c20:	2000049c 	.word	0x2000049c
 8001c24:	200004a0 	.word	0x200004a0
 8001c28:	200004b8 	.word	0x200004b8
 8001c2c:	200004ac 	.word	0x200004ac
 8001c30:	200004b0 	.word	0x200004b0
 8001c34:	200004a4 	.word	0x200004a4
 8001c38:	200004b4 	.word	0x200004b4
 8001c3c:	a328      	add	r3, pc, #160	; (adr r3, 8001ce0 <MPU6050_Read_Result+0x410>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fc41 	bl	80004c8 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fa85 	bl	800015c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe fecf 	bl	80009fc <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <MPU6050_Read_Result+0x418>)
 8001c62:	6013      	str	r3, [r2, #0]
	//roll = alpha *roll_g +(1 - alpha) * roll_a;
	//pitch = alpha *pitch_g +(1 - alpha) *pitch_a;

	//这是CSDN上的融合方式。
/*https://blog.csdn.net/hbsyaaa/article/details108186892?fromshare=blogdetail&sharetype=blogdetail&sharerId=108186892&sharerefer=PC&sharesource=m0_70625833&sharefrom=from_link*/
	const float alpha = 0.9;//这个0.9可以改，0-1之间的数，自己改改玩玩
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <MPU6050_Read_Result+0x41c>)
 8001c66:	617b      	str	r3, [r7, #20]
	roll = roll + (roll_a - roll_g ) *alpha;
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <MPU6050_Read_Result+0x420>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <MPU6050_Read_Result+0x424>)
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe ff16 	bl	8000aa4 <__aeabi_fsub>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	6979      	ldr	r1, [r7, #20]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f81b 	bl	8000cb8 <__aeabi_fmul>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <MPU6050_Read_Result+0x428>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	f7fe ff0b 	bl	8000aa8 <__addsf3>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <MPU6050_Read_Result+0x428>)
 8001c98:	601a      	str	r2, [r3, #0]
	pitch = pitch + (pitch_a - pitch_g) *alpha;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <MPU6050_Read_Result+0x42c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <MPU6050_Read_Result+0x418>)
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fefd 	bl	8000aa4 <__aeabi_fsub>
 8001caa:	4603      	mov	r3, r0
 8001cac:	6979      	ldr	r1, [r7, #20]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f802 	bl	8000cb8 <__aeabi_fmul>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MPU6050_Read_Result+0x430>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f7fe fef2 	bl	8000aa8 <__addsf3>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <MPU6050_Read_Result+0x430>)
 8001cca:	601a      	str	r2, [r3, #0]
	yaw = yaw_g;
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <MPU6050_Read_Result+0x434>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <MPU6050_Read_Result+0x438>)
 8001cd2:	6013      	str	r3, [r2, #0]
	这个纯粹是硬件问题，就算算法怎么牛逼也解决不了。
	只能外加磁力计解决，也可以直接使用MPU9250，这个是自带磁力计的。
	使用时注意不要和电机靠太近，磁场很容易受到干扰*/

	//用STM32C8T6少计算太多浮点数，计算太慢了
}
 8001cd4:	bf00      	nop
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cde:	bf00      	nop
 8001ce0:	47ae147b 	.word	0x47ae147b
 8001ce4:	3f747ae1 	.word	0x3f747ae1
 8001ce8:	200004a8 	.word	0x200004a8
 8001cec:	3f666666 	.word	0x3f666666
 8001cf0:	2000049c 	.word	0x2000049c
 8001cf4:	200004a4 	.word	0x200004a4
 8001cf8:	200004b0 	.word	0x200004b0
 8001cfc:	200004a0 	.word	0x200004a0
 8001d00:	200004b4 	.word	0x200004b4
 8001d04:	200004ac 	.word	0x200004ac
 8001d08:	200004b8 	.word	0x200004b8

08001d0c <SPIx_ReadWriteByte>:
  * 输入参数: byte：待发送数据
  * 返 回 值: uint8_t：接收到的数据
  * 说    明：无
  */
uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
  uint8_t d_read,d_send=byte;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	73bb      	strb	r3, [r7, #14]
  if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK)
 8001d1c:	f107 020f 	add.w	r2, r7, #15
 8001d20:	f107 010e 	add.w	r1, r7, #14
 8001d24:	23ff      	movs	r3, #255	; 0xff
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f002 faca 	bl	80042c4 <HAL_SPI_TransmitReceive>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SPIx_ReadWriteByte+0x2e>
  {
    d_read=0xFF;
 8001d36:	23ff      	movs	r3, #255	; 0xff
 8001d38:	73fb      	strb	r3, [r7, #15]
  }
  return d_read;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <NRF24L01_Check>:
  * 输入参数: 无
  * 返 回 值: 0，成功;1，失败
  * 说    明：无
  */
uint8_t NRF24L01_Check(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
	uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <NRF24L01_Check+0x64>)
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d52:	6018      	str	r0, [r3, #0]
 8001d54:	3304      	adds	r3, #4
 8001d56:	7019      	strb	r1, [r3, #0]
	uint8_t i;

	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
 8001d58:	463b      	mov	r3, r7
 8001d5a:	2205      	movs	r2, #5
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	2030      	movs	r0, #48	; 0x30
 8001d60:	f000 f8ac 	bl	8001ebc <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
 8001d64:	463b      	mov	r3, r7
 8001d66:	2205      	movs	r2, #5
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2010      	movs	r0, #16
 8001d6c:	f000 f86e 	bl	8001e4c <NRF24L01_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;
 8001d70:	2300      	movs	r3, #0
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	e009      	b.n	8001d8a <NRF24L01_Check+0x46>
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	3308      	adds	r3, #8
 8001d7a:	443b      	add	r3, r7
 8001d7c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001d80:	2ba5      	cmp	r3, #165	; 0xa5
 8001d82:	d106      	bne.n	8001d92 <NRF24L01_Check+0x4e>
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	3301      	adds	r3, #1
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d9f2      	bls.n	8001d76 <NRF24L01_Check+0x32>
 8001d90:	e000      	b.n	8001d94 <NRF24L01_Check+0x50>
 8001d92:	bf00      	nop
	if(i!=5)return 1;   //检测24L01错误
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d001      	beq.n	8001d9e <NRF24L01_Check+0x5a>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <NRF24L01_Check+0x5c>
	return 0;		 	//检测到24L01
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	08007288 	.word	0x08007288

08001dac <NRF24L01_Write_Reg>:
  * 返 回 值: 无
  * 说    明：reg:指定寄存器地址
  *
  */
uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	4613      	mov	r3, r2
 8001dba:	71bb      	strb	r3, [r7, #6]
    uint8_t status;
  NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <NRF24L01_Write_Reg+0x4c>)
 8001dc4:	f000 ff28 	bl	8002c18 <HAL_GPIO_WritePin>
  status =SPIx_ReadWriteByte(&hspi2,reg);   //发送寄存器号
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480b      	ldr	r0, [pc, #44]	; (8001dfc <NRF24L01_Write_Reg+0x50>)
 8001dce:	f7ff ff9d 	bl	8001d0c <SPIx_ReadWriteByte>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  SPIx_ReadWriteByte(&hspi2,value);         //写入寄存器的值
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4808      	ldr	r0, [pc, #32]	; (8001dfc <NRF24L01_Write_Reg+0x50>)
 8001ddc:	f7ff ff96 	bl	8001d0c <SPIx_ReadWriteByte>
  NRF24L01_SPI_CS_DISABLE();                //禁止SPI传输
 8001de0:	2201      	movs	r2, #1
 8001de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de6:	4804      	ldr	r0, [pc, #16]	; (8001df8 <NRF24L01_Write_Reg+0x4c>)
 8001de8:	f000 ff16 	bl	8002c18 <HAL_GPIO_WritePin>
  return(status);       			//返回状态值
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40010c00 	.word	0x40010c00
 8001dfc:	200004dc 	.word	0x200004dc

08001e00 <NRF24L01_Read_Reg>:
  * 返 回 值: 无
  * 说    明：reg:要读的寄存器
  *
  */
uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
 	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <NRF24L01_Read_Reg+0x44>)
 8001e12:	f000 ff01 	bl	8002c18 <HAL_GPIO_WritePin>
  SPIx_ReadWriteByte(&hspi2,reg);   //发送寄存器号
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480b      	ldr	r0, [pc, #44]	; (8001e48 <NRF24L01_Read_Reg+0x48>)
 8001e1c:	f7ff ff76 	bl	8001d0c <SPIx_ReadWriteByte>
  reg_val=SPIx_ReadWriteByte(&hspi2,0XFF);//读取寄存器内容
 8001e20:	21ff      	movs	r1, #255	; 0xff
 8001e22:	4809      	ldr	r0, [pc, #36]	; (8001e48 <NRF24L01_Read_Reg+0x48>)
 8001e24:	f7ff ff72 	bl	8001d0c <SPIx_ReadWriteByte>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]
  NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e32:	4804      	ldr	r0, [pc, #16]	; (8001e44 <NRF24L01_Read_Reg+0x44>)
 8001e34:	f000 fef0 	bl	8002c18 <HAL_GPIO_WritePin>
  return(reg_val);           //返回状态值
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40010c00 	.word	0x40010c00
 8001e48:	200004dc 	.word	0x200004dc

08001e4c <NRF24L01_Read_Buf>:
  * 返 回 值: 此次读到的状态寄存器值
  * 说    明：无
  *
  */
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;

  NRF24L01_SPI_CS_ENABLE();           //使能SPI传输
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e62:	4814      	ldr	r0, [pc, #80]	; (8001eb4 <NRF24L01_Read_Buf+0x68>)
 8001e64:	f000 fed8 	bl	8002c18 <HAL_GPIO_WritePin>
  status=SPIx_ReadWriteByte(&hspi2,reg);//发送寄存器值(位置),并读取状态值
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4812      	ldr	r0, [pc, #72]	; (8001eb8 <NRF24L01_Read_Buf+0x6c>)
 8001e6e:	f7ff ff4d 	bl	8001d0c <SPIx_ReadWriteByte>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73bb      	strb	r3, [r7, #14]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	e00b      	b.n	8001e94 <NRF24L01_Read_Buf+0x48>
  {
    pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&hspi2,0XFF);//读出数据
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	18d4      	adds	r4, r2, r3
 8001e82:	21ff      	movs	r1, #255	; 0xff
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <NRF24L01_Read_Buf+0x6c>)
 8001e86:	f7ff ff41 	bl	8001d0c <SPIx_ReadWriteByte>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	7023      	strb	r3, [r4, #0]
 	for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	3301      	adds	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	79bb      	ldrb	r3, [r7, #6]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3ef      	bcc.n	8001e7c <NRF24L01_Read_Buf+0x30>
  }
  NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea2:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <NRF24L01_Read_Buf+0x68>)
 8001ea4:	f000 feb8 	bl	8002c18 <HAL_GPIO_WritePin>
  return status;        //返回读到的状态值
 8001ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd90      	pop	{r4, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40010c00 	.word	0x40010c00
 8001eb8:	200004dc 	.word	0x200004dc

08001ebc <NRF24L01_Write_Buf>:
  * 返 回 值: 无
  * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度
  *
  */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;
 	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed2:	4813      	ldr	r0, [pc, #76]	; (8001f20 <NRF24L01_Write_Buf+0x64>)
 8001ed4:	f000 fea0 	bl	8002c18 <HAL_GPIO_WritePin>
  status = SPIx_ReadWriteByte(&hspi2,reg);//发送寄存器值(位置),并读取状态值
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4811      	ldr	r0, [pc, #68]	; (8001f24 <NRF24L01_Write_Buf+0x68>)
 8001ede:	f7ff ff15 	bl	8001d0c <SPIx_ReadWriteByte>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73bb      	strb	r3, [r7, #14]
  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e00a      	b.n	8001f02 <NRF24L01_Write_Buf+0x46>
  {
    SPIx_ReadWriteByte(&hspi2,*pBuf++); //写入数据
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	603a      	str	r2, [r7, #0]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480b      	ldr	r0, [pc, #44]	; (8001f24 <NRF24L01_Write_Buf+0x68>)
 8001ef8:	f7ff ff08 	bl	8001d0c <SPIx_ReadWriteByte>
  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	3301      	adds	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	79bb      	ldrb	r3, [r7, #6]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d3f0      	bcc.n	8001eec <NRF24L01_Write_Buf+0x30>
  }
  NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f10:	4803      	ldr	r0, [pc, #12]	; (8001f20 <NRF24L01_Write_Buf+0x64>)
 8001f12:	f000 fe81 	bl	8002c18 <HAL_GPIO_WritePin>
  return status;          //返回读到的状态值
 8001f16:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40010c00 	.word	0x40010c00
 8001f24:	200004dc 	.word	0x200004dc

08001f28 <NRF24L01_RxPacket>:
  * 返 回 值: 无
  * 说    明：无
  *
  */
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 8001f30:	2007      	movs	r0, #7
 8001f32:	f7ff ff65 	bl	8001e00 <NRF24L01_Read_Reg>
 8001f36:	4603      	mov	r3, r0
 8001f38:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	2027      	movs	r0, #39	; 0x27
 8001f40:	f7ff ff34 	bl	8001dac <NRF24L01_Write_Reg>
	if(sta&RX_OK)//接收到数据
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00d      	beq.n	8001f6a <NRF24L01_RxPacket+0x42>
	{
		NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
 8001f4e:	2220      	movs	r2, #32
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	2061      	movs	r0, #97	; 0x61
 8001f54:	f7ff ff7a 	bl	8001e4c <NRF24L01_Read_Buf>
		NRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器
 8001f58:	21ff      	movs	r1, #255	; 0xff
 8001f5a:	20e2      	movs	r0, #226	; 0xe2
 8001f5c:	f7ff ff26 	bl	8001dac <NRF24L01_Write_Reg>

		//失联判断逻辑，加一个标志位
		connect_flag = 0;
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <NRF24L01_RxPacket+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	801a      	strh	r2, [r3, #0]

		return 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <NRF24L01_RxPacket+0x44>
	}
	return 1;//没收到任何数据
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000001a 	.word	0x2000001a

08001f78 <NRF24L01_RX_Mode>:
  * 返 回 值: 无
  * 说    明：无
  *
  */
void NRF24L01_RX_Mode(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  NRF24L01_CE_LOW();
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f82:	4815      	ldr	r0, [pc, #84]	; (8001fd8 <NRF24L01_RX_Mode+0x60>)
 8001f84:	f000 fe48 	bl	8002c18 <HAL_GPIO_WritePin>
  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC
 8001f88:	210f      	movs	r1, #15
 8001f8a:	2020      	movs	r0, #32
 8001f8c:	f7ff ff0e 	bl	8001dac <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答
 8001f90:	2101      	movs	r1, #1
 8001f92:	2021      	movs	r0, #33	; 0x21
 8001f94:	f7ff ff0a 	bl	8001dac <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址
 8001f98:	2101      	movs	r1, #1
 8001f9a:	2022      	movs	r0, #34	; 0x22
 8001f9c:	f7ff ff06 	bl	8001dac <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);	     //设置RF通信频率
 8001fa0:	2128      	movs	r1, #40	; 0x28
 8001fa2:	2025      	movs	r0, #37	; 0x25
 8001fa4:	f7ff ff02 	bl	8001dac <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8001fa8:	210f      	movs	r1, #15
 8001faa:	2026      	movs	r0, #38	; 0x26
 8001fac:	f7ff fefe 	bl	8001dac <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	2031      	movs	r0, #49	; 0x31
 8001fb4:	f7ff fefa 	bl	8001dac <NRF24L01_Write_Reg>
  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH);//写RX节点地址
 8001fb8:	2205      	movs	r2, #5
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <NRF24L01_RX_Mode+0x64>)
 8001fbc:	202a      	movs	r0, #42	; 0x2a
 8001fbe:	f7ff ff7d 	bl	8001ebc <NRF24L01_Write_Buf>
  NRF24L01_CE_HIGH(); //CE为高,进入接收模式
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc8:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <NRF24L01_RX_Mode+0x60>)
 8001fca:	f000 fe25 	bl	8002c18 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f000 fb9a 	bl	8002708 <HAL_Delay>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	08007298 	.word	0x08007298

08001fe0 <PidUpdata>:
#include "main.h"
#include"pid.h"
#include"Fly_Data.h"

void PidUpdata(PidObject *pid,float dt){
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]

	//本次偏差
	float temp_err;
	float dri;
	//计算偏差值
	temp_err = pid->desired - pid->measured;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f7fe fd55 	bl	8000aa4 <__aeabi_fsub>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	60fb      	str	r3, [r7, #12]
	//计算积分。偏差累计和
	pid->integ += temp_err * dt;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689c      	ldr	r4, [r3, #8]
 8002002:	6839      	ldr	r1, [r7, #0]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7fe fe57 	bl	8000cb8 <__aeabi_fmul>
 800200a:	4603      	mov	r3, r0
 800200c:	4619      	mov	r1, r3
 800200e:	4620      	mov	r0, r4
 8002010:	f7fe fd4a 	bl	8000aa8 <__addsf3>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
	//计算微分，偏差的变化率
	dri = (temp_err - pid->prevError ) / dt;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4619      	mov	r1, r3
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f7fe fd3e 	bl	8000aa4 <__aeabi_fsub>
 8002028:	4603      	mov	r3, r0
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fef7 	bl	8000e20 <__aeabi_fdiv>
 8002032:	4603      	mov	r3, r0
 8002034:	60bb      	str	r3, [r7, #8]
	//结果保存到out里
	pid->out =pid->kp * temp_err + pid->ki *pid->integ + pid->kd * dri;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fe3b 	bl	8000cb8 <__aeabi_fmul>
 8002042:	4603      	mov	r3, r0
 8002044:	461c      	mov	r4, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7fe fe31 	bl	8000cb8 <__aeabi_fmul>
 8002056:	4603      	mov	r3, r0
 8002058:	4619      	mov	r1, r3
 800205a:	4620      	mov	r0, r4
 800205c:	f7fe fd24 	bl	8000aa8 <__addsf3>
 8002060:	4603      	mov	r3, r0
 8002062:	461c      	mov	r4, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fe24 	bl	8000cb8 <__aeabi_fmul>
 8002070:	4603      	mov	r3, r0
 8002072:	4619      	mov	r1, r3
 8002074:	4620      	mov	r0, r4
 8002076:	f7fe fd17 	bl	8000aa8 <__addsf3>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	61da      	str	r2, [r3, #28]
	pid->prevError = temp_err;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]

}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}

08002090 <CasecadePID>:

void CasecadePID(PidObject *pidAngle, PidObject *pidRate, float dt){
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]

	//角度外环
	PidUpdata(pidAngle, dt);
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f7ff ff9e 	bl	8001fe0 <PidUpdata>
	//外环的输出，赋值给内环的期望值
	pidRate->desired = pidAngle->out;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	601a      	str	r2, [r3, #0]
	//对内环进行计算
	PidUpdata(pidRate, dt);
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	68b8      	ldr	r0, [r7, #8]
 80020b0:	f7ff ff96 	bl	8001fe0 <PidUpdata>

}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <ResetPID>:
void ResetPID(PidObject **pidObjects, uint8_t len){
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	70fb      	strb	r3, [r7, #3]

	for(uint8_t i = 0; i <len; i++){
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e022      	b.n	8002114 <ResetPID+0x58>
		pidObjects[i]->desired = 0;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
		pidObjects[i]->prevError = 0;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	605a      	str	r2, [r3, #4]
		pidObjects[i]->out = 0;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
		pidObjects[i]->integ = 0;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
	for(uint8_t i = 0; i <len; i++){
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	3301      	adds	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	429a      	cmp	r2, r3
 800211a:	d3d8      	bcc.n	80020ce <ResetPID+0x12>

	}


}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <Pid_Init>:
void Pid_Init(){
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

	//当你看到这行注释，你就自己老老实实调PID去

	//内环
	pidRateX.kp = 0.08f;
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <Pid_Init+0x90>)
 800212e:	4a23      	ldr	r2, [pc, #140]	; (80021bc <Pid_Init+0x94>)
 8002130:	60da      	str	r2, [r3, #12]
	pidRateY.kp = 0.0f;
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <Pid_Init+0x98>)
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
	pidRateZ.kp = 0.0f;
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <Pid_Init+0x9c>)
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	60da      	str	r2, [r3, #12]

	pidRateX.ki = 0.0f;
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <Pid_Init+0x90>)
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
	pidRateY.ki = 0.0f;
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <Pid_Init+0x98>)
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
	pidRateZ.ki = 0.0f;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <Pid_Init+0x9c>)
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	611a      	str	r2, [r3, #16]

	pidRateX.kd = 0.08f;
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <Pid_Init+0x90>)
 800215c:	4a17      	ldr	r2, [pc, #92]	; (80021bc <Pid_Init+0x94>)
 800215e:	615a      	str	r2, [r3, #20]
	pidRateY.kd = 0.08f;
 8002160:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <Pid_Init+0x98>)
 8002162:	4a16      	ldr	r2, [pc, #88]	; (80021bc <Pid_Init+0x94>)
 8002164:	615a      	str	r2, [r3, #20]
	pidRateZ.kd = 0.0f;
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <Pid_Init+0x9c>)
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	615a      	str	r2, [r3, #20]

	/*外环*/
	pidPitch.kp = 7.0f;
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <Pid_Init+0xa0>)
 8002170:	4a16      	ldr	r2, [pc, #88]	; (80021cc <Pid_Init+0xa4>)
 8002172:	60da      	str	r2, [r3, #12]
	pidRoll.kp = 7.0f;
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <Pid_Init+0xa8>)
 8002176:	4a15      	ldr	r2, [pc, #84]	; (80021cc <Pid_Init+0xa4>)
 8002178:	60da      	str	r2, [r3, #12]
	pidYaw.kp = 7.0f;
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <Pid_Init+0xac>)
 800217c:	4a13      	ldr	r2, [pc, #76]	; (80021cc <Pid_Init+0xa4>)
 800217e:	60da      	str	r2, [r3, #12]

	pidPitch.ki = 0.0f;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <Pid_Init+0xa0>)
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
	pidRoll.ki = 0.0f;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <Pid_Init+0xa8>)
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
	pidYaw.ki = 0.0f;
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <Pid_Init+0xac>)
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	611a      	str	r2, [r3, #16]

	pidPitch.kd = 0.0f;
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <Pid_Init+0xa0>)
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
	pidRoll.kd = 0.0f;
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <Pid_Init+0xa8>)
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
	pidYaw.kd = 0.0f;
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <Pid_Init+0xac>)
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]

}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	200000f8 	.word	0x200000f8
 80021bc:	3da3d70a 	.word	0x3da3d70a
 80021c0:	20000118 	.word	0x20000118
 80021c4:	20000138 	.word	0x20000138
 80021c8:	20000098 	.word	0x20000098
 80021cc:	40e00000 	.word	0x40e00000
 80021d0:	200000b8 	.word	0x200000b8
 80021d4:	200000d8 	.word	0x200000d8

080021d8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <MX_SPI2_Init+0x64>)
 80021de:	4a18      	ldr	r2, [pc, #96]	; (8002240 <MX_SPI2_Init+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <MX_SPI2_Init+0x64>)
 80021e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <MX_SPI2_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <MX_SPI2_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_SPI2_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_SPI2_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <MX_SPI2_Init+0x64>)
 8002204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002208:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_SPI2_Init+0x64>)
 800220c:	2200      	movs	r2, #0
 800220e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <MX_SPI2_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_SPI2_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <MX_SPI2_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_SPI2_Init+0x64>)
 8002224:	220a      	movs	r2, #10
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <MX_SPI2_Init+0x64>)
 800222a:	f001 ffc7 	bl	80041bc <HAL_SPI_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002234:	f7ff f9d6 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200004dc 	.word	0x200004dc
 8002240:	40003800 	.word	0x40003800

08002244 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_SPI_MspInit+0x8c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d131      	bne.n	80022c8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 800226a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226e:	61d3      	str	r3, [r2, #28]
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002294:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	4619      	mov	r1, r3
 80022a8:	480b      	ldr	r0, [pc, #44]	; (80022d8 <HAL_SPI_MspInit+0x94>)
 80022aa:	f000 fb31 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4619      	mov	r1, r3
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <HAL_SPI_MspInit+0x94>)
 80022c4:	f000 fb24 	bl	8002910 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40003800 	.word	0x40003800
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010c00 	.word	0x40010c00

080022dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_MspInit+0x68>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_MspInit+0x68>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6193      	str	r3, [r2, #24]
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_MspInit+0x68>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_MspInit+0x68>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_MspInit+0x68>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	61d3      	str	r3, [r2, #28]
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_MspInit+0x68>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	210f      	movs	r1, #15
 8002316:	f06f 0001 	mvn.w	r0, #1
 800231a:	f000 face 	bl	80028ba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_MspInit+0x6c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_MspInit+0x6c>)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000

0800234c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08e      	sub	sp, #56	; 0x38
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002362:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_InitTick+0xe8>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a33      	ldr	r2, [pc, #204]	; (8002434 <HAL_InitTick+0xe8>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	61d3      	str	r3, [r2, #28]
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_InitTick+0xe8>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800237a:	f107 0210 	add.w	r2, r7, #16
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fecb 	bl	8004120 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d103      	bne.n	800239c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002394:	f001 feb0 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 8002398:	6378      	str	r0, [r7, #52]	; 0x34
 800239a:	e004      	b.n	80023a6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800239c:	f001 feac 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 80023a0:	4603      	mov	r3, r0
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <HAL_InitTick+0xec>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0c9b      	lsrs	r3, r3, #18
 80023b0:	3b01      	subs	r3, #1
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_InitTick+0xf0>)
 80023b6:	4a22      	ldr	r2, [pc, #136]	; (8002440 <HAL_InitTick+0xf4>)
 80023b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_InitTick+0xf0>)
 80023bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023c0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_InitTick+0xf0>)
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_InitTick+0xf0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_InitTick+0xf0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_InitTick+0xf0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80023da:	4818      	ldr	r0, [pc, #96]	; (800243c <HAL_InitTick+0xf0>)
 80023dc:	f002 f9d5 	bl	800478a <HAL_TIM_Base_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80023e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d11b      	bne.n	8002426 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80023ee:	4813      	ldr	r0, [pc, #76]	; (800243c <HAL_InitTick+0xf0>)
 80023f0:	f002 fa1a 	bl	8004828 <HAL_TIM_Base_Start_IT>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80023fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d111      	bne.n	8002426 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002402:	201e      	movs	r0, #30
 8002404:	f000 fa75 	bl	80028f2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	d808      	bhi.n	8002420 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800240e:	2200      	movs	r2, #0
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	201e      	movs	r0, #30
 8002414:	f000 fa51 	bl	80028ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_InitTick+0xf8>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e002      	b.n	8002426 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002426:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800242a:	4618      	mov	r0, r3
 800242c:	3738      	adds	r7, #56	; 0x38
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	431bde83 	.word	0x431bde83
 800243c:	20000534 	.word	0x20000534
 8002440:	40000800 	.word	0x40000800
 8002444:	20000020 	.word	0x20000020

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800244c:	e7fe      	b.n	800244c <NMI_Handler+0x4>

0800244e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <HardFault_Handler+0x4>

08002454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <MemManage_Handler+0x4>

0800245a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245e:	e7fe      	b.n	800245e <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <UsageFault_Handler+0x4>

08002466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
	...

08002474 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <TIM4_IRQHandler+0x10>)
 800247a:	f002 fb21 	bl	8004ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000534 	.word	0x20000534

08002488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	; 0x38
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a8:	f107 0320 	add.w	r3, r7, #32
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
 80024c0:	615a      	str	r2, [r3, #20]
 80024c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024c4:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <MX_TIM2_Init+0x128>)
 80024c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024cc:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <MX_TIM2_Init+0x128>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d2:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <MX_TIM2_Init+0x128>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80024d8:	4b38      	ldr	r3, [pc, #224]	; (80025bc <MX_TIM2_Init+0x128>)
 80024da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <MX_TIM2_Init+0x128>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e6:	4b35      	ldr	r3, [pc, #212]	; (80025bc <MX_TIM2_Init+0x128>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ec:	4833      	ldr	r0, [pc, #204]	; (80025bc <MX_TIM2_Init+0x128>)
 80024ee:	f002 f94c 	bl	800478a <HAL_TIM_Base_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80024f8:	f7ff f874 	bl	80015e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002506:	4619      	mov	r1, r3
 8002508:	482c      	ldr	r0, [pc, #176]	; (80025bc <MX_TIM2_Init+0x128>)
 800250a:	f002 fc8b 	bl	8004e24 <HAL_TIM_ConfigClockSource>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002514:	f7ff f866 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002518:	4828      	ldr	r0, [pc, #160]	; (80025bc <MX_TIM2_Init+0x128>)
 800251a:	f002 f9d7 	bl	80048cc <HAL_TIM_PWM_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002524:	f7ff f85e 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002530:	f107 0320 	add.w	r3, r7, #32
 8002534:	4619      	mov	r1, r3
 8002536:	4821      	ldr	r0, [pc, #132]	; (80025bc <MX_TIM2_Init+0x128>)
 8002538:	f003 f810 	bl	800555c <HAL_TIMEx_MasterConfigSynchronization>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002542:	f7ff f84f 	bl	80015e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002546:	2360      	movs	r3, #96	; 0x60
 8002548:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	2200      	movs	r2, #0
 800255a:	4619      	mov	r1, r3
 800255c:	4817      	ldr	r0, [pc, #92]	; (80025bc <MX_TIM2_Init+0x128>)
 800255e:	f002 fb9f 	bl	8004ca0 <HAL_TIM_PWM_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002568:	f7ff f83c 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	2204      	movs	r2, #4
 8002570:	4619      	mov	r1, r3
 8002572:	4812      	ldr	r0, [pc, #72]	; (80025bc <MX_TIM2_Init+0x128>)
 8002574:	f002 fb94 	bl	8004ca0 <HAL_TIM_PWM_ConfigChannel>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800257e:	f7ff f831 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	2208      	movs	r2, #8
 8002586:	4619      	mov	r1, r3
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <MX_TIM2_Init+0x128>)
 800258a:	f002 fb89 	bl	8004ca0 <HAL_TIM_PWM_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002594:	f7ff f826 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	220c      	movs	r2, #12
 800259c:	4619      	mov	r1, r3
 800259e:	4807      	ldr	r0, [pc, #28]	; (80025bc <MX_TIM2_Init+0x128>)
 80025a0:	f002 fb7e 	bl	8004ca0 <HAL_TIM_PWM_ConfigChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80025aa:	f7ff f81b 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025ae:	4803      	ldr	r0, [pc, #12]	; (80025bc <MX_TIM2_Init+0x128>)
 80025b0:	f000 f822 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 80025b4:	bf00      	nop
 80025b6:	3738      	adds	r7, #56	; 0x38
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000057c 	.word	0x2000057c

080025c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d0:	d10b      	bne.n	80025ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_TIM_Base_MspInit+0x34>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_TIM_Base_MspInit+0x34>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_TIM_Base_MspInit+0x34>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002616:	d117      	bne.n	8002648 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_TIM_MspPostInit+0x58>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <HAL_TIM_MspPostInit+0x58>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_TIM_MspPostInit+0x58>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002630:	230f      	movs	r3, #15
 8002632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2302      	movs	r3, #2
 800263a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	4619      	mov	r1, r3
 8002642:	4804      	ldr	r0, [pc, #16]	; (8002654 <HAL_TIM_MspPostInit+0x5c>)
 8002644:	f000 f964 	bl	8002910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002648:	bf00      	nop
 800264a:	3720      	adds	r7, #32
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	40010800 	.word	0x40010800

08002658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002658:	f7ff ff16 	bl	8002488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800265c:	480b      	ldr	r0, [pc, #44]	; (800268c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800265e:	490c      	ldr	r1, [pc, #48]	; (8002690 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002660:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002664:	e002      	b.n	800266c <LoopCopyDataInit>

08002666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800266a:	3304      	adds	r3, #4

0800266c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800266c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002670:	d3f9      	bcc.n	8002666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002674:	4c09      	ldr	r4, [pc, #36]	; (800269c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002678:	e001      	b.n	800267e <LoopFillZerobss>

0800267a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800267a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800267c:	3204      	adds	r2, #4

0800267e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002680:	d3fb      	bcc.n	800267a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002682:	f004 fadb 	bl	8006c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002686:	f7fe ff29 	bl	80014dc <main>
  bx lr
 800268a:	4770      	bx	lr
  ldr r0, =_sdata
 800268c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002690:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002694:	08007348 	.word	0x08007348
  ldr r2, =_sbss
 8002698:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800269c:	2000145c 	.word	0x2000145c

080026a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC1_2_IRQHandler>
	...

080026a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_Init+0x28>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <HAL_Init+0x28>)
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b4:	2003      	movs	r0, #3
 80026b6:	f000 f8f5 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ba:	200f      	movs	r0, #15
 80026bc:	f7ff fe46 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c0:	f7ff fe0c 	bl	80022dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000

080026d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_IncTick+0x1c>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_IncTick+0x20>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <HAL_IncTick+0x20>)
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	20000024 	.word	0x20000024
 80026f0:	200005c4 	.word	0x200005c4

080026f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return uwTick;
 80026f8:	4b02      	ldr	r3, [pc, #8]	; (8002704 <HAL_GetTick+0x10>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	200005c4 	.word	0x200005c4

08002708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff fff0 	bl	80026f4 <HAL_GetTick>
 8002714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d005      	beq.n	800272e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_Delay+0x44>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800272e:	bf00      	nop
 8002730:	f7ff ffe0 	bl	80026f4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	429a      	cmp	r2, r3
 800273e:	d8f7      	bhi.n	8002730 <HAL_Delay+0x28>
  {
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000024 	.word	0x20000024

08002750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800276c:	4013      	ands	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800277c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002782:	4a04      	ldr	r2, [pc, #16]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60d3      	str	r3, [r2, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <__NVIC_GetPriorityGrouping+0x18>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 0307 	and.w	r3, r3, #7
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	db0b      	blt.n	80027de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	4906      	ldr	r1, [pc, #24]	; (80027e8 <__NVIC_EnableIRQ+0x34>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2001      	movs	r0, #1
 80027d6:	fa00 f202 	lsl.w	r2, r0, r2
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100

080027ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	db0a      	blt.n	8002816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	490c      	ldr	r1, [pc, #48]	; (8002838 <__NVIC_SetPriority+0x4c>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	0112      	lsls	r2, r2, #4
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	440b      	add	r3, r1
 8002810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002814:	e00a      	b.n	800282c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4908      	ldr	r1, [pc, #32]	; (800283c <__NVIC_SetPriority+0x50>)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	3b04      	subs	r3, #4
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	440b      	add	r3, r1
 800282a:	761a      	strb	r2, [r3, #24]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f1c3 0307 	rsb	r3, r3, #7
 800285a:	2b04      	cmp	r3, #4
 800285c:	bf28      	it	cs
 800285e:	2304      	movcs	r3, #4
 8002860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3304      	adds	r3, #4
 8002866:	2b06      	cmp	r3, #6
 8002868:	d902      	bls.n	8002870 <NVIC_EncodePriority+0x30>
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3b03      	subs	r3, #3
 800286e:	e000      	b.n	8002872 <NVIC_EncodePriority+0x32>
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	f04f 32ff 	mov.w	r2, #4294967295
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	401a      	ands	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002888:	f04f 31ff 	mov.w	r1, #4294967295
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	43d9      	mvns	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	4313      	orrs	r3, r2
         );
}
 800289a:	4618      	mov	r0, r3
 800289c:	3724      	adds	r7, #36	; 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff4f 	bl	8002750 <__NVIC_SetPriorityGrouping>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028cc:	f7ff ff64 	bl	8002798 <__NVIC_GetPriorityGrouping>
 80028d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f7ff ffb2 	bl	8002840 <NVIC_EncodePriority>
 80028dc:	4602      	mov	r2, r0
 80028de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff81 	bl	80027ec <__NVIC_SetPriority>
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff57 	bl	80027b4 <__NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b08b      	sub	sp, #44	; 0x2c
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002922:	e169      	b.n	8002bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002924:	2201      	movs	r2, #1
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	429a      	cmp	r2, r3
 800293e:	f040 8158 	bne.w	8002bf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a9a      	ldr	r2, [pc, #616]	; (8002bb0 <HAL_GPIO_Init+0x2a0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d05e      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 800294c:	4a98      	ldr	r2, [pc, #608]	; (8002bb0 <HAL_GPIO_Init+0x2a0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d875      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002952:	4a98      	ldr	r2, [pc, #608]	; (8002bb4 <HAL_GPIO_Init+0x2a4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d058      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002958:	4a96      	ldr	r2, [pc, #600]	; (8002bb4 <HAL_GPIO_Init+0x2a4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d86f      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800295e:	4a96      	ldr	r2, [pc, #600]	; (8002bb8 <HAL_GPIO_Init+0x2a8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d052      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002964:	4a94      	ldr	r2, [pc, #592]	; (8002bb8 <HAL_GPIO_Init+0x2a8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d869      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800296a:	4a94      	ldr	r2, [pc, #592]	; (8002bbc <HAL_GPIO_Init+0x2ac>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d04c      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002970:	4a92      	ldr	r2, [pc, #584]	; (8002bbc <HAL_GPIO_Init+0x2ac>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d863      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002976:	4a92      	ldr	r2, [pc, #584]	; (8002bc0 <HAL_GPIO_Init+0x2b0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d046      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 800297c:	4a90      	ldr	r2, [pc, #576]	; (8002bc0 <HAL_GPIO_Init+0x2b0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d85d      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002982:	2b12      	cmp	r3, #18
 8002984:	d82a      	bhi.n	80029dc <HAL_GPIO_Init+0xcc>
 8002986:	2b12      	cmp	r3, #18
 8002988:	d859      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800298a:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <HAL_GPIO_Init+0x80>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	08002a0b 	.word	0x08002a0b
 8002994:	080029e5 	.word	0x080029e5
 8002998:	080029f7 	.word	0x080029f7
 800299c:	08002a39 	.word	0x08002a39
 80029a0:	08002a3f 	.word	0x08002a3f
 80029a4:	08002a3f 	.word	0x08002a3f
 80029a8:	08002a3f 	.word	0x08002a3f
 80029ac:	08002a3f 	.word	0x08002a3f
 80029b0:	08002a3f 	.word	0x08002a3f
 80029b4:	08002a3f 	.word	0x08002a3f
 80029b8:	08002a3f 	.word	0x08002a3f
 80029bc:	08002a3f 	.word	0x08002a3f
 80029c0:	08002a3f 	.word	0x08002a3f
 80029c4:	08002a3f 	.word	0x08002a3f
 80029c8:	08002a3f 	.word	0x08002a3f
 80029cc:	08002a3f 	.word	0x08002a3f
 80029d0:	08002a3f 	.word	0x08002a3f
 80029d4:	080029ed 	.word	0x080029ed
 80029d8:	08002a01 	.word	0x08002a01
 80029dc:	4a79      	ldr	r2, [pc, #484]	; (8002bc4 <HAL_GPIO_Init+0x2b4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029e2:	e02c      	b.n	8002a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	623b      	str	r3, [r7, #32]
          break;
 80029ea:	e029      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	3304      	adds	r3, #4
 80029f2:	623b      	str	r3, [r7, #32]
          break;
 80029f4:	e024      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	3308      	adds	r3, #8
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e01f      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	330c      	adds	r3, #12
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e01a      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a12:	2304      	movs	r3, #4
 8002a14:	623b      	str	r3, [r7, #32]
          break;
 8002a16:	e013      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a20:	2308      	movs	r3, #8
 8002a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	611a      	str	r2, [r3, #16]
          break;
 8002a2a:	e009      	b.n	8002a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	615a      	str	r2, [r3, #20]
          break;
 8002a36:	e003      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
          break;
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          break;
 8002a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d801      	bhi.n	8002a4a <HAL_GPIO_Init+0x13a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	e001      	b.n	8002a4e <HAL_GPIO_Init+0x13e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2bff      	cmp	r3, #255	; 0xff
 8002a54:	d802      	bhi.n	8002a5c <HAL_GPIO_Init+0x14c>
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	e002      	b.n	8002a62 <HAL_GPIO_Init+0x152>
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	3b08      	subs	r3, #8
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	210f      	movs	r1, #15
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80b1 	beq.w	8002bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a4c      	ldr	r2, [pc, #304]	; (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aa8:	4a48      	ldr	r2, [pc, #288]	; (8002bcc <HAL_GPIO_Init+0x2bc>)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	220f      	movs	r2, #15
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a40      	ldr	r2, [pc, #256]	; (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <HAL_GPIO_Init+0x1ec>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3f      	ldr	r2, [pc, #252]	; (8002bd4 <HAL_GPIO_Init+0x2c4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00d      	beq.n	8002af8 <HAL_GPIO_Init+0x1e8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3e      	ldr	r2, [pc, #248]	; (8002bd8 <HAL_GPIO_Init+0x2c8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <HAL_GPIO_Init+0x1e4>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a3d      	ldr	r2, [pc, #244]	; (8002bdc <HAL_GPIO_Init+0x2cc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_GPIO_Init+0x1e0>
 8002aec:	2303      	movs	r3, #3
 8002aee:	e006      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af0:	2304      	movs	r3, #4
 8002af2:	e004      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e002      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002afc:	2300      	movs	r3, #0
 8002afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b00:	f002 0203 	and.w	r2, r2, #3
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	4093      	lsls	r3, r2
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b0e:	492f      	ldr	r1, [pc, #188]	; (8002bcc <HAL_GPIO_Init+0x2bc>)
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	3302      	adds	r3, #2
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b28:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	492c      	ldr	r1, [pc, #176]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	4928      	ldr	r1, [pc, #160]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	4922      	ldr	r1, [pc, #136]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	491e      	ldr	r1, [pc, #120]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4918      	ldr	r1, [pc, #96]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4914      	ldr	r1, [pc, #80]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d021      	beq.n	8002be4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	490e      	ldr	r1, [pc, #56]	; (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e021      	b.n	8002bf2 <HAL_GPIO_Init+0x2e2>
 8002bae:	bf00      	nop
 8002bb0:	10320000 	.word	0x10320000
 8002bb4:	10310000 	.word	0x10310000
 8002bb8:	10220000 	.word	0x10220000
 8002bbc:	10210000 	.word	0x10210000
 8002bc0:	10120000 	.word	0x10120000
 8002bc4:	10110000 	.word	0x10110000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	40010800 	.word	0x40010800
 8002bd4:	40010c00 	.word	0x40010c00
 8002bd8:	40011000 	.word	0x40011000
 8002bdc:	40011400 	.word	0x40011400
 8002be0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_GPIO_Init+0x304>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <HAL_GPIO_Init+0x304>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f47f ae8e 	bne.w	8002924 <HAL_GPIO_Init+0x14>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	372c      	adds	r7, #44	; 0x2c
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40010400 	.word	0x40010400

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	611a      	str	r2, [r3, #16]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e12b      	b.n	8002eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe fbf6 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	; 0x24
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cac:	f001 fa24 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 8002cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a81      	ldr	r2, [pc, #516]	; (8002ebc <HAL_I2C_Init+0x274>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d807      	bhi.n	8002ccc <HAL_I2C_Init+0x84>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a80      	ldr	r2, [pc, #512]	; (8002ec0 <HAL_I2C_Init+0x278>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e006      	b.n	8002cda <HAL_I2C_Init+0x92>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a7d      	ldr	r2, [pc, #500]	; (8002ec4 <HAL_I2C_Init+0x27c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	bf94      	ite	ls
 8002cd4:	2301      	movls	r3, #1
 8002cd6:	2300      	movhi	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0e7      	b.n	8002eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a78      	ldr	r2, [pc, #480]	; (8002ec8 <HAL_I2C_Init+0x280>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0c9b      	lsrs	r3, r3, #18
 8002cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a6a      	ldr	r2, [pc, #424]	; (8002ebc <HAL_I2C_Init+0x274>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d802      	bhi.n	8002d1c <HAL_I2C_Init+0xd4>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	e009      	b.n	8002d30 <HAL_I2C_Init+0xe8>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	4a69      	ldr	r2, [pc, #420]	; (8002ecc <HAL_I2C_Init+0x284>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	3301      	adds	r3, #1
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	430b      	orrs	r3, r1
 8002d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	495c      	ldr	r1, [pc, #368]	; (8002ebc <HAL_I2C_Init+0x274>)
 8002d4c:	428b      	cmp	r3, r1
 8002d4e:	d819      	bhi.n	8002d84 <HAL_I2C_Init+0x13c>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e59      	subs	r1, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5e:	1c59      	adds	r1, r3, #1
 8002d60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d64:	400b      	ands	r3, r1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_I2C_Init+0x138>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1e59      	subs	r1, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7e:	e051      	b.n	8002e24 <HAL_I2C_Init+0x1dc>
 8002d80:	2304      	movs	r3, #4
 8002d82:	e04f      	b.n	8002e24 <HAL_I2C_Init+0x1dc>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d111      	bne.n	8002db0 <HAL_I2C_Init+0x168>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1e58      	subs	r0, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	440b      	add	r3, r1
 8002d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e012      	b.n	8002dd6 <HAL_I2C_Init+0x18e>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1e58      	subs	r0, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	0099      	lsls	r1, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_Init+0x196>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e022      	b.n	8002e24 <HAL_I2C_Init+0x1dc>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10e      	bne.n	8002e04 <HAL_I2C_Init+0x1bc>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1e58      	subs	r0, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	460b      	mov	r3, r1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	440b      	add	r3, r1
 8002df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e02:	e00f      	b.n	8002e24 <HAL_I2C_Init+0x1dc>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1e58      	subs	r0, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	0099      	lsls	r1, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	6809      	ldr	r1, [r1, #0]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6911      	ldr	r1, [r2, #16]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	68d2      	ldr	r2, [r2, #12]
 8002e5e:	4311      	orrs	r1, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	000186a0 	.word	0x000186a0
 8002ec0:	001e847f 	.word	0x001e847f
 8002ec4:	003d08ff 	.word	0x003d08ff
 8002ec8:	431bde83 	.word	0x431bde83
 8002ecc:	10624dd3 	.word	0x10624dd3

08002ed0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	; 0x30
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	4608      	mov	r0, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	461a      	mov	r2, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	817b      	strh	r3, [r7, #10]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	813b      	strh	r3, [r7, #8]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eee:	f7ff fc01 	bl	80026f4 <HAL_GetTick>
 8002ef2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	f040 8250 	bne.w	80033a2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2319      	movs	r3, #25
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4982      	ldr	r1, [pc, #520]	; (8003114 <HAL_I2C_Mem_Read+0x244>)
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fb3b 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e243      	b.n	80033a4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_Mem_Read+0x5a>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e23c      	b.n	80033a4 <HAL_I2C_Mem_Read+0x4d4>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d007      	beq.n	8002f50 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2222      	movs	r2, #34	; 0x22
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2240      	movs	r2, #64	; 0x40
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a62      	ldr	r2, [pc, #392]	; (8003118 <HAL_I2C_Mem_Read+0x248>)
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f92:	88f8      	ldrh	r0, [r7, #6]
 8002f94:	893a      	ldrh	r2, [r7, #8]
 8002f96:	8979      	ldrh	r1, [r7, #10]
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fa08 	bl	80033b8 <I2C_RequestMemoryRead>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1f8      	b.n	80033a4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d113      	bne.n	8002fe2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e1cc      	b.n	800337c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d11e      	bne.n	8003028 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ffa:	b672      	cpsid	i
}
 8002ffc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003022:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003024:	b662      	cpsie	i
}
 8003026:	e035      	b.n	8003094 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	2b02      	cmp	r3, #2
 800302e:	d11e      	bne.n	800306e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003040:	b672      	cpsid	i
}
 8003042:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003068:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800306a:	b662      	cpsie	i
}
 800306c:	e012      	b.n	8003094 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800307c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003094:	e172      	b.n	800337c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	2b03      	cmp	r3, #3
 800309c:	f200 811f 	bhi.w	80032de <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d123      	bne.n	80030f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fbcd 	bl	800384c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e173      	b.n	80033a4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030ee:	e145      	b.n	800337c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d152      	bne.n	800319e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	2200      	movs	r2, #0
 8003100:	4906      	ldr	r1, [pc, #24]	; (800311c <HAL_I2C_Mem_Read+0x24c>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa40 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e148      	b.n	80033a4 <HAL_I2C_Mem_Read+0x4d4>
 8003112:	bf00      	nop
 8003114:	00100002 	.word	0x00100002
 8003118:	ffff0000 	.word	0xffff0000
 800311c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003120:	b672      	cpsid	i
}
 8003122:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003166:	b662      	cpsie	i
}
 8003168:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800319c:	e0ee      	b.n	800337c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a4:	2200      	movs	r2, #0
 80031a6:	4981      	ldr	r1, [pc, #516]	; (80033ac <HAL_I2C_Mem_Read+0x4dc>)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f9ed 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0f5      	b.n	80033a4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031c8:	b672      	cpsid	i
}
 80031ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031fe:	4b6c      	ldr	r3, [pc, #432]	; (80033b0 <HAL_I2C_Mem_Read+0x4e0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	08db      	lsrs	r3, r3, #3
 8003204:	4a6b      	ldr	r2, [pc, #428]	; (80033b4 <HAL_I2C_Mem_Read+0x4e4>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0a1a      	lsrs	r2, r3, #8
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00da      	lsls	r2, r3, #3
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	3b01      	subs	r3, #1
 800321c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d118      	bne.n	8003256 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f043 0220 	orr.w	r2, r3, #32
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003246:	b662      	cpsie	i
}
 8003248:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0a6      	b.n	80033a4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b04      	cmp	r3, #4
 8003262:	d1d9      	bne.n	8003218 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032a6:	b662      	cpsie	i
}
 80032a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032dc:	e04e      	b.n	800337c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fab2 	bl	800384c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e058      	b.n	80033a4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b04      	cmp	r3, #4
 8003330:	d124      	bne.n	800337c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	2b03      	cmp	r3, #3
 8003338:	d107      	bne.n	800334a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003348:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	f47f ae88 	bne.w	8003096 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
  }
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3728      	adds	r7, #40	; 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	00010004 	.word	0x00010004
 80033b0:	2000001c 	.word	0x2000001c
 80033b4:	14f8b589 	.word	0x14f8b589

080033b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	817b      	strh	r3, [r7, #10]
 80033ca:	460b      	mov	r3, r1
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f8c2 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003418:	d103      	bne.n	8003422 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0aa      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003426:	897b      	ldrh	r3, [r7, #10]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003434:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	4952      	ldr	r1, [pc, #328]	; (8003584 <I2C_RequestMemoryRead+0x1cc>)
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f91d 	bl	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e097      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003464:	6a39      	ldr	r1, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f9a8 	bl	80037bc <I2C_WaitOnTXEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b04      	cmp	r3, #4
 8003478:	d107      	bne.n	800348a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003488:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e076      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003494:	893b      	ldrh	r3, [r7, #8]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]
 800349e:	e021      	b.n	80034e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034a0:	893b      	ldrh	r3, [r7, #8]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b0:	6a39      	ldr	r1, [r7, #32]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f982 	bl	80037bc <I2C_WaitOnTXEFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00d      	beq.n	80034da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d107      	bne.n	80034d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e050      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034da:	893b      	ldrh	r3, [r7, #8]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e6:	6a39      	ldr	r1, [r7, #32]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f967 	bl	80037bc <I2C_WaitOnTXEFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d107      	bne.n	800350c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e035      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	2200      	movs	r2, #0
 8003528:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f82b 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00d      	beq.n	8003554 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003546:	d103      	bne.n	8003550 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800354e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e013      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003554:	897b      	ldrh	r3, [r7, #10]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	b2da      	uxtb	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	6a3a      	ldr	r2, [r7, #32]
 8003568:	4906      	ldr	r1, [pc, #24]	; (8003584 <I2C_RequestMemoryRead+0x1cc>)
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f886 	bl	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	00010002 	.word	0x00010002

08003588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003598:	e048      	b.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d044      	beq.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7ff f8a7 	bl	80026f4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d139      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10d      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0x56>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	e00c      	b.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d116      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e023      	b.n	8003674 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10d      	bne.n	8003652 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	43da      	mvns	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	e00c      	b.n	800366c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	43da      	mvns	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	429a      	cmp	r2, r3
 8003670:	d093      	beq.n	800359a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800368a:	e071      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d123      	bne.n	80036e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e067      	b.n	80037b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d041      	beq.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ec:	f7ff f802 	bl	80026f4 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d302      	bcc.n	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d136      	bne.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10c      	bne.n	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	e00b      	b.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	43da      	mvns	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e021      	b.n	80037b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10c      	bne.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e00b      	b.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f47f af6d 	bne.w	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c8:	e034      	b.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f89b 	bl	8003906 <I2C_IsAcknowledgeFailed>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e034      	b.n	8003844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d028      	beq.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fe ff87 	bl	80026f4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d11d      	bne.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d016      	beq.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e007      	b.n	8003844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d1c3      	bne.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003858:	e049      	b.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b10      	cmp	r3, #16
 8003866:	d119      	bne.n	800389c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0210 	mvn.w	r2, #16
 8003870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e030      	b.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7fe ff2a 	bl	80026f4 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d11d      	bne.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d016      	beq.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e007      	b.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d1ae      	bne.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391c:	d11b      	bne.n	8003956 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003926:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
	...

08003964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e272      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8087 	beq.w	8003a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003984:	4b92      	ldr	r3, [pc, #584]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b04      	cmp	r3, #4
 800398e:	d00c      	beq.n	80039aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003990:	4b8f      	ldr	r3, [pc, #572]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d112      	bne.n	80039c2 <HAL_RCC_OscConfig+0x5e>
 800399c:	4b8c      	ldr	r3, [pc, #560]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d10b      	bne.n	80039c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039aa:	4b89      	ldr	r3, [pc, #548]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d06c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x12c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d168      	bne.n	8003a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e24c      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ca:	d106      	bne.n	80039da <HAL_RCC_OscConfig+0x76>
 80039cc:	4b80      	ldr	r3, [pc, #512]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7f      	ldr	r2, [pc, #508]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	e02e      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0x98>
 80039e2:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7a      	ldr	r2, [pc, #488]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b78      	ldr	r3, [pc, #480]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a77      	ldr	r2, [pc, #476]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e01d      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0xbc>
 8003a06:	4b72      	ldr	r3, [pc, #456]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a71      	ldr	r2, [pc, #452]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b6f      	ldr	r3, [pc, #444]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6e      	ldr	r2, [pc, #440]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 8003a20:	4b6b      	ldr	r3, [pc, #428]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6a      	ldr	r2, [pc, #424]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b68      	ldr	r3, [pc, #416]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a67      	ldr	r2, [pc, #412]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe fe58 	bl	80026f4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fe fe54 	bl	80026f4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e200      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b5d      	ldr	r3, [pc, #372]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0xe4>
 8003a66:	e014      	b.n	8003a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fe44 	bl	80026f4 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fe fe40 	bl	80026f4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e1ec      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x10c>
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a9e:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aaa:	4b49      	ldr	r3, [pc, #292]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d11c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x18c>
 8003ab6:	4b46      	ldr	r3, [pc, #280]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d116      	bne.n	8003af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x176>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e1c0      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ada:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4939      	ldr	r1, [pc, #228]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	e03a      	b.n	8003b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_RCC_OscConfig+0x270>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe fdf9 	bl	80026f4 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b06:	f7fe fdf5 	bl	80026f4 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e1a1      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b24:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4927      	ldr	r1, [pc, #156]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
 8003b38:	e015      	b.n	8003b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3a:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fdd8 	bl	80026f4 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fe fdd4 	bl	80026f4 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e180      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d03a      	beq.n	8003be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d019      	beq.n	8003bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7a:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fe fdb8 	bl	80026f4 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fe fdb4 	bl	80026f4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e160      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	f000 faea 	bl	8004180 <RCC_Delay>
 8003bac:	e01c      	b.n	8003be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb4:	f7fe fd9e 	bl	80026f4 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bba:	e00f      	b.n	8003bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe fd9a 	bl	80026f4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d908      	bls.n	8003bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e146      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	42420000 	.word	0x42420000
 8003bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	4b92      	ldr	r3, [pc, #584]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e9      	bne.n	8003bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80a6 	beq.w	8003d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfa:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10d      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	4a87      	ldr	r2, [pc, #540]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c10:	61d3      	str	r3, [r2, #28]
 8003c12:	4b85      	ldr	r3, [pc, #532]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b82      	ldr	r3, [pc, #520]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7e      	ldr	r2, [pc, #504]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fe fd5b 	bl	80026f4 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fe fd57 	bl	80026f4 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b64      	cmp	r3, #100	; 0x64
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e103      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4b75      	ldr	r3, [pc, #468]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x312>
 8003c68:	4b6f      	ldr	r3, [pc, #444]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4a6e      	ldr	r2, [pc, #440]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6213      	str	r3, [r2, #32]
 8003c74:	e02d      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x334>
 8003c7e:	4b6a      	ldr	r3, [pc, #424]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a69      	ldr	r2, [pc, #420]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6213      	str	r3, [r2, #32]
 8003c8a:	4b67      	ldr	r3, [pc, #412]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4a66      	ldr	r2, [pc, #408]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	6213      	str	r3, [r2, #32]
 8003c96:	e01c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCC_OscConfig+0x356>
 8003ca0:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4a60      	ldr	r2, [pc, #384]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	6213      	str	r3, [r2, #32]
 8003cac:	4b5e      	ldr	r3, [pc, #376]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	4a5d      	ldr	r2, [pc, #372]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6213      	str	r3, [r2, #32]
 8003cb8:	e00b      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003cba:	4b5b      	ldr	r3, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4a5a      	ldr	r2, [pc, #360]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	6213      	str	r3, [r2, #32]
 8003cc6:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4a57      	ldr	r2, [pc, #348]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d015      	beq.n	8003d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fe fd0b 	bl	80026f4 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe fd07 	bl	80026f4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e0b1      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ee      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x37e>
 8003d04:	e014      	b.n	8003d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d06:	f7fe fcf5 	bl	80026f4 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fe fcf1 	bl	80026f4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e09b      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	4b40      	ldr	r3, [pc, #256]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ee      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d36:	4b3c      	ldr	r3, [pc, #240]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8087 	beq.w	8003e5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d061      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d146      	bne.n	8003dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d60:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe fcc5 	bl	80026f4 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fe fcc1 	bl	80026f4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e06d      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d108      	bne.n	8003da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	4921      	ldr	r1, [pc, #132]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da8:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a19      	ldr	r1, [r3, #32]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	430b      	orrs	r3, r1
 8003dba:	491b      	ldr	r1, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fc95 	bl	80026f4 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fe fc91 	bl	80026f4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e03d      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x46a>
 8003dec:	e035      	b.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe fc7e 	bl	80026f4 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe fc7a 	bl	80026f4 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e026      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x498>
 8003e1a:	e01e      	b.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e019      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_OscConfig+0x500>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000

08003e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0d0      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d910      	bls.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b67      	ldr	r3, [pc, #412]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 0207 	bic.w	r2, r3, #7
 8003e92:	4965      	ldr	r1, [pc, #404]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b63      	ldr	r3, [pc, #396]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003edc:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	494d      	ldr	r1, [pc, #308]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d040      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d115      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07f      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e073      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4936      	ldr	r1, [pc, #216]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fe fbcc 	bl	80026f4 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fe fbc8 	bl	80026f4 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e053      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d210      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 0207 	bic.w	r2, r3, #7
 8003f9e:	4922      	ldr	r1, [pc, #136]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4916      	ldr	r1, [pc, #88]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490e      	ldr	r1, [pc, #56]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ff6:	f000 f821 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490a      	ldr	r1, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1cc>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1d0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe f998 	bl	800234c <HAL_InitTick>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40022000 	.word	0x40022000
 800402c:	40021000 	.word	0x40021000
 8004030:	080072a0 	.word	0x080072a0
 8004034:	2000001c 	.word	0x2000001c
 8004038:	20000020 	.word	0x20000020

0800403c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004056:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b04      	cmp	r3, #4
 8004064:	d002      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x30>
 8004066:	2b08      	cmp	r3, #8
 8004068:	d003      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x36>
 800406a:	e027      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800406e:	613b      	str	r3, [r7, #16]
      break;
 8004070:	e027      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0c9b      	lsrs	r3, r3, #18
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800407c:	5cd3      	ldrb	r3, [r2, r3]
 800407e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800408a:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	0c5b      	lsrs	r3, r3, #17
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	4a11      	ldr	r2, [pc, #68]	; (80040dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a0d      	ldr	r2, [pc, #52]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800409e:	fb03 f202 	mul.w	r2, r3, r2
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e004      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	613b      	str	r3, [r7, #16]
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80040be:	613b      	str	r3, [r7, #16]
      break;
 80040c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c2:	693b      	ldr	r3, [r7, #16]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	007a1200 	.word	0x007a1200
 80040d8:	080072b8 	.word	0x080072b8
 80040dc:	080072c8 	.word	0x080072c8
 80040e0:	003d0900 	.word	0x003d0900

080040e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e8:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	2000001c 	.word	0x2000001c

080040f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040fc:	f7ff fff2 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	; (800411c <HAL_RCC_GetPCLK1Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	080072b0 	.word	0x080072b0

08004120 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	220f      	movs	r2, #15
 800412e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_RCC_GetClockConfig+0x58>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0203 	and.w	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800413c:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <HAL_RCC_GetClockConfig+0x58>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_GetClockConfig+0x58>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <HAL_RCC_GetClockConfig+0x58>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	08db      	lsrs	r3, r3, #3
 800415a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_RCC_GetClockConfig+0x5c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0207 	and.w	r2, r3, #7
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	40021000 	.word	0x40021000
 800417c:	40022000 	.word	0x40022000

08004180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <RCC_Delay+0x34>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <RCC_Delay+0x38>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	0a5b      	lsrs	r3, r3, #9
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800419c:	bf00      	nop
  }
  while (Delay --);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	60fa      	str	r2, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f9      	bne.n	800419c <RCC_Delay+0x1c>
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	2000001c 	.word	0x2000001c
 80041b8:	10624dd3 	.word	0x10624dd3

080041bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e076      	b.n	80042bc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041de:	d009      	beq.n	80041f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	61da      	str	r2, [r3, #28]
 80041e6:	e005      	b.n	80041f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe f818 	bl	8002244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	ea42 0103 	orr.w	r1, r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	0c1a      	lsrs	r2, r3, #16
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f002 0204 	and.w	r2, r2, #4
 800429a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042d2:	2301      	movs	r3, #1
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042d6:	f7fe fa0d 	bl	80026f4 <HAL_GetTick>
 80042da:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042e2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80042ea:	887b      	ldrh	r3, [r7, #2]
 80042ec:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042ee:	7ffb      	ldrb	r3, [r7, #31]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d00c      	beq.n	800430e <HAL_SPI_TransmitReceive+0x4a>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fa:	d106      	bne.n	800430a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d102      	bne.n	800430a <HAL_SPI_TransmitReceive+0x46>
 8004304:	7ffb      	ldrb	r3, [r7, #31]
 8004306:	2b04      	cmp	r3, #4
 8004308:	d001      	beq.n	800430e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
 800430c:	e17f      	b.n	800460e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_SPI_TransmitReceive+0x5c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_SPI_TransmitReceive+0x5c>
 800431a:	887b      	ldrh	r3, [r7, #2]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e174      	b.n	800460e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x6e>
 800432e:	2302      	movs	r3, #2
 8004330:	e16d      	b.n	800460e <HAL_SPI_TransmitReceive+0x34a>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b04      	cmp	r3, #4
 8004344:	d003      	beq.n	800434e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2205      	movs	r2, #5
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	887a      	ldrh	r2, [r7, #2]
 800435e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	887a      	ldrh	r2, [r7, #2]
 8004364:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	887a      	ldrh	r2, [r7, #2]
 8004376:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d007      	beq.n	80043a2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043aa:	d17e      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_SPI_TransmitReceive+0xf6>
 80043b4:	8afb      	ldrh	r3, [r7, #22]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d16c      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	881a      	ldrh	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	1c9a      	adds	r2, r3, #2
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043de:	e059      	b.n	8004494 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d11b      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x162>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d016      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x162>
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d113      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	881a      	ldrh	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	1c9a      	adds	r2, r3, #2
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b01      	cmp	r3, #1
 8004432:	d119      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x1a4>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d014      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	b292      	uxth	r2, r2
 800444a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004464:	2301      	movs	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004468:	f7fe f944 	bl	80026f4 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004474:	429a      	cmp	r2, r3
 8004476:	d80d      	bhi.n	8004494 <HAL_SPI_TransmitReceive+0x1d0>
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d009      	beq.n	8004494 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e0bc      	b.n	800460e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1a0      	bne.n	80043e0 <HAL_SPI_TransmitReceive+0x11c>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d19b      	bne.n	80043e0 <HAL_SPI_TransmitReceive+0x11c>
 80044a8:	e082      	b.n	80045b0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x1f4>
 80044b2:	8afb      	ldrh	r3, [r7, #22]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d171      	bne.n	800459c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	7812      	ldrb	r2, [r2, #0]
 80044c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044de:	e05d      	b.n	800459c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d11c      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x264>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d017      	beq.n	8004528 <HAL_SPI_TransmitReceive+0x264>
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d114      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	7812      	ldrb	r2, [r2, #0]
 800450a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b01      	cmp	r3, #1
 8004534:	d119      	bne.n	800456a <HAL_SPI_TransmitReceive+0x2a6>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d014      	beq.n	800456a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004566:	2301      	movs	r3, #1
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800456a:	f7fe f8c3 	bl	80026f4 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004576:	429a      	cmp	r2, r3
 8004578:	d803      	bhi.n	8004582 <HAL_SPI_TransmitReceive+0x2be>
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d102      	bne.n	8004588 <HAL_SPI_TransmitReceive+0x2c4>
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e038      	b.n	800460e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d19c      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x21c>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d197      	bne.n	80044e0 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f8b7 	bl	8004728 <SPI_EndRxTxTransaction>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e01d      	b.n	800460e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800460c:	2300      	movs	r3, #0
  }
}
 800460e:	4618      	mov	r0, r3
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004628:	f7fe f864 	bl	80026f4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	4413      	add	r3, r2
 8004636:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004638:	f7fe f85c 	bl	80026f4 <HAL_GetTick>
 800463c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800463e:	4b39      	ldr	r3, [pc, #228]	; (8004724 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	015b      	lsls	r3, r3, #5
 8004644:	0d1b      	lsrs	r3, r3, #20
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	fb02 f303 	mul.w	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800464e:	e054      	b.n	80046fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d050      	beq.n	80046fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004658:	f7fe f84c 	bl	80026f4 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	429a      	cmp	r2, r3
 8004666:	d902      	bls.n	800466e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d13d      	bne.n	80046ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800467c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004686:	d111      	bne.n	80046ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004690:	d004      	beq.n	800469c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469a:	d107      	bne.n	80046ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b4:	d10f      	bne.n	80046d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e017      	b.n	800471a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	429a      	cmp	r2, r3
 8004716:	d19b      	bne.n	8004650 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	2000001c 	.word	0x2000001c

08004728 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2201      	movs	r2, #1
 800473c:	2102      	movs	r1, #2
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f7ff ff6a 	bl	8004618 <SPI_WaitFlagStateUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	f043 0220 	orr.w	r2, r3, #32
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e013      	b.n	8004782 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2200      	movs	r2, #0
 8004762:	2180      	movs	r1, #128	; 0x80
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff ff57 	bl	8004618 <SPI_WaitFlagStateUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	f043 0220 	orr.w	r2, r3, #32
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e000      	b.n	8004782 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e041      	b.n	8004820 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fd ff05 	bl	80025c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f000 fc17 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d001      	beq.n	8004840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e03a      	b.n	80048b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_TIM_Base_Start_IT+0x98>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0x58>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d009      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0x58>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0x58>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d111      	bne.n	80048a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b06      	cmp	r3, #6
 8004890:	d010      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	e007      	b.n	80048b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800

080048cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e041      	b.n	8004962 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f839 	bl	800496a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f000 fb76 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_TIM_PWM_Start+0x24>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e022      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d109      	bne.n	80049ba <HAL_TIM_PWM_Start+0x3e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e015      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d109      	bne.n	80049d4 <HAL_TIM_PWM_Start+0x58>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e008      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e05e      	b.n	8004aac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Start+0x82>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fc:	e013      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start+0x92>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0c:	e00b      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Start+0xa2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1c:	e003      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fd70 	bl	8005514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <HAL_TIM_PWM_Start+0x138>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <HAL_TIM_PWM_Start+0x138>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_TIM_PWM_Start+0xfa>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a60:	d009      	beq.n	8004a76 <HAL_TIM_PWM_Start+0xfa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <HAL_TIM_PWM_Start+0x13c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_TIM_PWM_Start+0xfa>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a12      	ldr	r2, [pc, #72]	; (8004abc <HAL_TIM_PWM_Start+0x140>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d111      	bne.n	8004a9a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	d010      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	e007      	b.n	8004aaa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800

08004ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d020      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01b      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0202 	mvn.w	r2, #2
 8004af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa5a 	bl	8004fc4 <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa4d 	bl	8004fb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa5c 	bl	8004fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d020      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0204 	mvn.w	r2, #4
 8004b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa34 	bl	8004fc4 <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa27 	bl	8004fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fa36 	bl	8004fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01b      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0208 	mvn.w	r2, #8
 8004b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2204      	movs	r2, #4
 8004b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa0e 	bl	8004fc4 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa01 	bl	8004fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fa10 	bl	8004fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0210 	mvn.w	r2, #16
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2208      	movs	r2, #8
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9e8 	bl	8004fc4 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f9db 	bl	8004fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f9ea 	bl	8004fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0201 	mvn.w	r2, #1
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc fcca 	bl	80015c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fced 	bl	800562a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f9ba 	bl	8004fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0220 	mvn.w	r2, #32
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fcc0 	bl	8005618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e0ae      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	f200 809f 	bhi.w	8004e0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cce:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004d09 	.word	0x08004d09
 8004cd8:	08004e0d 	.word	0x08004e0d
 8004cdc:	08004e0d 	.word	0x08004e0d
 8004ce0:	08004e0d 	.word	0x08004e0d
 8004ce4:	08004d49 	.word	0x08004d49
 8004ce8:	08004e0d 	.word	0x08004e0d
 8004cec:	08004e0d 	.word	0x08004e0d
 8004cf0:	08004e0d 	.word	0x08004e0d
 8004cf4:	08004d8b 	.word	0x08004d8b
 8004cf8:	08004e0d 	.word	0x08004e0d
 8004cfc:	08004e0d 	.word	0x08004e0d
 8004d00:	08004e0d 	.word	0x08004e0d
 8004d04:	08004dcb 	.word	0x08004dcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 f9e2 	bl	80050d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0208 	orr.w	r2, r2, #8
 8004d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0204 	bic.w	r2, r2, #4
 8004d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6999      	ldr	r1, [r3, #24]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	619a      	str	r2, [r3, #24]
      break;
 8004d46:	e064      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fa28 	bl	80051a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6999      	ldr	r1, [r3, #24]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	021a      	lsls	r2, r3, #8
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	619a      	str	r2, [r3, #24]
      break;
 8004d88:	e043      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa71 	bl	8005278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0208 	orr.w	r2, r2, #8
 8004da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0204 	bic.w	r2, r2, #4
 8004db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69d9      	ldr	r1, [r3, #28]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	61da      	str	r2, [r3, #28]
      break;
 8004dc8:	e023      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fabb 	bl	800534c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69da      	ldr	r2, [r3, #28]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69d9      	ldr	r1, [r3, #28]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	021a      	lsls	r2, r3, #8
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	61da      	str	r2, [r3, #28]
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_ConfigClockSource+0x1c>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e0b4      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x186>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e78:	d03e      	beq.n	8004ef8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7e:	f200 8087 	bhi.w	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e86:	f000 8086 	beq.w	8004f96 <HAL_TIM_ConfigClockSource+0x172>
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8e:	d87f      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b70      	cmp	r3, #112	; 0x70
 8004e92:	d01a      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0xa6>
 8004e94:	2b70      	cmp	r3, #112	; 0x70
 8004e96:	d87b      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b60      	cmp	r3, #96	; 0x60
 8004e9a:	d050      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x11a>
 8004e9c:	2b60      	cmp	r3, #96	; 0x60
 8004e9e:	d877      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b50      	cmp	r3, #80	; 0x50
 8004ea2:	d03c      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0xfa>
 8004ea4:	2b50      	cmp	r3, #80	; 0x50
 8004ea6:	d873      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d058      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x13a>
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d86f      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b30      	cmp	r3, #48	; 0x30
 8004eb2:	d064      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004eb4:	2b30      	cmp	r3, #48	; 0x30
 8004eb6:	d86b      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d060      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d867      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d05c      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d05a      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ec8:	e062      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eda:	f000 fafc 	bl	80054d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	609a      	str	r2, [r3, #8]
      break;
 8004ef6:	e04f      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f08:	f000 fae5 	bl	80054d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f1a:	609a      	str	r2, [r3, #8]
      break;
 8004f1c:	e03c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f000 fa5c 	bl	80053e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2150      	movs	r1, #80	; 0x50
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fab3 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004f3c:	e02c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f000 fa7a 	bl	8005444 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2160      	movs	r1, #96	; 0x60
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 faa3 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e01c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f000 fa3c 	bl	80053e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2140      	movs	r1, #64	; 0x40
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fa93 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004f7c:	e00c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f000 fa8a 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004f8e:	e003      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
      break;
 8004f94:	e000      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr
	...

08004ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <TIM_Base_SetConfig+0xd0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_Base_SetConfig+0x30>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501a:	d007      	beq.n	800502c <TIM_Base_SetConfig+0x30>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <TIM_Base_SetConfig+0xd4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_Base_SetConfig+0x30>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a2b      	ldr	r2, [pc, #172]	; (80050d4 <TIM_Base_SetConfig+0xd8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d108      	bne.n	800503e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <TIM_Base_SetConfig+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_Base_SetConfig+0x62>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504c:	d007      	beq.n	800505e <TIM_Base_SetConfig+0x62>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <TIM_Base_SetConfig+0xd4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_Base_SetConfig+0x62>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <TIM_Base_SetConfig+0xd8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d108      	bne.n	8005070 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a0d      	ldr	r2, [pc, #52]	; (80050cc <TIM_Base_SetConfig+0xd0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d103      	bne.n	80050a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	611a      	str	r2, [r3, #16]
  }
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800

080050d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f023 0201 	bic.w	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0302 	bic.w	r3, r3, #2
 8005120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a1c      	ldr	r2, [pc, #112]	; (80051a0 <TIM_OC1_SetConfig+0xc8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d10c      	bne.n	800514e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0308 	bic.w	r3, r3, #8
 800513a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 0304 	bic.w	r3, r3, #4
 800514c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <TIM_OC1_SetConfig+0xc8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d111      	bne.n	800517a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800515c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	621a      	str	r2, [r3, #32]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00

080051a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f023 0210 	bic.w	r2, r3, #16
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 0320 	bic.w	r3, r3, #32
 80051ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a1d      	ldr	r2, [pc, #116]	; (8005274 <TIM_OC2_SetConfig+0xd0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d10d      	bne.n	8005220 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800520a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800521e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a14      	ldr	r2, [pc, #80]	; (8005274 <TIM_OC2_SetConfig+0xd0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d113      	bne.n	8005250 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800522e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr
 8005274:	40012c00 	.word	0x40012c00

08005278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <TIM_OC3_SetConfig+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10d      	bne.n	80052f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a14      	ldr	r2, [pc, #80]	; (8005348 <TIM_OC3_SetConfig+0xd0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d113      	bne.n	8005322 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	621a      	str	r2, [r3, #32]
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40012c00 	.word	0x40012c00

0800534c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	031b      	lsls	r3, r3, #12
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a0f      	ldr	r2, [pc, #60]	; (80053e4 <TIM_OC4_SetConfig+0x98>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d109      	bne.n	80053c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	019b      	lsls	r3, r3, #6
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr
 80053e4:	40012c00 	.word	0x40012c00

080053e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f023 0201 	bic.w	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f023 030a 	bic.w	r3, r3, #10
 8005424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f023 0210 	bic.w	r2, r3, #16
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800546e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	031b      	lsls	r3, r3, #12
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005480:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	621a      	str	r2, [r3, #32]
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	f043 0307 	orr.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b087      	sub	sp, #28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	021a      	lsls	r2, r3, #8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	609a      	str	r2, [r3, #8]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	2201      	movs	r2, #1
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	43db      	mvns	r3, r3
 8005536:	401a      	ands	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005570:	2302      	movs	r3, #2
 8005572:	e046      	b.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a16      	ldr	r2, [pc, #88]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c0:	d009      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a12      	ldr	r2, [pc, #72]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a10      	ldr	r2, [pc, #64]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10c      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800

08005618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800564a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800564e:	2b84      	cmp	r3, #132	; 0x84
 8005650:	d005      	beq.n	800565e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	3303      	adds	r3, #3
 800565c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800566e:	f000 fb6f 	bl	8005d50 <vTaskStartScheduler>
  
  return osOK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	bd80      	pop	{r7, pc}

08005678 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af04      	add	r7, sp, #16
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d020      	beq.n	80056cc <osThreadCreate+0x54>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01c      	beq.n	80056cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685c      	ldr	r4, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691e      	ldr	r6, [r3, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ffc9 	bl	800563c <makeFreeRtosPriority>
 80056aa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056b4:	9202      	str	r2, [sp, #8]
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	9100      	str	r1, [sp, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	4632      	mov	r2, r6
 80056be:	4629      	mov	r1, r5
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 f8e8 	bl	8005896 <xTaskCreateStatic>
 80056c6:	4603      	mov	r3, r0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	e01c      	b.n	8005706 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685c      	ldr	r4, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056d8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff ffab 	bl	800563c <makeFreeRtosPriority>
 80056e6:	4602      	mov	r2, r0
 80056e8:	f107 030c 	add.w	r3, r7, #12
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	9200      	str	r2, [sp, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	4632      	mov	r2, r6
 80056f4:	4629      	mov	r1, r5
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 f92a 	bl	8005950 <xTaskCreate>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d001      	beq.n	8005706 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005702:	2300      	movs	r3, #0
 8005704:	e000      	b.n	8005708 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005706:	68fb      	ldr	r3, [r7, #12]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005710 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <osDelay+0x16>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	e000      	b.n	8005728 <osDelay+0x18>
 8005726:	2301      	movs	r3, #1
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fadd 	bl	8005ce8 <vTaskDelay>
  
  return osOK;
 800572e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f103 0208 	add.w	r2, r3, #8
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f04f 32ff 	mov.w	r2, #4294967295
 8005750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f103 0208 	add.w	r2, r3, #8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f103 0208 	add.w	r2, r3, #8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr

080057d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d103      	bne.n	80057f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	e00c      	b.n	800580e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3308      	adds	r3, #8
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	e002      	b.n	8005802 <vListInsert+0x2e>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	d2f6      	bcs.n	80057fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	601a      	str	r2, [r3, #0]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6892      	ldr	r2, [r2, #8]
 800585a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6852      	ldr	r2, [r2, #4]
 8005864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d103      	bne.n	8005878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	1e5a      	subs	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr

08005896 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005896:	b580      	push	{r7, lr}
 8005898:	b08e      	sub	sp, #56	; 0x38
 800589a:	af04      	add	r7, sp, #16
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058bc:	bf00      	nop
 80058be:	e7fe      	b.n	80058be <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <xTaskCreateStatic+0x46>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	61fb      	str	r3, [r7, #28]
}
 80058d8:	bf00      	nop
 80058da:	e7fe      	b.n	80058da <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058dc:	23a0      	movs	r3, #160	; 0xa0
 80058de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2ba0      	cmp	r3, #160	; 0xa0
 80058e4:	d00a      	beq.n	80058fc <xTaskCreateStatic+0x66>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	61bb      	str	r3, [r7, #24]
}
 80058f8:	bf00      	nop
 80058fa:	e7fe      	b.n	80058fa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01e      	beq.n	8005942 <xTaskCreateStatic+0xac>
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	2b00      	cmp	r3, #0
 8005908:	d01b      	beq.n	8005942 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005912:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	2202      	movs	r2, #2
 8005918:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800591c:	2300      	movs	r3, #0
 800591e:	9303      	str	r3, [sp, #12]
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	9302      	str	r3, [sp, #8]
 8005924:	f107 0314 	add.w	r3, r7, #20
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f851 	bl	80059dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800593a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800593c:	f000 f8ec 	bl	8005b18 <prvAddNewTaskToReadyList>
 8005940:	e001      	b.n	8005946 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005946:	697b      	ldr	r3, [r7, #20]
	}
 8005948:	4618      	mov	r0, r3
 800594a:	3728      	adds	r7, #40	; 0x28
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08c      	sub	sp, #48	; 0x30
 8005954:	af04      	add	r7, sp, #16
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	4613      	mov	r3, r2
 800595e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005960:	88fb      	ldrh	r3, [r7, #6]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4618      	mov	r0, r3
 8005966:	f000 ff23 	bl	80067b0 <pvPortMalloc>
 800596a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00e      	beq.n	8005990 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005972:	20a0      	movs	r0, #160	; 0xa0
 8005974:	f000 ff1c 	bl	80067b0 <pvPortMalloc>
 8005978:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
 8005986:	e005      	b.n	8005994 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005988:	6978      	ldr	r0, [r7, #20]
 800598a:	f000 ffdd 	bl	8006948 <vPortFree>
 800598e:	e001      	b.n	8005994 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005990:	2300      	movs	r3, #0
 8005992:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d017      	beq.n	80059ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059a2:	88fa      	ldrh	r2, [r7, #6]
 80059a4:	2300      	movs	r3, #0
 80059a6:	9303      	str	r3, [sp, #12]
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	9302      	str	r3, [sp, #8]
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 f80f 	bl	80059dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059be:	69f8      	ldr	r0, [r7, #28]
 80059c0:	f000 f8aa 	bl	8005b18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059c4:	2301      	movs	r3, #1
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	e002      	b.n	80059d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059ca:	f04f 33ff 	mov.w	r3, #4294967295
 80059ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059d0:	69bb      	ldr	r3, [r7, #24]
	}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059f4:	3b01      	subs	r3, #1
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	f023 0307 	bic.w	r3, r3, #7
 8005a02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	617b      	str	r3, [r7, #20]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01f      	beq.n	8005a6a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61fb      	str	r3, [r7, #28]
 8005a2e:	e012      	b.n	8005a56 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	7819      	ldrb	r1, [r3, #0]
 8005a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	3334      	adds	r3, #52	; 0x34
 8005a40:	460a      	mov	r2, r1
 8005a42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d006      	beq.n	8005a5e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	3301      	adds	r3, #1
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	2b0f      	cmp	r3, #15
 8005a5a:	d9e9      	bls.n	8005a30 <prvInitialiseNewTask+0x54>
 8005a5c:	e000      	b.n	8005a60 <prvInitialiseNewTask+0x84>
			{
				break;
 8005a5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a68:	e003      	b.n	8005a72 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	2b06      	cmp	r3, #6
 8005a76:	d901      	bls.n	8005a7c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a78:	2306      	movs	r3, #6
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a86:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	3304      	adds	r3, #4
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fe6f 	bl	8005776 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	3318      	adds	r3, #24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff fe6a 	bl	8005776 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	f1c3 0207 	rsb	r2, r3, #7
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	334c      	adds	r3, #76	; 0x4c
 8005acc:	224c      	movs	r2, #76	; 0x4c
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 f855 	bl	8006b80 <memset>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	4a0c      	ldr	r2, [pc, #48]	; (8005b0c <prvInitialiseNewTask+0x130>)
 8005ada:	651a      	str	r2, [r3, #80]	; 0x50
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	4a0c      	ldr	r2, [pc, #48]	; (8005b10 <prvInitialiseNewTask+0x134>)
 8005ae0:	655a      	str	r2, [r3, #84]	; 0x54
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	4a0b      	ldr	r2, [pc, #44]	; (8005b14 <prvInitialiseNewTask+0x138>)
 8005ae6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	68f9      	ldr	r1, [r7, #12]
 8005aec:	69b8      	ldr	r0, [r7, #24]
 8005aee:	f000 fcab 	bl	8006448 <pxPortInitialiseStack>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b04:	bf00      	nop
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	2000131c 	.word	0x2000131c
 8005b10:	20001384 	.word	0x20001384
 8005b14:	200013ec 	.word	0x200013ec

08005b18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b20:	f000 fd84 	bl	800662c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b24:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <prvAddNewTaskToReadyList+0xb8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	4a29      	ldr	r2, [pc, #164]	; (8005bd0 <prvAddNewTaskToReadyList+0xb8>)
 8005b2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b2e:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <prvAddNewTaskToReadyList+0xbc>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b36:	4a27      	ldr	r2, [pc, #156]	; (8005bd4 <prvAddNewTaskToReadyList+0xbc>)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b3c:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <prvAddNewTaskToReadyList+0xb8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d110      	bne.n	8005b66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b44:	f000 fb58 	bl	80061f8 <prvInitialiseTaskLists>
 8005b48:	e00d      	b.n	8005b66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b4a:	4b23      	ldr	r3, [pc, #140]	; (8005bd8 <prvAddNewTaskToReadyList+0xc0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b52:	4b20      	ldr	r3, [pc, #128]	; (8005bd4 <prvAddNewTaskToReadyList+0xbc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d802      	bhi.n	8005b66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b60:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <prvAddNewTaskToReadyList+0xbc>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b66:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <prvAddNewTaskToReadyList+0xc4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	4a1b      	ldr	r2, [pc, #108]	; (8005bdc <prvAddNewTaskToReadyList+0xc4>)
 8005b6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	2201      	movs	r2, #1
 8005b76:	409a      	lsls	r2, r3
 8005b78:	4b19      	ldr	r3, [pc, #100]	; (8005be0 <prvAddNewTaskToReadyList+0xc8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	4a18      	ldr	r2, [pc, #96]	; (8005be0 <prvAddNewTaskToReadyList+0xc8>)
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <prvAddNewTaskToReadyList+0xcc>)
 8005b90:	441a      	add	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3304      	adds	r3, #4
 8005b96:	4619      	mov	r1, r3
 8005b98:	4610      	mov	r0, r2
 8005b9a:	f7ff fdf8 	bl	800578e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b9e:	f000 fd75 	bl	800668c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <prvAddNewTaskToReadyList+0xc0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00e      	beq.n	8005bc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005baa:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <prvAddNewTaskToReadyList+0xbc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d207      	bcs.n	8005bc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <prvAddNewTaskToReadyList+0xd0>)
 8005bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bc8:	bf00      	nop
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	200006c8 	.word	0x200006c8
 8005bd4:	200005c8 	.word	0x200005c8
 8005bd8:	200006d4 	.word	0x200006d4
 8005bdc:	200006e4 	.word	0x200006e4
 8005be0:	200006d0 	.word	0x200006d0
 8005be4:	200005cc 	.word	0x200005cc
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08a      	sub	sp, #40	; 0x28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <vTaskDelayUntil+0x2a>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	617b      	str	r3, [r7, #20]
}
 8005c12:	bf00      	nop
 8005c14:	e7fe      	b.n	8005c14 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <vTaskDelayUntil+0x46>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	613b      	str	r3, [r7, #16]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005c32:	4b2a      	ldr	r3, [pc, #168]	; (8005cdc <vTaskDelayUntil+0xf0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <vTaskDelayUntil+0x64>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	60fb      	str	r3, [r7, #12]
}
 8005c4c:	bf00      	nop
 8005c4e:	e7fe      	b.n	8005c4e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005c50:	f000 f8e8 	bl	8005e24 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005c54:	4b22      	ldr	r3, [pc, #136]	; (8005ce0 <vTaskDelayUntil+0xf4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	4413      	add	r3, r2
 8005c62:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6a3a      	ldr	r2, [r7, #32]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d20b      	bcs.n	8005c86 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d211      	bcs.n	8005c9c <vTaskDelayUntil+0xb0>
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d90d      	bls.n	8005c9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
 8005c84:	e00a      	b.n	8005c9c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d303      	bcc.n	8005c98 <vTaskDelayUntil+0xac>
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d901      	bls.n	8005c9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d006      	beq.n	8005cb6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fb63 	bl	800637c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005cb6:	f000 f8c3 	bl	8005e40 <xTaskResumeAll>
 8005cba:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d107      	bne.n	8005cd2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <vTaskDelayUntil+0xf8>)
 8005cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cd2:	bf00      	nop
 8005cd4:	3728      	adds	r7, #40	; 0x28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200006f0 	.word	0x200006f0
 8005ce0:	200006cc 	.word	0x200006cc
 8005ce4:	e000ed04 	.word	0xe000ed04

08005ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d017      	beq.n	8005d2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cfa:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <vTaskDelay+0x60>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <vTaskDelay+0x30>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	60bb      	str	r3, [r7, #8]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d18:	f000 f884 	bl	8005e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fb2c 	bl	800637c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d24:	f000 f88c 	bl	8005e40 <xTaskResumeAll>
 8005d28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d107      	bne.n	8005d40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <vTaskDelay+0x64>)
 8005d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	200006f0 	.word	0x200006f0
 8005d4c:	e000ed04 	.word	0xe000ed04

08005d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	; 0x28
 8005d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d5e:	463a      	mov	r2, r7
 8005d60:	1d39      	adds	r1, r7, #4
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fb fa74 	bl	8001254 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	9202      	str	r2, [sp, #8]
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	2300      	movs	r3, #0
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	460a      	mov	r2, r1
 8005d7e:	4921      	ldr	r1, [pc, #132]	; (8005e04 <vTaskStartScheduler+0xb4>)
 8005d80:	4821      	ldr	r0, [pc, #132]	; (8005e08 <vTaskStartScheduler+0xb8>)
 8005d82:	f7ff fd88 	bl	8005896 <xTaskCreateStatic>
 8005d86:	4603      	mov	r3, r0
 8005d88:	4a20      	ldr	r2, [pc, #128]	; (8005e0c <vTaskStartScheduler+0xbc>)
 8005d8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d8c:	4b1f      	ldr	r3, [pc, #124]	; (8005e0c <vTaskStartScheduler+0xbc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d94:	2301      	movs	r3, #1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e001      	b.n	8005d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d11b      	bne.n	8005ddc <vTaskStartScheduler+0x8c>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	613b      	str	r3, [r7, #16]
}
 8005db6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005db8:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <vTaskStartScheduler+0xc0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	334c      	adds	r3, #76	; 0x4c
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <vTaskStartScheduler+0xc4>)
 8005dc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <vTaskStartScheduler+0xc8>)
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <vTaskStartScheduler+0xcc>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dd0:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <vTaskStartScheduler+0xd0>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dd6:	f000 fbb7 	bl	8006548 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dda:	e00e      	b.n	8005dfa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de2:	d10a      	bne.n	8005dfa <vTaskStartScheduler+0xaa>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	60fb      	str	r3, [r7, #12]
}
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <vTaskStartScheduler+0xa8>
}
 8005dfa:	bf00      	nop
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	08007290 	.word	0x08007290
 8005e08:	080061c9 	.word	0x080061c9
 8005e0c:	200006ec 	.word	0x200006ec
 8005e10:	200005c8 	.word	0x200005c8
 8005e14:	20000078 	.word	0x20000078
 8005e18:	200006e8 	.word	0x200006e8
 8005e1c:	200006d4 	.word	0x200006d4
 8005e20:	200006cc 	.word	0x200006cc

08005e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <vTaskSuspendAll+0x18>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	4a03      	ldr	r2, [pc, #12]	; (8005e3c <vTaskSuspendAll+0x18>)
 8005e30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e32:	bf00      	nop
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	200006f0 	.word	0x200006f0

08005e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e4e:	4b41      	ldr	r3, [pc, #260]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <xTaskResumeAll+0x2c>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	603b      	str	r3, [r7, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e6c:	f000 fbde 	bl	800662c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e70:	4b38      	ldr	r3, [pc, #224]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	4a37      	ldr	r2, [pc, #220]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e7a:	4b36      	ldr	r3, [pc, #216]	; (8005f54 <xTaskResumeAll+0x114>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d161      	bne.n	8005f46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e82:	4b35      	ldr	r3, [pc, #212]	; (8005f58 <xTaskResumeAll+0x118>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d05d      	beq.n	8005f46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e8a:	e02e      	b.n	8005eea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8c:	4b33      	ldr	r3, [pc, #204]	; (8005f5c <xTaskResumeAll+0x11c>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3318      	adds	r3, #24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fcd3 	bl	8005844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff fcce 	bl	8005844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	2201      	movs	r2, #1
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	4b2b      	ldr	r3, [pc, #172]	; (8005f60 <xTaskResumeAll+0x120>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <xTaskResumeAll+0x120>)
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4a27      	ldr	r2, [pc, #156]	; (8005f64 <xTaskResumeAll+0x124>)
 8005ec8:	441a      	add	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7ff fc5c 	bl	800578e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eda:	4b23      	ldr	r3, [pc, #140]	; (8005f68 <xTaskResumeAll+0x128>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ee4:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <xTaskResumeAll+0x12c>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eea:	4b1c      	ldr	r3, [pc, #112]	; (8005f5c <xTaskResumeAll+0x11c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1cc      	bne.n	8005e8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ef8:	f000 fa20 	bl	800633c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005efc:	4b1c      	ldr	r3, [pc, #112]	; (8005f70 <xTaskResumeAll+0x130>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d010      	beq.n	8005f2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f08:	f000 f844 	bl	8005f94 <xTaskIncrementTick>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005f12:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <xTaskResumeAll+0x12c>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f1      	bne.n	8005f08 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005f24:	4b12      	ldr	r3, [pc, #72]	; (8005f70 <xTaskResumeAll+0x130>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f2a:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <xTaskResumeAll+0x12c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f32:	2301      	movs	r3, #1
 8005f34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <xTaskResumeAll+0x134>)
 8005f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f46:	f000 fba1 	bl	800668c <vPortExitCritical>

	return xAlreadyYielded;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	200006f0 	.word	0x200006f0
 8005f58:	200006c8 	.word	0x200006c8
 8005f5c:	20000688 	.word	0x20000688
 8005f60:	200006d0 	.word	0x200006d0
 8005f64:	200005cc 	.word	0x200005cc
 8005f68:	200005c8 	.word	0x200005c8
 8005f6c:	200006dc 	.word	0x200006dc
 8005f70:	200006d8 	.word	0x200006d8
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f7e:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <xTaskGetTickCount+0x18>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f84:	687b      	ldr	r3, [r7, #4]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr
 8005f90:	200006cc 	.word	0x200006cc

08005f94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f9e:	4b4e      	ldr	r3, [pc, #312]	; (80060d8 <xTaskIncrementTick+0x144>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 808e 	bne.w	80060c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fa8:	4b4c      	ldr	r3, [pc, #304]	; (80060dc <xTaskIncrementTick+0x148>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3301      	adds	r3, #1
 8005fae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fb0:	4a4a      	ldr	r2, [pc, #296]	; (80060dc <xTaskIncrementTick+0x148>)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d120      	bne.n	8005ffe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fbc:	4b48      	ldr	r3, [pc, #288]	; (80060e0 <xTaskIncrementTick+0x14c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <xTaskIncrementTick+0x48>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	603b      	str	r3, [r7, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <xTaskIncrementTick+0x46>
 8005fdc:	4b40      	ldr	r3, [pc, #256]	; (80060e0 <xTaskIncrementTick+0x14c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	4b40      	ldr	r3, [pc, #256]	; (80060e4 <xTaskIncrementTick+0x150>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a3e      	ldr	r2, [pc, #248]	; (80060e0 <xTaskIncrementTick+0x14c>)
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	4a3e      	ldr	r2, [pc, #248]	; (80060e4 <xTaskIncrementTick+0x150>)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	4b3d      	ldr	r3, [pc, #244]	; (80060e8 <xTaskIncrementTick+0x154>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	4a3c      	ldr	r2, [pc, #240]	; (80060e8 <xTaskIncrementTick+0x154>)
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	f000 f99f 	bl	800633c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ffe:	4b3b      	ldr	r3, [pc, #236]	; (80060ec <xTaskIncrementTick+0x158>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	429a      	cmp	r2, r3
 8006006:	d348      	bcc.n	800609a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006008:	4b35      	ldr	r3, [pc, #212]	; (80060e0 <xTaskIncrementTick+0x14c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d104      	bne.n	800601c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006012:	4b36      	ldr	r3, [pc, #216]	; (80060ec <xTaskIncrementTick+0x158>)
 8006014:	f04f 32ff 	mov.w	r2, #4294967295
 8006018:	601a      	str	r2, [r3, #0]
					break;
 800601a:	e03e      	b.n	800609a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800601c:	4b30      	ldr	r3, [pc, #192]	; (80060e0 <xTaskIncrementTick+0x14c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d203      	bcs.n	800603c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006034:	4a2d      	ldr	r2, [pc, #180]	; (80060ec <xTaskIncrementTick+0x158>)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800603a:	e02e      	b.n	800609a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	3304      	adds	r3, #4
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fbff 	bl	8005844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	d004      	beq.n	8006058 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	3318      	adds	r3, #24
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fbf6 	bl	8005844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	2201      	movs	r2, #1
 800605e:	409a      	lsls	r2, r3
 8006060:	4b23      	ldr	r3, [pc, #140]	; (80060f0 <xTaskIncrementTick+0x15c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4313      	orrs	r3, r2
 8006066:	4a22      	ldr	r2, [pc, #136]	; (80060f0 <xTaskIncrementTick+0x15c>)
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4a1f      	ldr	r2, [pc, #124]	; (80060f4 <xTaskIncrementTick+0x160>)
 8006078:	441a      	add	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	3304      	adds	r3, #4
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f7ff fb84 	bl	800578e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608a:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <xTaskIncrementTick+0x164>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	429a      	cmp	r2, r3
 8006092:	d3b9      	bcc.n	8006008 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006094:	2301      	movs	r3, #1
 8006096:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006098:	e7b6      	b.n	8006008 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800609a:	4b17      	ldr	r3, [pc, #92]	; (80060f8 <xTaskIncrementTick+0x164>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	4914      	ldr	r1, [pc, #80]	; (80060f4 <xTaskIncrementTick+0x160>)
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d901      	bls.n	80060b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80060b2:	2301      	movs	r3, #1
 80060b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060b6:	4b11      	ldr	r3, [pc, #68]	; (80060fc <xTaskIncrementTick+0x168>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80060be:	2301      	movs	r3, #1
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	e004      	b.n	80060ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <xTaskIncrementTick+0x16c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	4a0d      	ldr	r2, [pc, #52]	; (8006100 <xTaskIncrementTick+0x16c>)
 80060cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060ce:	697b      	ldr	r3, [r7, #20]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	200006f0 	.word	0x200006f0
 80060dc:	200006cc 	.word	0x200006cc
 80060e0:	20000680 	.word	0x20000680
 80060e4:	20000684 	.word	0x20000684
 80060e8:	200006e0 	.word	0x200006e0
 80060ec:	200006e8 	.word	0x200006e8
 80060f0:	200006d0 	.word	0x200006d0
 80060f4:	200005cc 	.word	0x200005cc
 80060f8:	200005c8 	.word	0x200005c8
 80060fc:	200006dc 	.word	0x200006dc
 8006100:	200006d8 	.word	0x200006d8

08006104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800610a:	4b29      	ldr	r3, [pc, #164]	; (80061b0 <vTaskSwitchContext+0xac>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006112:	4b28      	ldr	r3, [pc, #160]	; (80061b4 <vTaskSwitchContext+0xb0>)
 8006114:	2201      	movs	r2, #1
 8006116:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006118:	e044      	b.n	80061a4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800611a:	4b26      	ldr	r3, [pc, #152]	; (80061b4 <vTaskSwitchContext+0xb0>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006120:	4b25      	ldr	r3, [pc, #148]	; (80061b8 <vTaskSwitchContext+0xb4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	fab3 f383 	clz	r3, r3
 800612c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	f1c3 031f 	rsb	r3, r3, #31
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	4921      	ldr	r1, [pc, #132]	; (80061bc <vTaskSwitchContext+0xb8>)
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <vTaskSwitchContext+0x5c>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	607b      	str	r3, [r7, #4]
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <vTaskSwitchContext+0x5a>
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4a14      	ldr	r2, [pc, #80]	; (80061bc <vTaskSwitchContext+0xb8>)
 800616c:	4413      	add	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	3308      	adds	r3, #8
 8006182:	429a      	cmp	r2, r3
 8006184:	d104      	bne.n	8006190 <vTaskSwitchContext+0x8c>
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	605a      	str	r2, [r3, #4]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	4a0a      	ldr	r2, [pc, #40]	; (80061c0 <vTaskSwitchContext+0xbc>)
 8006198:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <vTaskSwitchContext+0xbc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	334c      	adds	r3, #76	; 0x4c
 80061a0:	4a08      	ldr	r2, [pc, #32]	; (80061c4 <vTaskSwitchContext+0xc0>)
 80061a2:	6013      	str	r3, [r2, #0]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bc80      	pop	{r7}
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	200006f0 	.word	0x200006f0
 80061b4:	200006dc 	.word	0x200006dc
 80061b8:	200006d0 	.word	0x200006d0
 80061bc:	200005cc 	.word	0x200005cc
 80061c0:	200005c8 	.word	0x200005c8
 80061c4:	20000078 	.word	0x20000078

080061c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061d0:	f000 f852 	bl	8006278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061d4:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <prvIdleTask+0x28>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d9f9      	bls.n	80061d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061dc:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <prvIdleTask+0x2c>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061ec:	e7f0      	b.n	80061d0 <prvIdleTask+0x8>
 80061ee:	bf00      	nop
 80061f0:	200005cc 	.word	0x200005cc
 80061f4:	e000ed04 	.word	0xe000ed04

080061f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061fe:	2300      	movs	r3, #0
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	e00c      	b.n	800621e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4a12      	ldr	r2, [pc, #72]	; (8006258 <prvInitialiseTaskLists+0x60>)
 8006210:	4413      	add	r3, r2
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fa90 	bl	8005738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3301      	adds	r3, #1
 800621c:	607b      	str	r3, [r7, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b06      	cmp	r3, #6
 8006222:	d9ef      	bls.n	8006204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006224:	480d      	ldr	r0, [pc, #52]	; (800625c <prvInitialiseTaskLists+0x64>)
 8006226:	f7ff fa87 	bl	8005738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800622a:	480d      	ldr	r0, [pc, #52]	; (8006260 <prvInitialiseTaskLists+0x68>)
 800622c:	f7ff fa84 	bl	8005738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006230:	480c      	ldr	r0, [pc, #48]	; (8006264 <prvInitialiseTaskLists+0x6c>)
 8006232:	f7ff fa81 	bl	8005738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006236:	480c      	ldr	r0, [pc, #48]	; (8006268 <prvInitialiseTaskLists+0x70>)
 8006238:	f7ff fa7e 	bl	8005738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800623c:	480b      	ldr	r0, [pc, #44]	; (800626c <prvInitialiseTaskLists+0x74>)
 800623e:	f7ff fa7b 	bl	8005738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006242:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <prvInitialiseTaskLists+0x78>)
 8006244:	4a05      	ldr	r2, [pc, #20]	; (800625c <prvInitialiseTaskLists+0x64>)
 8006246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <prvInitialiseTaskLists+0x7c>)
 800624a:	4a05      	ldr	r2, [pc, #20]	; (8006260 <prvInitialiseTaskLists+0x68>)
 800624c:	601a      	str	r2, [r3, #0]
}
 800624e:	bf00      	nop
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	200005cc 	.word	0x200005cc
 800625c:	20000658 	.word	0x20000658
 8006260:	2000066c 	.word	0x2000066c
 8006264:	20000688 	.word	0x20000688
 8006268:	2000069c 	.word	0x2000069c
 800626c:	200006b4 	.word	0x200006b4
 8006270:	20000680 	.word	0x20000680
 8006274:	20000684 	.word	0x20000684

08006278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800627e:	e019      	b.n	80062b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006280:	f000 f9d4 	bl	800662c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006284:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <prvCheckTasksWaitingTermination+0x50>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3304      	adds	r3, #4
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fad7 	bl	8005844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006296:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <prvCheckTasksWaitingTermination+0x54>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3b01      	subs	r3, #1
 800629c:	4a0b      	ldr	r2, [pc, #44]	; (80062cc <prvCheckTasksWaitingTermination+0x54>)
 800629e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <prvCheckTasksWaitingTermination+0x58>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <prvCheckTasksWaitingTermination+0x58>)
 80062a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062aa:	f000 f9ef 	bl	800668c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f810 	bl	80062d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062b4:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <prvCheckTasksWaitingTermination+0x58>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e1      	bne.n	8006280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062bc:	bf00      	nop
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2000069c 	.word	0x2000069c
 80062cc:	200006c8 	.word	0x200006c8
 80062d0:	200006b0 	.word	0x200006b0

080062d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	334c      	adds	r3, #76	; 0x4c
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fc55 	bl	8006b90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d108      	bne.n	8006302 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 fb27 	bl	8006948 <vPortFree>
				vPortFree( pxTCB );
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fb24 	bl	8006948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006300:	e018      	b.n	8006334 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006308:	2b01      	cmp	r3, #1
 800630a:	d103      	bne.n	8006314 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fb1b 	bl	8006948 <vPortFree>
	}
 8006312:	e00f      	b.n	8006334 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800631a:	2b02      	cmp	r3, #2
 800631c:	d00a      	beq.n	8006334 <prvDeleteTCB+0x60>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60fb      	str	r3, [r7, #12]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <prvDeleteTCB+0x5e>
	}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <prvResetNextTaskUnblockTime+0x38>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <prvResetNextTaskUnblockTime+0x3c>)
 800634e:	f04f 32ff 	mov.w	r2, #4294967295
 8006352:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006354:	e008      	b.n	8006368 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006356:	4b07      	ldr	r3, [pc, #28]	; (8006374 <prvResetNextTaskUnblockTime+0x38>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	4a04      	ldr	r2, [pc, #16]	; (8006378 <prvResetNextTaskUnblockTime+0x3c>)
 8006366:	6013      	str	r3, [r2, #0]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000680 	.word	0x20000680
 8006378:	200006e8 	.word	0x200006e8

0800637c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006386:	4b29      	ldr	r3, [pc, #164]	; (800642c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800638c:	4b28      	ldr	r3, [pc, #160]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3304      	adds	r3, #4
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fa56 	bl	8005844 <uxListRemove>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800639e:	4b24      	ldr	r3, [pc, #144]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	2201      	movs	r2, #1
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	43da      	mvns	r2, r3
 80063ac:	4b21      	ldr	r3, [pc, #132]	; (8006434 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4013      	ands	r3, r2
 80063b2:	4a20      	ldr	r2, [pc, #128]	; (8006434 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063bc:	d10a      	bne.n	80063d4 <prvAddCurrentTaskToDelayedList+0x58>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063c4:	4b1a      	ldr	r3, [pc, #104]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	481a      	ldr	r0, [pc, #104]	; (8006438 <prvAddCurrentTaskToDelayedList+0xbc>)
 80063ce:	f7ff f9de 	bl	800578e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063d2:	e026      	b.n	8006422 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4413      	add	r3, r2
 80063da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063dc:	4b14      	ldr	r3, [pc, #80]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d209      	bcs.n	8006400 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ec:	4b13      	ldr	r3, [pc, #76]	; (800643c <prvAddCurrentTaskToDelayedList+0xc0>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4619      	mov	r1, r3
 80063f8:	4610      	mov	r0, r2
 80063fa:	f7ff f9eb 	bl	80057d4 <vListInsert>
}
 80063fe:	e010      	b.n	8006422 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7ff f9e1 	bl	80057d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006412:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	d202      	bcs.n	8006422 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800641c:	4a09      	ldr	r2, [pc, #36]	; (8006444 <prvAddCurrentTaskToDelayedList+0xc8>)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6013      	str	r3, [r2, #0]
}
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	200006cc 	.word	0x200006cc
 8006430:	200005c8 	.word	0x200005c8
 8006434:	200006d0 	.word	0x200006d0
 8006438:	200006b4 	.word	0x200006b4
 800643c:	20000684 	.word	0x20000684
 8006440:	20000680 	.word	0x20000680
 8006444:	200006e8 	.word	0x200006e8

08006448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3b04      	subs	r3, #4
 8006458:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3b04      	subs	r3, #4
 8006466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f023 0201 	bic.w	r2, r3, #1
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3b04      	subs	r3, #4
 8006476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006478:	4a08      	ldr	r2, [pc, #32]	; (800649c <pxPortInitialiseStack+0x54>)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3b14      	subs	r3, #20
 8006482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3b20      	subs	r3, #32
 800648e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006490:	68fb      	ldr	r3, [r7, #12]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr
 800649c:	080064a1 	.word	0x080064a1

080064a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <prvTaskExitError+0x54>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d00a      	beq.n	80064ca <prvTaskExitError+0x2a>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	60fb      	str	r3, [r7, #12]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <prvTaskExitError+0x28>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	60bb      	str	r3, [r7, #8]
}
 80064dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064de:	bf00      	nop
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0fc      	beq.n	80064e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	20000028 	.word	0x20000028
	...

08006500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <pxCurrentTCBConst2>)
 8006502:	6819      	ldr	r1, [r3, #0]
 8006504:	6808      	ldr	r0, [r1, #0]
 8006506:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800650a:	f380 8809 	msr	PSP, r0
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8811 	msr	BASEPRI, r0
 800651a:	f04e 0e0d 	orr.w	lr, lr, #13
 800651e:	4770      	bx	lr

08006520 <pxCurrentTCBConst2>:
 8006520:	200005c8 	.word	0x200005c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006528:	4806      	ldr	r0, [pc, #24]	; (8006544 <prvPortStartFirstTask+0x1c>)
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	6800      	ldr	r0, [r0, #0]
 800652e:	f380 8808 	msr	MSP, r0
 8006532:	b662      	cpsie	i
 8006534:	b661      	cpsie	f
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	df00      	svc	0
 8006540:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006542:	bf00      	nop
 8006544:	e000ed08 	.word	0xe000ed08

08006548 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800654e:	4b32      	ldr	r3, [pc, #200]	; (8006618 <xPortStartScheduler+0xd0>)
 8006550:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	22ff      	movs	r2, #255	; 0xff
 800655e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006570:	b2da      	uxtb	r2, r3
 8006572:	4b2a      	ldr	r3, [pc, #168]	; (800661c <xPortStartScheduler+0xd4>)
 8006574:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006576:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <xPortStartScheduler+0xd8>)
 8006578:	2207      	movs	r2, #7
 800657a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800657c:	e009      	b.n	8006592 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800657e:	4b28      	ldr	r3, [pc, #160]	; (8006620 <xPortStartScheduler+0xd8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3b01      	subs	r3, #1
 8006584:	4a26      	ldr	r2, [pc, #152]	; (8006620 <xPortStartScheduler+0xd8>)
 8006586:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	b2db      	uxtb	r3, r3
 8006590:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659a:	2b80      	cmp	r3, #128	; 0x80
 800659c:	d0ef      	beq.n	800657e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800659e:	4b20      	ldr	r3, [pc, #128]	; (8006620 <xPortStartScheduler+0xd8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f1c3 0307 	rsb	r3, r3, #7
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d00a      	beq.n	80065c0 <xPortStartScheduler+0x78>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	60bb      	str	r3, [r7, #8]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065c0:	4b17      	ldr	r3, [pc, #92]	; (8006620 <xPortStartScheduler+0xd8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	4a16      	ldr	r2, [pc, #88]	; (8006620 <xPortStartScheduler+0xd8>)
 80065c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065ca:	4b15      	ldr	r3, [pc, #84]	; (8006620 <xPortStartScheduler+0xd8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065d2:	4a13      	ldr	r2, [pc, #76]	; (8006620 <xPortStartScheduler+0xd8>)
 80065d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065de:	4b11      	ldr	r3, [pc, #68]	; (8006624 <xPortStartScheduler+0xdc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a10      	ldr	r2, [pc, #64]	; (8006624 <xPortStartScheduler+0xdc>)
 80065e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <xPortStartScheduler+0xdc>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a0d      	ldr	r2, [pc, #52]	; (8006624 <xPortStartScheduler+0xdc>)
 80065f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065f6:	f000 f8b9 	bl	800676c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <xPortStartScheduler+0xe0>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006600:	f7ff ff92 	bl	8006528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006604:	f7ff fd7e 	bl	8006104 <vTaskSwitchContext>
	prvTaskExitError();
 8006608:	f7ff ff4a 	bl	80064a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	e000e400 	.word	0xe000e400
 800661c:	200006f4 	.word	0x200006f4
 8006620:	200006f8 	.word	0x200006f8
 8006624:	e000ed20 	.word	0xe000ed20
 8006628:	20000028 	.word	0x20000028

0800662c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	607b      	str	r3, [r7, #4]
}
 8006644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <vPortEnterCritical+0x58>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3301      	adds	r3, #1
 800664c:	4a0d      	ldr	r2, [pc, #52]	; (8006684 <vPortEnterCritical+0x58>)
 800664e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006650:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <vPortEnterCritical+0x58>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d10f      	bne.n	8006678 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006658:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <vPortEnterCritical+0x5c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <vPortEnterCritical+0x4c>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	603b      	str	r3, [r7, #0]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vPortEnterCritical+0x4a>
	}
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20000028 	.word	0x20000028
 8006688:	e000ed04 	.word	0xe000ed04

0800668c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006692:	4b11      	ldr	r3, [pc, #68]	; (80066d8 <vPortExitCritical+0x4c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <vPortExitCritical+0x24>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	607b      	str	r3, [r7, #4]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066b0:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <vPortExitCritical+0x4c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	4a08      	ldr	r2, [pc, #32]	; (80066d8 <vPortExitCritical+0x4c>)
 80066b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <vPortExitCritical+0x4c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <vPortExitCritical+0x42>
 80066c2:	2300      	movs	r3, #0
 80066c4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr
 80066d8:	20000028 	.word	0x20000028
 80066dc:	00000000 	.word	0x00000000

080066e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066e0:	f3ef 8009 	mrs	r0, PSP
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	4b0d      	ldr	r3, [pc, #52]	; (8006720 <pxCurrentTCBConst>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066f0:	6010      	str	r0, [r2, #0]
 80066f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80066f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066fa:	f380 8811 	msr	BASEPRI, r0
 80066fe:	f7ff fd01 	bl	8006104 <vTaskSwitchContext>
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8811 	msr	BASEPRI, r0
 800670a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800670e:	6819      	ldr	r1, [r3, #0]
 8006710:	6808      	ldr	r0, [r1, #0]
 8006712:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006716:	f380 8809 	msr	PSP, r0
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	4770      	bx	lr

08006720 <pxCurrentTCBConst>:
 8006720:	200005c8 	.word	0x200005c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop

08006728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	607b      	str	r3, [r7, #4]
}
 8006740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006742:	f7ff fc27 	bl	8005f94 <xTaskIncrementTick>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <SysTick_Handler+0x40>)
 800674e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	2300      	movs	r3, #0
 8006756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f383 8811 	msr	BASEPRI, r3
}
 800675e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006770:	4b0a      	ldr	r3, [pc, #40]	; (800679c <vPortSetupTimerInterrupt+0x30>)
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <vPortSetupTimerInterrupt+0x34>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800677c:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <vPortSetupTimerInterrupt+0x38>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a09      	ldr	r2, [pc, #36]	; (80067a8 <vPortSetupTimerInterrupt+0x3c>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	099b      	lsrs	r3, r3, #6
 8006788:	4a08      	ldr	r2, [pc, #32]	; (80067ac <vPortSetupTimerInterrupt+0x40>)
 800678a:	3b01      	subs	r3, #1
 800678c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800678e:	4b03      	ldr	r3, [pc, #12]	; (800679c <vPortSetupTimerInterrupt+0x30>)
 8006790:	2207      	movs	r2, #7
 8006792:	601a      	str	r2, [r3, #0]
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr
 800679c:	e000e010 	.word	0xe000e010
 80067a0:	e000e018 	.word	0xe000e018
 80067a4:	2000001c 	.word	0x2000001c
 80067a8:	10624dd3 	.word	0x10624dd3
 80067ac:	e000e014 	.word	0xe000e014

080067b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067bc:	f7ff fb32 	bl	8005e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067c0:	4b5b      	ldr	r3, [pc, #364]	; (8006930 <pvPortMalloc+0x180>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067c8:	f000 f920 	bl	8006a0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067cc:	4b59      	ldr	r3, [pc, #356]	; (8006934 <pvPortMalloc+0x184>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f040 8093 	bne.w	8006900 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01d      	beq.n	800681c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067e0:	2208      	movs	r2, #8
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4413      	add	r3, r2
 80067e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d014      	beq.n	800681c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f023 0307 	bic.w	r3, r3, #7
 80067f8:	3308      	adds	r3, #8
 80067fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <pvPortMalloc+0x6c>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	617b      	str	r3, [r7, #20]
}
 8006818:	bf00      	nop
 800681a:	e7fe      	b.n	800681a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d06e      	beq.n	8006900 <pvPortMalloc+0x150>
 8006822:	4b45      	ldr	r3, [pc, #276]	; (8006938 <pvPortMalloc+0x188>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	429a      	cmp	r2, r3
 800682a:	d869      	bhi.n	8006900 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800682c:	4b43      	ldr	r3, [pc, #268]	; (800693c <pvPortMalloc+0x18c>)
 800682e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006830:	4b42      	ldr	r3, [pc, #264]	; (800693c <pvPortMalloc+0x18c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006836:	e004      	b.n	8006842 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	429a      	cmp	r2, r3
 800684a:	d903      	bls.n	8006854 <pvPortMalloc+0xa4>
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1f1      	bne.n	8006838 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006854:	4b36      	ldr	r3, [pc, #216]	; (8006930 <pvPortMalloc+0x180>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685a:	429a      	cmp	r2, r3
 800685c:	d050      	beq.n	8006900 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2208      	movs	r2, #8
 8006864:	4413      	add	r3, r2
 8006866:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	1ad2      	subs	r2, r2, r3
 8006878:	2308      	movs	r3, #8
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	429a      	cmp	r2, r3
 800687e:	d91f      	bls.n	80068c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4413      	add	r3, r2
 8006886:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <pvPortMalloc+0xf8>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	613b      	str	r3, [r7, #16]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	1ad2      	subs	r2, r2, r3
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068ba:	69b8      	ldr	r0, [r7, #24]
 80068bc:	f000 f908 	bl	8006ad0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068c0:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <pvPortMalloc+0x188>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	4a1b      	ldr	r2, [pc, #108]	; (8006938 <pvPortMalloc+0x188>)
 80068cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068ce:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <pvPortMalloc+0x188>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <pvPortMalloc+0x190>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d203      	bcs.n	80068e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068da:	4b17      	ldr	r3, [pc, #92]	; (8006938 <pvPortMalloc+0x188>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a18      	ldr	r2, [pc, #96]	; (8006940 <pvPortMalloc+0x190>)
 80068e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <pvPortMalloc+0x184>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068f6:	4b13      	ldr	r3, [pc, #76]	; (8006944 <pvPortMalloc+0x194>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3301      	adds	r3, #1
 80068fc:	4a11      	ldr	r2, [pc, #68]	; (8006944 <pvPortMalloc+0x194>)
 80068fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006900:	f7ff fa9e 	bl	8005e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <pvPortMalloc+0x174>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	60fb      	str	r3, [r7, #12]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <pvPortMalloc+0x172>
	return pvReturn;
 8006924:	69fb      	ldr	r3, [r7, #28]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3728      	adds	r7, #40	; 0x28
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20001304 	.word	0x20001304
 8006934:	20001318 	.word	0x20001318
 8006938:	20001308 	.word	0x20001308
 800693c:	200012fc 	.word	0x200012fc
 8006940:	2000130c 	.word	0x2000130c
 8006944:	20001310 	.word	0x20001310

08006948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d04d      	beq.n	80069f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800695a:	2308      	movs	r3, #8
 800695c:	425b      	negs	r3, r3
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	4b24      	ldr	r3, [pc, #144]	; (8006a00 <vPortFree+0xb8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10a      	bne.n	800698c <vPortFree+0x44>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60fb      	str	r3, [r7, #12]
}
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <vPortFree+0x62>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60bb      	str	r3, [r7, #8]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	4b14      	ldr	r3, [pc, #80]	; (8006a00 <vPortFree+0xb8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4013      	ands	r3, r2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01e      	beq.n	80069f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d11a      	bne.n	80069f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <vPortFree+0xb8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	43db      	mvns	r3, r3
 80069ca:	401a      	ands	r2, r3
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069d0:	f7ff fa28 	bl	8005e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <vPortFree+0xbc>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4413      	add	r3, r2
 80069de:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <vPortFree+0xbc>)
 80069e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069e2:	6938      	ldr	r0, [r7, #16]
 80069e4:	f000 f874 	bl	8006ad0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069e8:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <vPortFree+0xc0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	4a06      	ldr	r2, [pc, #24]	; (8006a08 <vPortFree+0xc0>)
 80069f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069f2:	f7ff fa25 	bl	8005e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069f6:	bf00      	nop
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20001318 	.word	0x20001318
 8006a04:	20001308 	.word	0x20001308
 8006a08:	20001314 	.word	0x20001314

08006a0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006a16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a18:	4b27      	ldr	r3, [pc, #156]	; (8006ab8 <prvHeapInit+0xac>)
 8006a1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00c      	beq.n	8006a40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3307      	adds	r3, #7
 8006a2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0307 	bic.w	r3, r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	4a1f      	ldr	r2, [pc, #124]	; (8006ab8 <prvHeapInit+0xac>)
 8006a3c:	4413      	add	r3, r2
 8006a3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a44:	4a1d      	ldr	r2, [pc, #116]	; (8006abc <prvHeapInit+0xb0>)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a4a:	4b1c      	ldr	r3, [pc, #112]	; (8006abc <prvHeapInit+0xb0>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	4413      	add	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a58:	2208      	movs	r2, #8
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0307 	bic.w	r3, r3, #7
 8006a66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a15      	ldr	r2, [pc, #84]	; (8006ac0 <prvHeapInit+0xb4>)
 8006a6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a6e:	4b14      	ldr	r3, [pc, #80]	; (8006ac0 <prvHeapInit+0xb4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2200      	movs	r2, #0
 8006a74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a76:	4b12      	ldr	r3, [pc, #72]	; (8006ac0 <prvHeapInit+0xb4>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	1ad2      	subs	r2, r2, r3
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ac0 <prvHeapInit+0xb4>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	4a0a      	ldr	r2, [pc, #40]	; (8006ac4 <prvHeapInit+0xb8>)
 8006a9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4a09      	ldr	r2, [pc, #36]	; (8006ac8 <prvHeapInit+0xbc>)
 8006aa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aa4:	4b09      	ldr	r3, [pc, #36]	; (8006acc <prvHeapInit+0xc0>)
 8006aa6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006aaa:	601a      	str	r2, [r3, #0]
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	200006fc 	.word	0x200006fc
 8006abc:	200012fc 	.word	0x200012fc
 8006ac0:	20001304 	.word	0x20001304
 8006ac4:	2000130c 	.word	0x2000130c
 8006ac8:	20001308 	.word	0x20001308
 8006acc:	20001318 	.word	0x20001318

08006ad0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ad8:	4b27      	ldr	r3, [pc, #156]	; (8006b78 <prvInsertBlockIntoFreeList+0xa8>)
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e002      	b.n	8006ae4 <prvInsertBlockIntoFreeList+0x14>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d8f7      	bhi.n	8006ade <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	4413      	add	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d108      	bne.n	8006b12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	441a      	add	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	441a      	add	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d118      	bne.n	8006b58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <prvInsertBlockIntoFreeList+0xac>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d00d      	beq.n	8006b4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	441a      	add	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	e008      	b.n	8006b60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <prvInsertBlockIntoFreeList+0xac>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e003      	b.n	8006b60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d002      	beq.n	8006b6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b6e:	bf00      	nop
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr
 8006b78:	200012fc 	.word	0x200012fc
 8006b7c:	20001304 	.word	0x20001304

08006b80 <memset>:
 8006b80:	4603      	mov	r3, r0
 8006b82:	4402      	add	r2, r0
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d100      	bne.n	8006b8a <memset+0xa>
 8006b88:	4770      	bx	lr
 8006b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8e:	e7f9      	b.n	8006b84 <memset+0x4>

08006b90 <_reclaim_reent>:
 8006b90:	4b29      	ldr	r3, [pc, #164]	; (8006c38 <_reclaim_reent+0xa8>)
 8006b92:	b570      	push	{r4, r5, r6, lr}
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4604      	mov	r4, r0
 8006b98:	4283      	cmp	r3, r0
 8006b9a:	d04b      	beq.n	8006c34 <_reclaim_reent+0xa4>
 8006b9c:	69c3      	ldr	r3, [r0, #28]
 8006b9e:	b143      	cbz	r3, 8006bb2 <_reclaim_reent+0x22>
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d144      	bne.n	8006c30 <_reclaim_reent+0xa0>
 8006ba6:	69e3      	ldr	r3, [r4, #28]
 8006ba8:	6819      	ldr	r1, [r3, #0]
 8006baa:	b111      	cbz	r1, 8006bb2 <_reclaim_reent+0x22>
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 f86b 	bl	8006c88 <_free_r>
 8006bb2:	6961      	ldr	r1, [r4, #20]
 8006bb4:	b111      	cbz	r1, 8006bbc <_reclaim_reent+0x2c>
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 f866 	bl	8006c88 <_free_r>
 8006bbc:	69e1      	ldr	r1, [r4, #28]
 8006bbe:	b111      	cbz	r1, 8006bc6 <_reclaim_reent+0x36>
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 f861 	bl	8006c88 <_free_r>
 8006bc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006bc8:	b111      	cbz	r1, 8006bd0 <_reclaim_reent+0x40>
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 f85c 	bl	8006c88 <_free_r>
 8006bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bd2:	b111      	cbz	r1, 8006bda <_reclaim_reent+0x4a>
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f000 f857 	bl	8006c88 <_free_r>
 8006bda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006bdc:	b111      	cbz	r1, 8006be4 <_reclaim_reent+0x54>
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f852 	bl	8006c88 <_free_r>
 8006be4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006be6:	b111      	cbz	r1, 8006bee <_reclaim_reent+0x5e>
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 f84d 	bl	8006c88 <_free_r>
 8006bee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006bf0:	b111      	cbz	r1, 8006bf8 <_reclaim_reent+0x68>
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 f848 	bl	8006c88 <_free_r>
 8006bf8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006bfa:	b111      	cbz	r1, 8006c02 <_reclaim_reent+0x72>
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 f843 	bl	8006c88 <_free_r>
 8006c02:	6a23      	ldr	r3, [r4, #32]
 8006c04:	b1b3      	cbz	r3, 8006c34 <_reclaim_reent+0xa4>
 8006c06:	4620      	mov	r0, r4
 8006c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c0c:	4718      	bx	r3
 8006c0e:	5949      	ldr	r1, [r1, r5]
 8006c10:	b941      	cbnz	r1, 8006c24 <_reclaim_reent+0x94>
 8006c12:	3504      	adds	r5, #4
 8006c14:	69e3      	ldr	r3, [r4, #28]
 8006c16:	2d80      	cmp	r5, #128	; 0x80
 8006c18:	68d9      	ldr	r1, [r3, #12]
 8006c1a:	d1f8      	bne.n	8006c0e <_reclaim_reent+0x7e>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f000 f833 	bl	8006c88 <_free_r>
 8006c22:	e7c0      	b.n	8006ba6 <_reclaim_reent+0x16>
 8006c24:	680e      	ldr	r6, [r1, #0]
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 f82e 	bl	8006c88 <_free_r>
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	e7ef      	b.n	8006c10 <_reclaim_reent+0x80>
 8006c30:	2500      	movs	r5, #0
 8006c32:	e7ef      	b.n	8006c14 <_reclaim_reent+0x84>
 8006c34:	bd70      	pop	{r4, r5, r6, pc}
 8006c36:	bf00      	nop
 8006c38:	20000078 	.word	0x20000078

08006c3c <__libc_init_array>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	2600      	movs	r6, #0
 8006c40:	4d0c      	ldr	r5, [pc, #48]	; (8006c74 <__libc_init_array+0x38>)
 8006c42:	4c0d      	ldr	r4, [pc, #52]	; (8006c78 <__libc_init_array+0x3c>)
 8006c44:	1b64      	subs	r4, r4, r5
 8006c46:	10a4      	asrs	r4, r4, #2
 8006c48:	42a6      	cmp	r6, r4
 8006c4a:	d109      	bne.n	8006c60 <__libc_init_array+0x24>
 8006c4c:	f000 fad2 	bl	80071f4 <_init>
 8006c50:	2600      	movs	r6, #0
 8006c52:	4d0a      	ldr	r5, [pc, #40]	; (8006c7c <__libc_init_array+0x40>)
 8006c54:	4c0a      	ldr	r4, [pc, #40]	; (8006c80 <__libc_init_array+0x44>)
 8006c56:	1b64      	subs	r4, r4, r5
 8006c58:	10a4      	asrs	r4, r4, #2
 8006c5a:	42a6      	cmp	r6, r4
 8006c5c:	d105      	bne.n	8006c6a <__libc_init_array+0x2e>
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c64:	4798      	blx	r3
 8006c66:	3601      	adds	r6, #1
 8006c68:	e7ee      	b.n	8006c48 <__libc_init_array+0xc>
 8006c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c6e:	4798      	blx	r3
 8006c70:	3601      	adds	r6, #1
 8006c72:	e7f2      	b.n	8006c5a <__libc_init_array+0x1e>
 8006c74:	08007340 	.word	0x08007340
 8006c78:	08007340 	.word	0x08007340
 8006c7c:	08007340 	.word	0x08007340
 8006c80:	08007344 	.word	0x08007344

08006c84 <__retarget_lock_acquire_recursive>:
 8006c84:	4770      	bx	lr

08006c86 <__retarget_lock_release_recursive>:
 8006c86:	4770      	bx	lr

08006c88 <_free_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	d040      	beq.n	8006d12 <_free_r+0x8a>
 8006c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c94:	1f0c      	subs	r4, r1, #4
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	bfb8      	it	lt
 8006c9a:	18e4      	addlt	r4, r4, r3
 8006c9c:	f000 f83c 	bl	8006d18 <__malloc_lock>
 8006ca0:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <_free_r+0x8c>)
 8006ca2:	6813      	ldr	r3, [r2, #0]
 8006ca4:	b933      	cbnz	r3, 8006cb4 <_free_r+0x2c>
 8006ca6:	6063      	str	r3, [r4, #4]
 8006ca8:	6014      	str	r4, [r2, #0]
 8006caa:	4628      	mov	r0, r5
 8006cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cb0:	f000 b838 	b.w	8006d24 <__malloc_unlock>
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	d908      	bls.n	8006cca <_free_r+0x42>
 8006cb8:	6820      	ldr	r0, [r4, #0]
 8006cba:	1821      	adds	r1, r4, r0
 8006cbc:	428b      	cmp	r3, r1
 8006cbe:	bf01      	itttt	eq
 8006cc0:	6819      	ldreq	r1, [r3, #0]
 8006cc2:	685b      	ldreq	r3, [r3, #4]
 8006cc4:	1809      	addeq	r1, r1, r0
 8006cc6:	6021      	streq	r1, [r4, #0]
 8006cc8:	e7ed      	b.n	8006ca6 <_free_r+0x1e>
 8006cca:	461a      	mov	r2, r3
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	b10b      	cbz	r3, 8006cd4 <_free_r+0x4c>
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	d9fa      	bls.n	8006cca <_free_r+0x42>
 8006cd4:	6811      	ldr	r1, [r2, #0]
 8006cd6:	1850      	adds	r0, r2, r1
 8006cd8:	42a0      	cmp	r0, r4
 8006cda:	d10b      	bne.n	8006cf4 <_free_r+0x6c>
 8006cdc:	6820      	ldr	r0, [r4, #0]
 8006cde:	4401      	add	r1, r0
 8006ce0:	1850      	adds	r0, r2, r1
 8006ce2:	4283      	cmp	r3, r0
 8006ce4:	6011      	str	r1, [r2, #0]
 8006ce6:	d1e0      	bne.n	8006caa <_free_r+0x22>
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4408      	add	r0, r1
 8006cee:	6010      	str	r0, [r2, #0]
 8006cf0:	6053      	str	r3, [r2, #4]
 8006cf2:	e7da      	b.n	8006caa <_free_r+0x22>
 8006cf4:	d902      	bls.n	8006cfc <_free_r+0x74>
 8006cf6:	230c      	movs	r3, #12
 8006cf8:	602b      	str	r3, [r5, #0]
 8006cfa:	e7d6      	b.n	8006caa <_free_r+0x22>
 8006cfc:	6820      	ldr	r0, [r4, #0]
 8006cfe:	1821      	adds	r1, r4, r0
 8006d00:	428b      	cmp	r3, r1
 8006d02:	bf01      	itttt	eq
 8006d04:	6819      	ldreq	r1, [r3, #0]
 8006d06:	685b      	ldreq	r3, [r3, #4]
 8006d08:	1809      	addeq	r1, r1, r0
 8006d0a:	6021      	streq	r1, [r4, #0]
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	6054      	str	r4, [r2, #4]
 8006d10:	e7cb      	b.n	8006caa <_free_r+0x22>
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	20001458 	.word	0x20001458

08006d18 <__malloc_lock>:
 8006d18:	4801      	ldr	r0, [pc, #4]	; (8006d20 <__malloc_lock+0x8>)
 8006d1a:	f7ff bfb3 	b.w	8006c84 <__retarget_lock_acquire_recursive>
 8006d1e:	bf00      	nop
 8006d20:	20001454 	.word	0x20001454

08006d24 <__malloc_unlock>:
 8006d24:	4801      	ldr	r0, [pc, #4]	; (8006d2c <__malloc_unlock+0x8>)
 8006d26:	f7ff bfae 	b.w	8006c86 <__retarget_lock_release_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	20001454 	.word	0x20001454

08006d30 <atan2>:
 8006d30:	f000 b802 	b.w	8006d38 <__ieee754_atan2>
 8006d34:	0000      	movs	r0, r0
	...

08006d38 <__ieee754_atan2>:
 8006d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	4617      	mov	r7, r2
 8006d3e:	4692      	mov	sl, r2
 8006d40:	4699      	mov	r9, r3
 8006d42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d46:	427b      	negs	r3, r7
 8006d48:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8006ec8 <__ieee754_atan2+0x190>
 8006d4c:	433b      	orrs	r3, r7
 8006d4e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006d52:	4543      	cmp	r3, r8
 8006d54:	4604      	mov	r4, r0
 8006d56:	460d      	mov	r5, r1
 8006d58:	d809      	bhi.n	8006d6e <__ieee754_atan2+0x36>
 8006d5a:	4246      	negs	r6, r0
 8006d5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d60:	4306      	orrs	r6, r0
 8006d62:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006d66:	4546      	cmp	r6, r8
 8006d68:	468e      	mov	lr, r1
 8006d6a:	4683      	mov	fp, r0
 8006d6c:	d908      	bls.n	8006d80 <__ieee754_atan2+0x48>
 8006d6e:	4652      	mov	r2, sl
 8006d70:	464b      	mov	r3, r9
 8006d72:	4620      	mov	r0, r4
 8006d74:	4629      	mov	r1, r5
 8006d76:	f7f9 f9f1 	bl	800015c <__adddf3>
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	460d      	mov	r5, r1
 8006d7e:	e019      	b.n	8006db4 <__ieee754_atan2+0x7c>
 8006d80:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8006d84:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006d88:	433e      	orrs	r6, r7
 8006d8a:	d103      	bne.n	8006d94 <__ieee754_atan2+0x5c>
 8006d8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d90:	f000 b8a2 	b.w	8006ed8 <atan>
 8006d94:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8006d98:	f006 0602 	and.w	r6, r6, #2
 8006d9c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8006da0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006da4:	d10a      	bne.n	8006dbc <__ieee754_atan2+0x84>
 8006da6:	2e02      	cmp	r6, #2
 8006da8:	d067      	beq.n	8006e7a <__ieee754_atan2+0x142>
 8006daa:	2e03      	cmp	r6, #3
 8006dac:	d102      	bne.n	8006db4 <__ieee754_atan2+0x7c>
 8006dae:	a53a      	add	r5, pc, #232	; (adr r5, 8006e98 <__ieee754_atan2+0x160>)
 8006db0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	4317      	orrs	r7, r2
 8006dbe:	d106      	bne.n	8006dce <__ieee754_atan2+0x96>
 8006dc0:	f1be 0f00 	cmp.w	lr, #0
 8006dc4:	da64      	bge.n	8006e90 <__ieee754_atan2+0x158>
 8006dc6:	a536      	add	r5, pc, #216	; (adr r5, 8006ea0 <__ieee754_atan2+0x168>)
 8006dc8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006dcc:	e7f2      	b.n	8006db4 <__ieee754_atan2+0x7c>
 8006dce:	4542      	cmp	r2, r8
 8006dd0:	d10f      	bne.n	8006df2 <__ieee754_atan2+0xba>
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	f106 36ff 	add.w	r6, r6, #4294967295
 8006dd8:	d107      	bne.n	8006dea <__ieee754_atan2+0xb2>
 8006dda:	2e02      	cmp	r6, #2
 8006ddc:	d851      	bhi.n	8006e82 <__ieee754_atan2+0x14a>
 8006dde:	4b3b      	ldr	r3, [pc, #236]	; (8006ecc <__ieee754_atan2+0x194>)
 8006de0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006de4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006de8:	e7e4      	b.n	8006db4 <__ieee754_atan2+0x7c>
 8006dea:	2e02      	cmp	r6, #2
 8006dec:	d84d      	bhi.n	8006e8a <__ieee754_atan2+0x152>
 8006dee:	4b38      	ldr	r3, [pc, #224]	; (8006ed0 <__ieee754_atan2+0x198>)
 8006df0:	e7f6      	b.n	8006de0 <__ieee754_atan2+0xa8>
 8006df2:	4543      	cmp	r3, r8
 8006df4:	d0e4      	beq.n	8006dc0 <__ieee754_atan2+0x88>
 8006df6:	1a9b      	subs	r3, r3, r2
 8006df8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006dfc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e00:	da21      	bge.n	8006e46 <__ieee754_atan2+0x10e>
 8006e02:	f1b9 0f00 	cmp.w	r9, #0
 8006e06:	da01      	bge.n	8006e0c <__ieee754_atan2+0xd4>
 8006e08:	323c      	adds	r2, #60	; 0x3c
 8006e0a:	db20      	blt.n	8006e4e <__ieee754_atan2+0x116>
 8006e0c:	4652      	mov	r2, sl
 8006e0e:	464b      	mov	r3, r9
 8006e10:	4620      	mov	r0, r4
 8006e12:	4629      	mov	r1, r5
 8006e14:	f7f9 fc82 	bl	800071c <__aeabi_ddiv>
 8006e18:	f000 f9e8 	bl	80071ec <fabs>
 8006e1c:	f000 f85c 	bl	8006ed8 <atan>
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	2e01      	cmp	r6, #1
 8006e26:	d015      	beq.n	8006e54 <__ieee754_atan2+0x11c>
 8006e28:	2e02      	cmp	r6, #2
 8006e2a:	d017      	beq.n	8006e5c <__ieee754_atan2+0x124>
 8006e2c:	2e00      	cmp	r6, #0
 8006e2e:	d0c1      	beq.n	8006db4 <__ieee754_atan2+0x7c>
 8006e30:	a31d      	add	r3, pc, #116	; (adr r3, 8006ea8 <__ieee754_atan2+0x170>)
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	4620      	mov	r0, r4
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f7f9 f98d 	bl	8000158 <__aeabi_dsub>
 8006e3e:	a31c      	add	r3, pc, #112	; (adr r3, 8006eb0 <__ieee754_atan2+0x178>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	e016      	b.n	8006e74 <__ieee754_atan2+0x13c>
 8006e46:	a51c      	add	r5, pc, #112	; (adr r5, 8006eb8 <__ieee754_atan2+0x180>)
 8006e48:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e4c:	e7ea      	b.n	8006e24 <__ieee754_atan2+0xec>
 8006e4e:	2400      	movs	r4, #0
 8006e50:	2500      	movs	r5, #0
 8006e52:	e7e7      	b.n	8006e24 <__ieee754_atan2+0xec>
 8006e54:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006e58:	461d      	mov	r5, r3
 8006e5a:	e7ab      	b.n	8006db4 <__ieee754_atan2+0x7c>
 8006e5c:	a312      	add	r3, pc, #72	; (adr r3, 8006ea8 <__ieee754_atan2+0x170>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	4620      	mov	r0, r4
 8006e64:	4629      	mov	r1, r5
 8006e66:	f7f9 f977 	bl	8000158 <__aeabi_dsub>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	a110      	add	r1, pc, #64	; (adr r1, 8006eb0 <__ieee754_atan2+0x178>)
 8006e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e74:	f7f9 f970 	bl	8000158 <__aeabi_dsub>
 8006e78:	e77f      	b.n	8006d7a <__ieee754_atan2+0x42>
 8006e7a:	a50d      	add	r5, pc, #52	; (adr r5, 8006eb0 <__ieee754_atan2+0x178>)
 8006e7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e80:	e798      	b.n	8006db4 <__ieee754_atan2+0x7c>
 8006e82:	a50f      	add	r5, pc, #60	; (adr r5, 8006ec0 <__ieee754_atan2+0x188>)
 8006e84:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e88:	e794      	b.n	8006db4 <__ieee754_atan2+0x7c>
 8006e8a:	2400      	movs	r4, #0
 8006e8c:	2500      	movs	r5, #0
 8006e8e:	e791      	b.n	8006db4 <__ieee754_atan2+0x7c>
 8006e90:	a509      	add	r5, pc, #36	; (adr r5, 8006eb8 <__ieee754_atan2+0x180>)
 8006e92:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e96:	e78d      	b.n	8006db4 <__ieee754_atan2+0x7c>
 8006e98:	54442d18 	.word	0x54442d18
 8006e9c:	c00921fb 	.word	0xc00921fb
 8006ea0:	54442d18 	.word	0x54442d18
 8006ea4:	bff921fb 	.word	0xbff921fb
 8006ea8:	33145c07 	.word	0x33145c07
 8006eac:	3ca1a626 	.word	0x3ca1a626
 8006eb0:	54442d18 	.word	0x54442d18
 8006eb4:	400921fb 	.word	0x400921fb
 8006eb8:	54442d18 	.word	0x54442d18
 8006ebc:	3ff921fb 	.word	0x3ff921fb
 8006ec0:	54442d18 	.word	0x54442d18
 8006ec4:	3fe921fb 	.word	0x3fe921fb
 8006ec8:	7ff00000 	.word	0x7ff00000
 8006ecc:	080072d0 	.word	0x080072d0
 8006ed0:	080072e8 	.word	0x080072e8
 8006ed4:	00000000 	.word	0x00000000

08006ed8 <atan>:
 8006ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	4bb6      	ldr	r3, [pc, #728]	; (80071b8 <atan+0x2e0>)
 8006ede:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006ee2:	429e      	cmp	r6, r3
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	460d      	mov	r5, r1
 8006ee8:	468b      	mov	fp, r1
 8006eea:	dd17      	ble.n	8006f1c <atan+0x44>
 8006eec:	4bb3      	ldr	r3, [pc, #716]	; (80071bc <atan+0x2e4>)
 8006eee:	429e      	cmp	r6, r3
 8006ef0:	dc01      	bgt.n	8006ef6 <atan+0x1e>
 8006ef2:	d109      	bne.n	8006f08 <atan+0x30>
 8006ef4:	b140      	cbz	r0, 8006f08 <atan+0x30>
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	462b      	mov	r3, r5
 8006efa:	4620      	mov	r0, r4
 8006efc:	4629      	mov	r1, r5
 8006efe:	f7f9 f92d 	bl	800015c <__adddf3>
 8006f02:	4604      	mov	r4, r0
 8006f04:	460d      	mov	r5, r1
 8006f06:	e005      	b.n	8006f14 <atan+0x3c>
 8006f08:	f1bb 0f00 	cmp.w	fp, #0
 8006f0c:	4cac      	ldr	r4, [pc, #688]	; (80071c0 <atan+0x2e8>)
 8006f0e:	f300 8121 	bgt.w	8007154 <atan+0x27c>
 8006f12:	4dac      	ldr	r5, [pc, #688]	; (80071c4 <atan+0x2ec>)
 8006f14:	4620      	mov	r0, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1c:	4baa      	ldr	r3, [pc, #680]	; (80071c8 <atan+0x2f0>)
 8006f1e:	429e      	cmp	r6, r3
 8006f20:	dc11      	bgt.n	8006f46 <atan+0x6e>
 8006f22:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006f26:	429e      	cmp	r6, r3
 8006f28:	dc0a      	bgt.n	8006f40 <atan+0x68>
 8006f2a:	a38b      	add	r3, pc, #556	; (adr r3, 8007158 <atan+0x280>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f7f9 f914 	bl	800015c <__adddf3>
 8006f34:	2200      	movs	r2, #0
 8006f36:	4ba5      	ldr	r3, [pc, #660]	; (80071cc <atan+0x2f4>)
 8006f38:	f7f9 fd56 	bl	80009e8 <__aeabi_dcmpgt>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d1e9      	bne.n	8006f14 <atan+0x3c>
 8006f40:	f04f 3aff 	mov.w	sl, #4294967295
 8006f44:	e027      	b.n	8006f96 <atan+0xbe>
 8006f46:	f000 f951 	bl	80071ec <fabs>
 8006f4a:	4ba1      	ldr	r3, [pc, #644]	; (80071d0 <atan+0x2f8>)
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	429e      	cmp	r6, r3
 8006f50:	460d      	mov	r5, r1
 8006f52:	f300 80b8 	bgt.w	80070c6 <atan+0x1ee>
 8006f56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006f5a:	429e      	cmp	r6, r3
 8006f5c:	f300 809c 	bgt.w	8007098 <atan+0x1c0>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	f7f9 f8fa 	bl	800015c <__adddf3>
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4b98      	ldr	r3, [pc, #608]	; (80071cc <atan+0x2f4>)
 8006f6c:	f7f9 f8f4 	bl	8000158 <__aeabi_dsub>
 8006f70:	2200      	movs	r2, #0
 8006f72:	4606      	mov	r6, r0
 8006f74:	460f      	mov	r7, r1
 8006f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 f8ed 	bl	800015c <__adddf3>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4630      	mov	r0, r6
 8006f88:	4639      	mov	r1, r7
 8006f8a:	f7f9 fbc7 	bl	800071c <__aeabi_ddiv>
 8006f8e:	f04f 0a00 	mov.w	sl, #0
 8006f92:	4604      	mov	r4, r0
 8006f94:	460d      	mov	r5, r1
 8006f96:	4622      	mov	r2, r4
 8006f98:	462b      	mov	r3, r5
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 fa93 	bl	80004c8 <__aeabi_dmul>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	4689      	mov	r9, r1
 8006faa:	f7f9 fa8d 	bl	80004c8 <__aeabi_dmul>
 8006fae:	a36c      	add	r3, pc, #432	; (adr r3, 8007160 <atan+0x288>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	460f      	mov	r7, r1
 8006fb8:	f7f9 fa86 	bl	80004c8 <__aeabi_dmul>
 8006fbc:	a36a      	add	r3, pc, #424	; (adr r3, 8007168 <atan+0x290>)
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f7f9 f8cb 	bl	800015c <__adddf3>
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	463b      	mov	r3, r7
 8006fca:	f7f9 fa7d 	bl	80004c8 <__aeabi_dmul>
 8006fce:	a368      	add	r3, pc, #416	; (adr r3, 8007170 <atan+0x298>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	f7f9 f8c2 	bl	800015c <__adddf3>
 8006fd8:	4632      	mov	r2, r6
 8006fda:	463b      	mov	r3, r7
 8006fdc:	f7f9 fa74 	bl	80004c8 <__aeabi_dmul>
 8006fe0:	a365      	add	r3, pc, #404	; (adr r3, 8007178 <atan+0x2a0>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	f7f9 f8b9 	bl	800015c <__adddf3>
 8006fea:	4632      	mov	r2, r6
 8006fec:	463b      	mov	r3, r7
 8006fee:	f7f9 fa6b 	bl	80004c8 <__aeabi_dmul>
 8006ff2:	a363      	add	r3, pc, #396	; (adr r3, 8007180 <atan+0x2a8>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f7f9 f8b0 	bl	800015c <__adddf3>
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	463b      	mov	r3, r7
 8007000:	f7f9 fa62 	bl	80004c8 <__aeabi_dmul>
 8007004:	a360      	add	r3, pc, #384	; (adr r3, 8007188 <atan+0x2b0>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	f7f9 f8a7 	bl	800015c <__adddf3>
 800700e:	4642      	mov	r2, r8
 8007010:	464b      	mov	r3, r9
 8007012:	f7f9 fa59 	bl	80004c8 <__aeabi_dmul>
 8007016:	a35e      	add	r3, pc, #376	; (adr r3, 8007190 <atan+0x2b8>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	4680      	mov	r8, r0
 800701e:	4689      	mov	r9, r1
 8007020:	4630      	mov	r0, r6
 8007022:	4639      	mov	r1, r7
 8007024:	f7f9 fa50 	bl	80004c8 <__aeabi_dmul>
 8007028:	a35b      	add	r3, pc, #364	; (adr r3, 8007198 <atan+0x2c0>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f7f9 f893 	bl	8000158 <__aeabi_dsub>
 8007032:	4632      	mov	r2, r6
 8007034:	463b      	mov	r3, r7
 8007036:	f7f9 fa47 	bl	80004c8 <__aeabi_dmul>
 800703a:	a359      	add	r3, pc, #356	; (adr r3, 80071a0 <atan+0x2c8>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 f88a 	bl	8000158 <__aeabi_dsub>
 8007044:	4632      	mov	r2, r6
 8007046:	463b      	mov	r3, r7
 8007048:	f7f9 fa3e 	bl	80004c8 <__aeabi_dmul>
 800704c:	a356      	add	r3, pc, #344	; (adr r3, 80071a8 <atan+0x2d0>)
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 f881 	bl	8000158 <__aeabi_dsub>
 8007056:	4632      	mov	r2, r6
 8007058:	463b      	mov	r3, r7
 800705a:	f7f9 fa35 	bl	80004c8 <__aeabi_dmul>
 800705e:	a354      	add	r3, pc, #336	; (adr r3, 80071b0 <atan+0x2d8>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f7f9 f878 	bl	8000158 <__aeabi_dsub>
 8007068:	4632      	mov	r2, r6
 800706a:	463b      	mov	r3, r7
 800706c:	f7f9 fa2c 	bl	80004c8 <__aeabi_dmul>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4640      	mov	r0, r8
 8007076:	4649      	mov	r1, r9
 8007078:	f7f9 f870 	bl	800015c <__adddf3>
 800707c:	4622      	mov	r2, r4
 800707e:	462b      	mov	r3, r5
 8007080:	f7f9 fa22 	bl	80004c8 <__aeabi_dmul>
 8007084:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	d144      	bne.n	8007118 <atan+0x240>
 800708e:	4620      	mov	r0, r4
 8007090:	4629      	mov	r1, r5
 8007092:	f7f9 f861 	bl	8000158 <__aeabi_dsub>
 8007096:	e734      	b.n	8006f02 <atan+0x2a>
 8007098:	2200      	movs	r2, #0
 800709a:	4b4c      	ldr	r3, [pc, #304]	; (80071cc <atan+0x2f4>)
 800709c:	f7f9 f85c 	bl	8000158 <__aeabi_dsub>
 80070a0:	2200      	movs	r2, #0
 80070a2:	4606      	mov	r6, r0
 80070a4:	460f      	mov	r7, r1
 80070a6:	4620      	mov	r0, r4
 80070a8:	4629      	mov	r1, r5
 80070aa:	4b48      	ldr	r3, [pc, #288]	; (80071cc <atan+0x2f4>)
 80070ac:	f7f9 f856 	bl	800015c <__adddf3>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4630      	mov	r0, r6
 80070b6:	4639      	mov	r1, r7
 80070b8:	f7f9 fb30 	bl	800071c <__aeabi_ddiv>
 80070bc:	f04f 0a01 	mov.w	sl, #1
 80070c0:	4604      	mov	r4, r0
 80070c2:	460d      	mov	r5, r1
 80070c4:	e767      	b.n	8006f96 <atan+0xbe>
 80070c6:	4b43      	ldr	r3, [pc, #268]	; (80071d4 <atan+0x2fc>)
 80070c8:	429e      	cmp	r6, r3
 80070ca:	da1a      	bge.n	8007102 <atan+0x22a>
 80070cc:	2200      	movs	r2, #0
 80070ce:	4b42      	ldr	r3, [pc, #264]	; (80071d8 <atan+0x300>)
 80070d0:	f7f9 f842 	bl	8000158 <__aeabi_dsub>
 80070d4:	2200      	movs	r2, #0
 80070d6:	4606      	mov	r6, r0
 80070d8:	460f      	mov	r7, r1
 80070da:	4620      	mov	r0, r4
 80070dc:	4629      	mov	r1, r5
 80070de:	4b3e      	ldr	r3, [pc, #248]	; (80071d8 <atan+0x300>)
 80070e0:	f7f9 f9f2 	bl	80004c8 <__aeabi_dmul>
 80070e4:	2200      	movs	r2, #0
 80070e6:	4b39      	ldr	r3, [pc, #228]	; (80071cc <atan+0x2f4>)
 80070e8:	f7f9 f838 	bl	800015c <__adddf3>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4630      	mov	r0, r6
 80070f2:	4639      	mov	r1, r7
 80070f4:	f7f9 fb12 	bl	800071c <__aeabi_ddiv>
 80070f8:	f04f 0a02 	mov.w	sl, #2
 80070fc:	4604      	mov	r4, r0
 80070fe:	460d      	mov	r5, r1
 8007100:	e749      	b.n	8006f96 <atan+0xbe>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	2000      	movs	r0, #0
 8007108:	4934      	ldr	r1, [pc, #208]	; (80071dc <atan+0x304>)
 800710a:	f7f9 fb07 	bl	800071c <__aeabi_ddiv>
 800710e:	f04f 0a03 	mov.w	sl, #3
 8007112:	4604      	mov	r4, r0
 8007114:	460d      	mov	r5, r1
 8007116:	e73e      	b.n	8006f96 <atan+0xbe>
 8007118:	4b31      	ldr	r3, [pc, #196]	; (80071e0 <atan+0x308>)
 800711a:	4e32      	ldr	r6, [pc, #200]	; (80071e4 <atan+0x30c>)
 800711c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f7f9 f818 	bl	8000158 <__aeabi_dsub>
 8007128:	4622      	mov	r2, r4
 800712a:	462b      	mov	r3, r5
 800712c:	f7f9 f814 	bl	8000158 <__aeabi_dsub>
 8007130:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	e9d6 0100 	ldrd	r0, r1, [r6]
 800713c:	f7f9 f80c 	bl	8000158 <__aeabi_dsub>
 8007140:	f1bb 0f00 	cmp.w	fp, #0
 8007144:	4604      	mov	r4, r0
 8007146:	460d      	mov	r5, r1
 8007148:	f6bf aee4 	bge.w	8006f14 <atan+0x3c>
 800714c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007150:	461d      	mov	r5, r3
 8007152:	e6df      	b.n	8006f14 <atan+0x3c>
 8007154:	4d24      	ldr	r5, [pc, #144]	; (80071e8 <atan+0x310>)
 8007156:	e6dd      	b.n	8006f14 <atan+0x3c>
 8007158:	8800759c 	.word	0x8800759c
 800715c:	7e37e43c 	.word	0x7e37e43c
 8007160:	e322da11 	.word	0xe322da11
 8007164:	3f90ad3a 	.word	0x3f90ad3a
 8007168:	24760deb 	.word	0x24760deb
 800716c:	3fa97b4b 	.word	0x3fa97b4b
 8007170:	a0d03d51 	.word	0xa0d03d51
 8007174:	3fb10d66 	.word	0x3fb10d66
 8007178:	c54c206e 	.word	0xc54c206e
 800717c:	3fb745cd 	.word	0x3fb745cd
 8007180:	920083ff 	.word	0x920083ff
 8007184:	3fc24924 	.word	0x3fc24924
 8007188:	5555550d 	.word	0x5555550d
 800718c:	3fd55555 	.word	0x3fd55555
 8007190:	2c6a6c2f 	.word	0x2c6a6c2f
 8007194:	bfa2b444 	.word	0xbfa2b444
 8007198:	52defd9a 	.word	0x52defd9a
 800719c:	3fadde2d 	.word	0x3fadde2d
 80071a0:	af749a6d 	.word	0xaf749a6d
 80071a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80071a8:	fe231671 	.word	0xfe231671
 80071ac:	3fbc71c6 	.word	0x3fbc71c6
 80071b0:	9998ebc4 	.word	0x9998ebc4
 80071b4:	3fc99999 	.word	0x3fc99999
 80071b8:	440fffff 	.word	0x440fffff
 80071bc:	7ff00000 	.word	0x7ff00000
 80071c0:	54442d18 	.word	0x54442d18
 80071c4:	bff921fb 	.word	0xbff921fb
 80071c8:	3fdbffff 	.word	0x3fdbffff
 80071cc:	3ff00000 	.word	0x3ff00000
 80071d0:	3ff2ffff 	.word	0x3ff2ffff
 80071d4:	40038000 	.word	0x40038000
 80071d8:	3ff80000 	.word	0x3ff80000
 80071dc:	bff00000 	.word	0xbff00000
 80071e0:	08007320 	.word	0x08007320
 80071e4:	08007300 	.word	0x08007300
 80071e8:	3ff921fb 	.word	0x3ff921fb

080071ec <fabs>:
 80071ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071f0:	4619      	mov	r1, r3
 80071f2:	4770      	bx	lr

080071f4 <_init>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	bf00      	nop
 80071f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fa:	bc08      	pop	{r3}
 80071fc:	469e      	mov	lr, r3
 80071fe:	4770      	bx	lr

08007200 <_fini>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	bf00      	nop
 8007204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007206:	bc08      	pop	{r3}
 8007208:	469e      	mov	lr, r3
 800720a:	4770      	bx	lr


Remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005894  08005894  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005894  08005894  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005894  08005894  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800589c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c4  20000060  080058fc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001424  080058fc  00021424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016170  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f9b  00000000  00000000  0003623c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ef  00000000  00000000  0003b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae42  00000000  00000000  0003c8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be4d  00000000  00000000  000576f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a497  00000000  00000000  00073546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c70  00000000  00000000  0010d9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00113650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080057c0 	.word	0x080057c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080057c0 	.word	0x080057c0

08000150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	1d3b      	adds	r3, r7, #4
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b2e      	ldr	r3, [pc, #184]	; (800021c <MX_ADC1_Init+0xcc>)
 8000162:	4a2f      	ldr	r2, [pc, #188]	; (8000220 <MX_ADC1_Init+0xd0>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000166:	4b2d      	ldr	r3, [pc, #180]	; (800021c <MX_ADC1_Init+0xcc>)
 8000168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800016c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016e:	4b2b      	ldr	r3, [pc, #172]	; (800021c <MX_ADC1_Init+0xcc>)
 8000170:	2201      	movs	r2, #1
 8000172:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000174:	4b29      	ldr	r3, [pc, #164]	; (800021c <MX_ADC1_Init+0xcc>)
 8000176:	2200      	movs	r2, #0
 8000178:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800017a:	4b28      	ldr	r3, [pc, #160]	; (800021c <MX_ADC1_Init+0xcc>)
 800017c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000182:	4b26      	ldr	r3, [pc, #152]	; (800021c <MX_ADC1_Init+0xcc>)
 8000184:	2200      	movs	r2, #0
 8000186:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000188:	4b24      	ldr	r3, [pc, #144]	; (800021c <MX_ADC1_Init+0xcc>)
 800018a:	2204      	movs	r2, #4
 800018c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018e:	4823      	ldr	r0, [pc, #140]	; (800021c <MX_ADC1_Init+0xcc>)
 8000190:	f001 fa54 	bl	800163c <HAL_ADC_Init>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800019a:	f000 fed7 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800019e:	2306      	movs	r3, #6
 80001a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001a2:	2301      	movs	r3, #1
 80001a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80001a6:	2301      	movs	r3, #1
 80001a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	4619      	mov	r1, r3
 80001ae:	481b      	ldr	r0, [pc, #108]	; (800021c <MX_ADC1_Init+0xcc>)
 80001b0:	f001 fc16 	bl	80019e0 <HAL_ADC_ConfigChannel>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001ba:	f000 fec7 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001be:	2301      	movs	r3, #1
 80001c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	4619      	mov	r1, r3
 80001ca:	4814      	ldr	r0, [pc, #80]	; (800021c <MX_ADC1_Init+0xcc>)
 80001cc:	f001 fc08 	bl	80019e0 <HAL_ADC_ConfigChannel>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d6:	f000 feb9 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80001da:	2303      	movs	r3, #3
 80001dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001de:	2303      	movs	r3, #3
 80001e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	4619      	mov	r1, r3
 80001e6:	480d      	ldr	r0, [pc, #52]	; (800021c <MX_ADC1_Init+0xcc>)
 80001e8:	f001 fbfa 	bl	80019e0 <HAL_ADC_ConfigChannel>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001f2:	f000 feab 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001f6:	2302      	movs	r3, #2
 80001f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001fa:	2304      	movs	r3, #4
 80001fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	4619      	mov	r1, r3
 8000202:	4806      	ldr	r0, [pc, #24]	; (800021c <MX_ADC1_Init+0xcc>)
 8000204:	f001 fbec 	bl	80019e0 <HAL_ADC_ConfigChannel>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800020e:	f000 fe9d 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	2000007c 	.word	0x2000007c
 8000220:	40012400 	.word	0x40012400

08000224 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a29      	ldr	r2, [pc, #164]	; (80002e4 <HAL_ADC_MspInit+0xc0>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d14a      	bne.n	80002da <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000244:	4b28      	ldr	r3, [pc, #160]	; (80002e8 <HAL_ADC_MspInit+0xc4>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a27      	ldr	r2, [pc, #156]	; (80002e8 <HAL_ADC_MspInit+0xc4>)
 800024a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <HAL_ADC_MspInit+0xc4>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800025c:	4b22      	ldr	r3, [pc, #136]	; (80002e8 <HAL_ADC_MspInit+0xc4>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a21      	ldr	r2, [pc, #132]	; (80002e8 <HAL_ADC_MspInit+0xc4>)
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <HAL_ADC_MspInit+0xc4>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0304 	and.w	r3, r3, #4
 8000270:	60bb      	str	r3, [r7, #8]
 8000272:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 8000274:	234e      	movs	r3, #78	; 0x4e
 8000276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000278:	2303      	movs	r3, #3
 800027a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	4619      	mov	r1, r3
 8000282:	481a      	ldr	r0, [pc, #104]	; (80002ec <HAL_ADC_MspInit+0xc8>)
 8000284:	f002 f874 	bl	8002370 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000288:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 800028a:	4a1a      	ldr	r2, [pc, #104]	; (80002f4 <HAL_ADC_MspInit+0xd0>)
 800028c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800028e:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 8000290:	2200      	movs	r2, #0
 8000292:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 80002a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 80002aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 80002b2:	2220      	movs	r2, #32
 80002b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 80002b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002be:	480c      	ldr	r0, [pc, #48]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 80002c0:	f001 fe68 	bl	8001f94 <HAL_DMA_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80002ca:	f000 fe3f 	bl	8000f4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 80002d2:	621a      	str	r2, [r3, #32]
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <HAL_ADC_MspInit+0xcc>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002da:	bf00      	nop
 80002dc:	3720      	adds	r7, #32
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40012400 	.word	0x40012400
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40010800 	.word	0x40010800
 80002f0:	200000ac 	.word	0x200000ac
 80002f4:	40020008 	.word	0x40020008

080002f8 <Window_Filter>:
struct _Filter Filter_Thr, Filter_Pitch, Filter_Roll, Filter_Yaw;
struct _Offset offset;
extern uint16_t ADC_Value[5];

//滑动窗口滤波
void Window_Filter(struct _Rc *rc){
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]

	static uint16_t count = 0;

	//丢掉旧数据
	Filter_Thr.sum -= Filter_Thr.old[count];
 8000300:	4b5c      	ldr	r3, [pc, #368]	; (8000474 <Window_Filter+0x17c>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b5c      	ldr	r3, [pc, #368]	; (8000478 <Window_Filter+0x180>)
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	495a      	ldr	r1, [pc, #360]	; (8000474 <Window_Filter+0x17c>)
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	440b      	add	r3, r1
 800030e:	889b      	ldrh	r3, [r3, #4]
 8000310:	1ad3      	subs	r3, r2, r3
 8000312:	4a58      	ldr	r2, [pc, #352]	; (8000474 <Window_Filter+0x17c>)
 8000314:	6013      	str	r3, [r2, #0]
	Filter_Pitch.sum -= Filter_Pitch.old[count];
 8000316:	4b59      	ldr	r3, [pc, #356]	; (800047c <Window_Filter+0x184>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b57      	ldr	r3, [pc, #348]	; (8000478 <Window_Filter+0x180>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	4957      	ldr	r1, [pc, #348]	; (800047c <Window_Filter+0x184>)
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	440b      	add	r3, r1
 8000324:	889b      	ldrh	r3, [r3, #4]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	4a54      	ldr	r2, [pc, #336]	; (800047c <Window_Filter+0x184>)
 800032a:	6013      	str	r3, [r2, #0]
	Filter_Roll.sum -= Filter_Roll.old[count];
 800032c:	4b54      	ldr	r3, [pc, #336]	; (8000480 <Window_Filter+0x188>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	4b51      	ldr	r3, [pc, #324]	; (8000478 <Window_Filter+0x180>)
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	4952      	ldr	r1, [pc, #328]	; (8000480 <Window_Filter+0x188>)
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	440b      	add	r3, r1
 800033a:	889b      	ldrh	r3, [r3, #4]
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	4a50      	ldr	r2, [pc, #320]	; (8000480 <Window_Filter+0x188>)
 8000340:	6013      	str	r3, [r2, #0]
	Filter_Yaw.sum -= Filter_Yaw.old[count];
 8000342:	4b50      	ldr	r3, [pc, #320]	; (8000484 <Window_Filter+0x18c>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b4c      	ldr	r3, [pc, #304]	; (8000478 <Window_Filter+0x180>)
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	494e      	ldr	r1, [pc, #312]	; (8000484 <Window_Filter+0x18c>)
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	440b      	add	r3, r1
 8000350:	889b      	ldrh	r3, [r3, #4]
 8000352:	1ad3      	subs	r3, r2, r3
 8000354:	4a4b      	ldr	r2, [pc, #300]	; (8000484 <Window_Filter+0x18c>)
 8000356:	6013      	str	r3, [r2, #0]


	//加上新数据,新数据要加到sum里，也要存到old里
	Filter_Thr.old[count] = rc->THR;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800035e:	4b46      	ldr	r3, [pc, #280]	; (8000478 <Window_Filter+0x180>)
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	b291      	uxth	r1, r2
 8000364:	4a43      	ldr	r2, [pc, #268]	; (8000474 <Window_Filter+0x17c>)
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	4413      	add	r3, r2
 800036a:	460a      	mov	r2, r1
 800036c:	809a      	strh	r2, [r3, #4]
	Filter_Pitch.old[count] = rc->PIT;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000374:	4b40      	ldr	r3, [pc, #256]	; (8000478 <Window_Filter+0x180>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	b291      	uxth	r1, r2
 800037a:	4a40      	ldr	r2, [pc, #256]	; (800047c <Window_Filter+0x184>)
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	4413      	add	r3, r2
 8000380:	460a      	mov	r2, r1
 8000382:	809a      	strh	r2, [r3, #4]
	Filter_Roll.old[count] = rc->ROL;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800038a:	4b3b      	ldr	r3, [pc, #236]	; (8000478 <Window_Filter+0x180>)
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	b291      	uxth	r1, r2
 8000390:	4a3b      	ldr	r2, [pc, #236]	; (8000480 <Window_Filter+0x188>)
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	4413      	add	r3, r2
 8000396:	460a      	mov	r2, r1
 8000398:	809a      	strh	r2, [r3, #4]
	Filter_Yaw.old[count] = rc->YAW;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80003a0:	4b35      	ldr	r3, [pc, #212]	; (8000478 <Window_Filter+0x180>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	b291      	uxth	r1, r2
 80003a6:	4a37      	ldr	r2, [pc, #220]	; (8000484 <Window_Filter+0x18c>)
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	4413      	add	r3, r2
 80003ac:	460a      	mov	r2, r1
 80003ae:	809a      	strh	r2, [r3, #4]


	Filter_Thr.sum += Filter_Thr.old[count];
 80003b0:	4b30      	ldr	r3, [pc, #192]	; (8000474 <Window_Filter+0x17c>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b30      	ldr	r3, [pc, #192]	; (8000478 <Window_Filter+0x180>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	492e      	ldr	r1, [pc, #184]	; (8000474 <Window_Filter+0x17c>)
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	440b      	add	r3, r1
 80003be:	889b      	ldrh	r3, [r3, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	4a2c      	ldr	r2, [pc, #176]	; (8000474 <Window_Filter+0x17c>)
 80003c4:	6013      	str	r3, [r2, #0]
	Filter_Pitch.sum += Filter_Pitch.old[count];
 80003c6:	4b2d      	ldr	r3, [pc, #180]	; (800047c <Window_Filter+0x184>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <Window_Filter+0x180>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	492b      	ldr	r1, [pc, #172]	; (800047c <Window_Filter+0x184>)
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	440b      	add	r3, r1
 80003d4:	889b      	ldrh	r3, [r3, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	4a28      	ldr	r2, [pc, #160]	; (800047c <Window_Filter+0x184>)
 80003da:	6013      	str	r3, [r2, #0]
	Filter_Roll.sum += Filter_Roll.old[count];
 80003dc:	4b28      	ldr	r3, [pc, #160]	; (8000480 <Window_Filter+0x188>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	4b25      	ldr	r3, [pc, #148]	; (8000478 <Window_Filter+0x180>)
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	4926      	ldr	r1, [pc, #152]	; (8000480 <Window_Filter+0x188>)
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	440b      	add	r3, r1
 80003ea:	889b      	ldrh	r3, [r3, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <Window_Filter+0x188>)
 80003f0:	6013      	str	r3, [r2, #0]
	Filter_Yaw.sum += Filter_Yaw.old[count];
 80003f2:	4b24      	ldr	r3, [pc, #144]	; (8000484 <Window_Filter+0x18c>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	4b20      	ldr	r3, [pc, #128]	; (8000478 <Window_Filter+0x180>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	4922      	ldr	r1, [pc, #136]	; (8000484 <Window_Filter+0x18c>)
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	440b      	add	r3, r1
 8000400:	889b      	ldrh	r3, [r3, #4]
 8000402:	4413      	add	r3, r2
 8000404:	4a1f      	ldr	r2, [pc, #124]	; (8000484 <Window_Filter+0x18c>)
 8000406:	6013      	str	r3, [r2, #0]

	//求平均值
	rc->THR = Filter_Thr.sum  / Filter_Num;
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <Window_Filter+0x17c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a1e      	ldr	r2, [pc, #120]	; (8000488 <Window_Filter+0x190>)
 800040e:	fba2 2303 	umull	r2, r3, r2, r3
 8000412:	08db      	lsrs	r3, r3, #3
 8000414:	b21a      	sxth	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	801a      	strh	r2, [r3, #0]
	rc->PIT = Filter_Pitch.sum  / Filter_Num;
 800041a:	4b18      	ldr	r3, [pc, #96]	; (800047c <Window_Filter+0x184>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <Window_Filter+0x190>)
 8000420:	fba2 2303 	umull	r2, r3, r2, r3
 8000424:	08db      	lsrs	r3, r3, #3
 8000426:	b21a      	sxth	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	80da      	strh	r2, [r3, #6]
	rc->ROL = Filter_Roll.sum  / Filter_Num;
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <Window_Filter+0x188>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a15      	ldr	r2, [pc, #84]	; (8000488 <Window_Filter+0x190>)
 8000432:	fba2 2303 	umull	r2, r3, r2, r3
 8000436:	08db      	lsrs	r3, r3, #3
 8000438:	b21a      	sxth	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	809a      	strh	r2, [r3, #4]
	rc->YAW = Filter_Yaw.sum  / Filter_Num;
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <Window_Filter+0x18c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a11      	ldr	r2, [pc, #68]	; (8000488 <Window_Filter+0x190>)
 8000444:	fba2 2303 	umull	r2, r3, r2, r3
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	b21a      	sxth	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	805a      	strh	r2, [r3, #2]

	//判断索引值的范围
	count++;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <Window_Filter+0x180>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	b29a      	uxth	r2, r3
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <Window_Filter+0x180>)
 800045a:	801a      	strh	r2, [r3, #0]
	if(count >= Filter_Num){
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <Window_Filter+0x180>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	2b09      	cmp	r3, #9
 8000462:	d902      	bls.n	800046a <Window_Filter+0x172>
		count = 0;
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <Window_Filter+0x180>)
 8000466:	2200      	movs	r2, #0
 8000468:	801a      	strh	r2, [r3, #0]
	}
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	20000104 	.word	0x20000104
 8000478:	2000016c 	.word	0x2000016c
 800047c:	2000011c 	.word	0x2000011c
 8000480:	20000134 	.word	0x20000134
 8000484:	2000014c 	.word	0x2000014c
 8000488:	cccccccd 	.word	0xcccccccd

0800048c <Mid_Offset>:

//长按key1 中点校准函数
void Mid_Offset(struct _Rc *rc){
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	static uint16_t sum_thr = 0,  sum_pit = 0,  sum_roll = 0,  sum_yaw = 0, count = 0;
	//判断按键按下,内部上拉模式
	if(Read_Key == GPIO_PIN_RESET){
 8000494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000498:	4853      	ldr	r0, [pc, #332]	; (80005e8 <Mid_Offset+0x15c>)
 800049a:	f002 f8ed 	bl	8002678 <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	f040 809c 	bne.w	80005de <Mid_Offset+0x152>
		HAL_Delay(1000);//长按1秒
 80004a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004aa:	f001 f8a3 	bl	80015f4 <HAL_Delay>
		if(Read_Key == GPIO_PIN_RESET){
 80004ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004b2:	484d      	ldr	r0, [pc, #308]	; (80005e8 <Mid_Offset+0x15c>)
 80004b4:	f002 f8e0 	bl	8002678 <HAL_GPIO_ReadPin>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 808f 	bne.w	80005de <Mid_Offset+0x152>
			//长按1秒，开始校准中点。偏差值=50次的和 / 50  - 1500
			if(count == 0){
 80004c0:	4b4a      	ldr	r3, [pc, #296]	; (80005ec <Mid_Offset+0x160>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d11b      	bne.n	8000500 <Mid_Offset+0x74>
				sum_thr = 0;
 80004c8:	4b49      	ldr	r3, [pc, #292]	; (80005f0 <Mid_Offset+0x164>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	801a      	strh	r2, [r3, #0]
				sum_pit = 0;
 80004ce:	4b49      	ldr	r3, [pc, #292]	; (80005f4 <Mid_Offset+0x168>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	801a      	strh	r2, [r3, #0]
				sum_roll = 0;
 80004d4:	4b48      	ldr	r3, [pc, #288]	; (80005f8 <Mid_Offset+0x16c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	801a      	strh	r2, [r3, #0]
				sum_yaw = 0;
 80004da:	4b48      	ldr	r3, [pc, #288]	; (80005fc <Mid_Offset+0x170>)
 80004dc:	2200      	movs	r2, #0
 80004de:	801a      	strh	r2, [r3, #0]
				offset.PIT = 0;
 80004e0:	4b47      	ldr	r3, [pc, #284]	; (8000600 <Mid_Offset+0x174>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	80da      	strh	r2, [r3, #6]
				offset.THR = 0;
 80004e6:	4b46      	ldr	r3, [pc, #280]	; (8000600 <Mid_Offset+0x174>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	801a      	strh	r2, [r3, #0]
				offset.ROL = 0;
 80004ec:	4b44      	ldr	r3, [pc, #272]	; (8000600 <Mid_Offset+0x174>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	809a      	strh	r2, [r3, #4]
				offset.YAW = 0;
 80004f2:	4b43      	ldr	r3, [pc, #268]	; (8000600 <Mid_Offset+0x174>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	805a      	strh	r2, [r3, #2]

				count = 1;
 80004f8:	4b3c      	ldr	r3, [pc, #240]	; (80005ec <Mid_Offset+0x160>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	801a      	strh	r2, [r3, #0]
 80004fe:	e02d      	b.n	800055c <Mid_Offset+0xd0>
			}else{
				//累加、计数
				count ++;
 8000500:	4b3a      	ldr	r3, [pc, #232]	; (80005ec <Mid_Offset+0x160>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	b29a      	uxth	r2, r3
 8000508:	4b38      	ldr	r3, [pc, #224]	; (80005ec <Mid_Offset+0x160>)
 800050a:	801a      	strh	r2, [r3, #0]
				sum_thr += rc->THR;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b36      	ldr	r3, [pc, #216]	; (80005f0 <Mid_Offset+0x164>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	4413      	add	r3, r2
 800051a:	b29a      	uxth	r2, r3
 800051c:	4b34      	ldr	r3, [pc, #208]	; (80005f0 <Mid_Offset+0x164>)
 800051e:	801a      	strh	r2, [r3, #0]
				sum_pit += rc->PIT;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b32      	ldr	r3, [pc, #200]	; (80005f4 <Mid_Offset+0x168>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	4413      	add	r3, r2
 800052e:	b29a      	uxth	r2, r3
 8000530:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <Mid_Offset+0x168>)
 8000532:	801a      	strh	r2, [r3, #0]
				sum_roll +=rc->ROL;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <Mid_Offset+0x16c>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	4413      	add	r3, r2
 8000542:	b29a      	uxth	r2, r3
 8000544:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <Mid_Offset+0x16c>)
 8000546:	801a      	strh	r2, [r3, #0]
				sum_yaw += rc->YAW;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800054e:	b29a      	uxth	r2, r3
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <Mid_Offset+0x170>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	4413      	add	r3, r2
 8000556:	b29a      	uxth	r2, r3
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <Mid_Offset+0x170>)
 800055a:	801a      	strh	r2, [r3, #0]
			}
			if(count ==51){
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <Mid_Offset+0x160>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	2b33      	cmp	r3, #51	; 0x33
 8000562:	d13c      	bne.n	80005de <Mid_Offset+0x152>
				count --;
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <Mid_Offset+0x160>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	3b01      	subs	r3, #1
 800056a:	b29a      	uxth	r2, r3
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <Mid_Offset+0x160>)
 800056e:	801a      	strh	r2, [r3, #0]
				offset.THR = sum_thr / count  -1000;
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <Mid_Offset+0x164>)
 8000572:	881a      	ldrh	r2, [r3, #0]
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <Mid_Offset+0x160>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	fbb2 f3f3 	udiv	r3, r2, r3
 800057c:	b29b      	uxth	r3, r3
 800057e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000582:	b29b      	uxth	r3, r3
 8000584:	b21a      	sxth	r2, r3
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <Mid_Offset+0x174>)
 8000588:	801a      	strh	r2, [r3, #0]
				offset.PIT   = sum_pit / count  -1500;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <Mid_Offset+0x168>)
 800058c:	881a      	ldrh	r2, [r3, #0]
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <Mid_Offset+0x160>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	fbb2 f3f3 	udiv	r3, r2, r3
 8000596:	b29b      	uxth	r3, r3
 8000598:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800059c:	b29b      	uxth	r3, r3
 800059e:	b21a      	sxth	r2, r3
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <Mid_Offset+0x174>)
 80005a2:	80da      	strh	r2, [r3, #6]
				offset.ROL = sum_roll / count  -1500;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <Mid_Offset+0x16c>)
 80005a6:	881a      	ldrh	r2, [r3, #0]
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <Mid_Offset+0x160>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	b21a      	sxth	r2, r3
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <Mid_Offset+0x174>)
 80005bc:	809a      	strh	r2, [r3, #4]
				offset.YAW = sum_yaw / count  -1500;
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <Mid_Offset+0x170>)
 80005c0:	881a      	ldrh	r2, [r3, #0]
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <Mid_Offset+0x160>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <Mid_Offset+0x174>)
 80005d6:	805a      	strh	r2, [r3, #2]
				count = 0;
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <Mid_Offset+0x160>)
 80005da:	2200      	movs	r2, #0
 80005dc:	801a      	strh	r2, [r3, #0]
			}
		}

	}

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40010800 	.word	0x40010800
 80005ec:	2000016e 	.word	0x2000016e
 80005f0:	20000170 	.word	0x20000170
 80005f4:	20000172 	.word	0x20000172
 80005f8:	20000174 	.word	0x20000174
 80005fc:	20000176 	.word	0x20000176
 8000600:	20000164 	.word	0x20000164

08000604 <Limit>:
//限幅的函数
void Limit(struct _Rc *rc){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	rc->THR = (rc ->THR < 1000) ? 1000 : rc->THR;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000616:	bfb8      	it	lt
 8000618:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
 800061c:	b21a      	sxth	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	801a      	strh	r2, [r3, #0]
	rc->THR = (rc ->THR > 2000) ? 2000 : rc->THR;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000628:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800062c:	bfa8      	it	ge
 800062e:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 8000632:	b21a      	sxth	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	801a      	strh	r2, [r3, #0]

	rc->PIT = (rc ->PIT < 1000) ? 1000 : rc->PIT;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800063e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000642:	bfb8      	it	lt
 8000644:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
 8000648:	b21a      	sxth	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	80da      	strh	r2, [r3, #6]
	rc->PIT = (rc ->PIT > 2000) ? 2000 : rc->PIT;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000654:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000658:	bfa8      	it	ge
 800065a:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 800065e:	b21a      	sxth	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	80da      	strh	r2, [r3, #6]

	rc->ROL = (rc ->ROL < 1000) ? 1000 : rc->ROL;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800066a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800066e:	bfb8      	it	lt
 8000670:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
 8000674:	b21a      	sxth	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	809a      	strh	r2, [r3, #4]
	rc->ROL = (rc ->ROL > 2000) ? 2000 : rc->ROL;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000680:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000684:	bfa8      	it	ge
 8000686:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 800068a:	b21a      	sxth	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	809a      	strh	r2, [r3, #4]

	rc->YAW = (rc ->YAW < 1000) ? 1000 : rc->YAW;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800069a:	bfb8      	it	lt
 800069c:	f44f 737a 	movlt.w	r3, #1000	; 0x3e8
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	805a      	strh	r2, [r3, #2]
	rc->YAW = (rc ->YAW > 2000) ? 2000 : rc->YAW;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80006ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006b0:	bfa8      	it	ge
 80006b2:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	805a      	strh	r2, [r3, #2]

}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <Mid_Limit>:
//中点限幅
void Mid_Limit(struct _Rc *rc){
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
	if(rc->THR >1450 && rc->THR <1550){
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d4:	f240 52aa 	movw	r2, #1450	; 0x5aa
 80006d8:	4293      	cmp	r3, r2
 80006da:	dd0a      	ble.n	80006f2 <Mid_Limit+0x2c>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e2:	f240 620d 	movw	r2, #1549	; 0x60d
 80006e6:	4293      	cmp	r3, r2
 80006e8:	dc03      	bgt.n	80006f2 <Mid_Limit+0x2c>

		rc->THR = 1500;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006f0:	801a      	strh	r2, [r3, #0]
	}

	if(rc->PIT >1450 && rc->PIT <1550){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80006f8:	f240 52aa 	movw	r2, #1450	; 0x5aa
 80006fc:	4293      	cmp	r3, r2
 80006fe:	dd0a      	ble.n	8000716 <Mid_Limit+0x50>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000706:	f240 620d 	movw	r2, #1549	; 0x60d
 800070a:	4293      	cmp	r3, r2
 800070c:	dc03      	bgt.n	8000716 <Mid_Limit+0x50>

		rc->PIT = 1500;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000714:	80da      	strh	r2, [r3, #6]
	}

	if(rc->ROL >1450 && rc->ROL <1550){
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800071c:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8000720:	4293      	cmp	r3, r2
 8000722:	dd0a      	ble.n	800073a <Mid_Limit+0x74>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800072a:	f240 620d 	movw	r2, #1549	; 0x60d
 800072e:	4293      	cmp	r3, r2
 8000730:	dc03      	bgt.n	800073a <Mid_Limit+0x74>

		rc->ROL = 1500;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000738:	809a      	strh	r2, [r3, #4]
	}

	if(rc->YAW >1450 && rc->YAW <1550){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000740:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8000744:	4293      	cmp	r3, r2
 8000746:	dd0a      	ble.n	800075e <Mid_Limit+0x98>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800074e:	f240 620d 	movw	r2, #1549	; 0x60d
 8000752:	4293      	cmp	r3, r2
 8000754:	dc03      	bgt.n	800075e <Mid_Limit+0x98>

		rc->YAW = 1500;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800075c:	805a      	strh	r2, [r3, #2]
	}

}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <KeyPress>:
//按键微调
void KeyPress(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

	if(Read_Key_U  == GPIO_PIN_RESET ){
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	4820      	ldr	r0, [pc, #128]	; (80007f4 <KeyPress+0x8c>)
 8000772:	f001 ff81 	bl	8002678 <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d108      	bne.n	800078e <KeyPress+0x26>
		//微调PIT,前进
		offset.PIT = offset.PIT  - 10;
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <KeyPress+0x90>)
 800077e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000782:	b29b      	uxth	r3, r3
 8000784:	3b0a      	subs	r3, #10
 8000786:	b29b      	uxth	r3, r3
 8000788:	b21a      	sxth	r2, r3
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <KeyPress+0x90>)
 800078c:	80da      	strh	r2, [r3, #6]
	}
	if(Read_Key_D  == GPIO_PIN_RESET){
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <KeyPress+0x8c>)
 8000794:	f001 ff70 	bl	8002678 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d108      	bne.n	80007b0 <KeyPress+0x48>
		//微调PIT,前进
		offset.PIT = offset.PIT  + 10;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <KeyPress+0x90>)
 80007a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	330a      	adds	r3, #10
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <KeyPress+0x90>)
 80007ae:	80da      	strh	r2, [r3, #6]
	}
	if(Read_Key_L ==GPIO_PIN_RESET ){
 80007b0:	2101      	movs	r1, #1
 80007b2:	4812      	ldr	r0, [pc, #72]	; (80007fc <KeyPress+0x94>)
 80007b4:	f001 ff60 	bl	8002678 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d108      	bne.n	80007d0 <KeyPress+0x68>
		//左移，加
		offset.ROL = offset.ROL + 10;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <KeyPress+0x90>)
 80007c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	330a      	adds	r3, #10
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <KeyPress+0x90>)
 80007ce:	809a      	strh	r2, [r3, #4]
	}
	if(Read_Key_R ==GPIO_PIN_RESET ){
 80007d0:	2102      	movs	r1, #2
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <KeyPress+0x94>)
 80007d4:	f001 ff50 	bl	8002678 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d108      	bne.n	80007f0 <KeyPress+0x88>
		//右移，加
		offset.ROL = offset.ROL - 10;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <KeyPress+0x90>)
 80007e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	3b0a      	subs	r3, #10
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <KeyPress+0x90>)
 80007ee:	809a      	strh	r2, [r3, #4]
	}
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40011000 	.word	0x40011000
 80007f8:	20000164 	.word	0x20000164
 80007fc:	40010c00 	.word	0x40010c00

08000800 <RemoteData>:

//封装数据
void RemoteData(uint8_t *remote_send){
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	72bb      	strb	r3, [r7, #10]
	uint32_t check_sum = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
	//帧头
	remote_send[index++] = 0xAA;
 8000810:	7abb      	ldrb	r3, [r7, #10]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	72ba      	strb	r2, [r7, #10]
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	22aa      	movs	r2, #170	; 0xaa
 800081e:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0xAF;
 8000820:	7abb      	ldrb	r3, [r7, #10]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	72ba      	strb	r2, [r7, #10]
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	22af      	movs	r2, #175	; 0xaf
 800082e:	701a      	strb	r2, [r3, #0]
	//功能字
	remote_send[index++] = 0x03;
 8000830:	7abb      	ldrb	r3, [r7, #10]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	72ba      	strb	r2, [r7, #10]
 8000836:	461a      	mov	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	2203      	movs	r2, #3
 800083e:	701a      	strb	r2, [r3, #0]

	//长度
	remote_send[index++] = 0x0;
 8000840:	7abb      	ldrb	r3, [r7, #10]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	72ba      	strb	r2, [r7, #10]
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4413      	add	r3, r2
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]

	//数据
	remote_send[index++] = (uint8_t)(rc.THR >>8);
 8000850:	4b81      	ldr	r3, [pc, #516]	; (8000a58 <RemoteData+0x258>)
 8000852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000856:	121b      	asrs	r3, r3, #8
 8000858:	b21a      	sxth	r2, r3
 800085a:	7abb      	ldrb	r3, [r7, #10]
 800085c:	1c59      	adds	r1, r3, #1
 800085e:	72b9      	strb	r1, [r7, #10]
 8000860:	4619      	mov	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	440b      	add	r3, r1
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = (uint8_t)rc.THR;
 800086a:	4b7b      	ldr	r3, [pc, #492]	; (8000a58 <RemoteData+0x258>)
 800086c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000870:	7abb      	ldrb	r3, [r7, #10]
 8000872:	1c59      	adds	r1, r3, #1
 8000874:	72b9      	strb	r1, [r7, #10]
 8000876:	4619      	mov	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	440b      	add	r3, r1
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	701a      	strb	r2, [r3, #0]

	remote_send[index++] = (uint8_t)(rc.YAW >>8);
 8000880:	4b75      	ldr	r3, [pc, #468]	; (8000a58 <RemoteData+0x258>)
 8000882:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000886:	121b      	asrs	r3, r3, #8
 8000888:	b21a      	sxth	r2, r3
 800088a:	7abb      	ldrb	r3, [r7, #10]
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	72b9      	strb	r1, [r7, #10]
 8000890:	4619      	mov	r1, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	440b      	add	r3, r1
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = (uint8_t)rc.YAW;
 800089a:	4b6f      	ldr	r3, [pc, #444]	; (8000a58 <RemoteData+0x258>)
 800089c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80008a0:	7abb      	ldrb	r3, [r7, #10]
 80008a2:	1c59      	adds	r1, r3, #1
 80008a4:	72b9      	strb	r1, [r7, #10]
 80008a6:	4619      	mov	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	440b      	add	r3, r1
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	701a      	strb	r2, [r3, #0]

	remote_send[index++] = (uint8_t)(rc.ROL >>8);
 80008b0:	4b69      	ldr	r3, [pc, #420]	; (8000a58 <RemoteData+0x258>)
 80008b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008b6:	121b      	asrs	r3, r3, #8
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7abb      	ldrb	r3, [r7, #10]
 80008bc:	1c59      	adds	r1, r3, #1
 80008be:	72b9      	strb	r1, [r7, #10]
 80008c0:	4619      	mov	r1, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	440b      	add	r3, r1
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = (uint8_t)rc.ROL;
 80008ca:	4b63      	ldr	r3, [pc, #396]	; (8000a58 <RemoteData+0x258>)
 80008cc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80008d0:	7abb      	ldrb	r3, [r7, #10]
 80008d2:	1c59      	adds	r1, r3, #1
 80008d4:	72b9      	strb	r1, [r7, #10]
 80008d6:	4619      	mov	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	440b      	add	r3, r1
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	701a      	strb	r2, [r3, #0]

	remote_send[index++] = (uint8_t)(rc.PIT >>8);
 80008e0:	4b5d      	ldr	r3, [pc, #372]	; (8000a58 <RemoteData+0x258>)
 80008e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008e6:	121b      	asrs	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	7abb      	ldrb	r3, [r7, #10]
 80008ec:	1c59      	adds	r1, r3, #1
 80008ee:	72b9      	strb	r1, [r7, #10]
 80008f0:	4619      	mov	r1, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	440b      	add	r3, r1
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = (uint8_t)rc.PIT;
 80008fa:	4b57      	ldr	r3, [pc, #348]	; (8000a58 <RemoteData+0x258>)
 80008fc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000900:	7abb      	ldrb	r3, [r7, #10]
 8000902:	1c59      	adds	r1, r3, #1
 8000904:	72b9      	strb	r1, [r7, #10]
 8000906:	4619      	mov	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	440b      	add	r3, r1
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	701a      	strb	r2, [r3, #0]

	//辅助通道，12个字节
	remote_send[index++] = 0x0;
 8000910:	7abb      	ldrb	r3, [r7, #10]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	72ba      	strb	r2, [r7, #10]
 8000916:	461a      	mov	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 8000920:	7abb      	ldrb	r3, [r7, #10]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	72ba      	strb	r2, [r7, #10]
 8000926:	461a      	mov	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4413      	add	r3, r2
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	72ba      	strb	r2, [r7, #10]
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 8000940:	7abb      	ldrb	r3, [r7, #10]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	72ba      	strb	r2, [r7, #10]
 8000946:	461a      	mov	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 8000950:	7abb      	ldrb	r3, [r7, #10]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	72ba      	strb	r2, [r7, #10]
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 8000960:	7abb      	ldrb	r3, [r7, #10]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	72ba      	strb	r2, [r7, #10]
 8000966:	461a      	mov	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 8000970:	7abb      	ldrb	r3, [r7, #10]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	72ba      	strb	r2, [r7, #10]
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 8000980:	7abb      	ldrb	r3, [r7, #10]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	72ba      	strb	r2, [r7, #10]
 8000986:	461a      	mov	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 8000990:	7abb      	ldrb	r3, [r7, #10]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	72ba      	strb	r2, [r7, #10]
 8000996:	461a      	mov	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 80009a0:	7abb      	ldrb	r3, [r7, #10]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	72ba      	strb	r2, [r7, #10]
 80009a6:	461a      	mov	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 80009b0:	7abb      	ldrb	r3, [r7, #10]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	72ba      	strb	r2, [r7, #10]
 80009b6:	461a      	mov	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
	remote_send[index++] = 0x0;
 80009c0:	7abb      	ldrb	r3, [r7, #10]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	72ba      	strb	r2, [r7, #10]
 80009c6:	461a      	mov	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]

	//重新计算数据长度
	remote_send[3] = index - 8;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3303      	adds	r3, #3
 80009d4:	7aba      	ldrb	r2, [r7, #10]
 80009d6:	3a08      	subs	r2, #8
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	701a      	strb	r2, [r3, #0]

	//校验和
	for(uint8_t i = 0; i < index; i++){
 80009dc:	2300      	movs	r3, #0
 80009de:	72fb      	strb	r3, [r7, #11]
 80009e0:	e00a      	b.n	80009f8 <RemoteData+0x1f8>
		check_sum +=remote_send[i];
 80009e2:	7afb      	ldrb	r3, [r7, #11]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < index; i++){
 80009f2:	7afb      	ldrb	r3, [r7, #11]
 80009f4:	3301      	adds	r3, #1
 80009f6:	72fb      	strb	r3, [r7, #11]
 80009f8:	7afa      	ldrb	r2, [r7, #11]
 80009fa:	7abb      	ldrb	r3, [r7, #10]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d3f0      	bcc.n	80009e2 <RemoteData+0x1e2>
	}
	remote_send[index++] =(uint8_t) (check_sum >> 24);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	0e1a      	lsrs	r2, r3, #24
 8000a04:	7abb      	ldrb	r3, [r7, #10]
 8000a06:	1c59      	adds	r1, r3, #1
 8000a08:	72b9      	strb	r1, [r7, #10]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	440b      	add	r3, r1
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	701a      	strb	r2, [r3, #0]
	remote_send[index++] =(uint8_t) (check_sum >> 16);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	0c1a      	lsrs	r2, r3, #16
 8000a18:	7abb      	ldrb	r3, [r7, #10]
 8000a1a:	1c59      	adds	r1, r3, #1
 8000a1c:	72b9      	strb	r1, [r7, #10]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	440b      	add	r3, r1
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	701a      	strb	r2, [r3, #0]
	remote_send[index++] =(uint8_t) (check_sum >> 8);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	0a1a      	lsrs	r2, r3, #8
 8000a2c:	7abb      	ldrb	r3, [r7, #10]
 8000a2e:	1c59      	adds	r1, r3, #1
 8000a30:	72b9      	strb	r1, [r7, #10]
 8000a32:	4619      	mov	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	440b      	add	r3, r1
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	701a      	strb	r2, [r3, #0]
	remote_send[index++] =(uint8_t) (check_sum);
 8000a3c:	7abb      	ldrb	r3, [r7, #10]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	72ba      	strb	r2, [r7, #10]
 8000a42:	461a      	mov	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	701a      	strb	r2, [r3, #0]



}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	200000f0 	.word	0x200000f0

08000a5c <Stick_Scan>:
//摇杆扫描
void Stick_Scan(){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

	//将ADC的值转为 1000-2000的范围，处理正负

	rc.THR = 2000 - (uint16_t)0.25 *ADC_Value[1] - offset.THR;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <Stick_Scan+0x70>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b21a      	sxth	r2, r3
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <Stick_Scan+0x74>)
 8000a72:	801a      	strh	r2, [r3, #0]
	rc.PIT = 2000 - (uint16_t)0.25 *ADC_Value[3] - offset.PIT;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <Stick_Scan+0x70>)
 8000a76:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	b21a      	sxth	r2, r3
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <Stick_Scan+0x74>)
 8000a86:	80da      	strh	r2, [r3, #6]
	rc.ROL = 2000 - (uint16_t)0.25 *ADC_Value[2] -offset.ROL;
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <Stick_Scan+0x70>)
 8000a8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <Stick_Scan+0x74>)
 8000a9a:	809a      	strh	r2, [r3, #4]
	rc.YAW = 2000 - (uint16_t)0.25 *ADC_Value[0] - offset.YAW;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <Stick_Scan+0x70>)
 8000a9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <Stick_Scan+0x74>)
 8000aae:	805a      	strh	r2, [r3, #2]

	Window_Filter(&rc);//调用滤波函数
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <Stick_Scan+0x74>)
 8000ab2:	f7ff fc21 	bl	80002f8 <Window_Filter>

	Mid_Offset(&rc);	//中点校准
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <Stick_Scan+0x74>)
 8000ab8:	f7ff fce8 	bl	800048c <Mid_Offset>
	Limit(&rc);//最大最小限幅
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <Stick_Scan+0x74>)
 8000abe:	f7ff fda1 	bl	8000604 <Limit>
	Mid_Limit(&rc);//中点限幅
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <Stick_Scan+0x74>)
 8000ac4:	f7ff fdff 	bl	80006c6 <Mid_Limit>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000164 	.word	0x20000164
 8000ad0:	200000f0 	.word	0x200000f0

08000ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_DMA_Init+0x38>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <MX_DMA_Init+0x38>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6153      	str	r3, [r2, #20]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_DMA_Init+0x38>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2105      	movs	r1, #5
 8000af6:	200b      	movs	r0, #11
 8000af8:	f001 fa21 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000afc:	200b      	movs	r0, #11
 8000afe:	f001 fa3a 	bl	8001f76 <HAL_NVIC_EnableIRQ>

}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <vApplicationGetIdleTaskMemory+0x28>)
 8000b20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000b26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	20000184 	.word	0x20000184
 8000b3c:	20000224 	.word	0x20000224

08000b40 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b096      	sub	sp, #88	; 0x58
 8000b44:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_FREERTOS_Init+0x7c>)
 8000b48:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b4c:	461d      	mov	r5, r3
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 fad5 	bl	8004110 <osThreadCreate>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <MX_FREERTOS_Init+0x80>)
 8000b6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_4ms */
  osThreadDef(Task_4ms, StartTask_4ms, osPriorityHigh, 0, 128);
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_FREERTOS_Init+0x84>)
 8000b6e:	f107 0420 	add.w	r4, r7, #32
 8000b72:	461d      	mov	r5, r3
 8000b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_4msHandle = osThreadCreate(osThread(Task_4ms), NULL);
 8000b80:	f107 0320 	add.w	r3, r7, #32
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 fac2 	bl	8004110 <osThreadCreate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <MX_FREERTOS_Init+0x88>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_20ms */
  osThreadDef(Task_20ms, StartTask_20ms, osPriorityIdle, 0, 128);
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_FREERTOS_Init+0x8c>)
 8000b94:	1d3c      	adds	r4, r7, #4
 8000b96:	461d      	mov	r5, r3
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_20msHandle = osThreadCreate(osThread(Task_20ms), NULL);
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 fab1 	bl	8004110 <osThreadCreate>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <MX_FREERTOS_Init+0x90>)
 8000bb2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bb4:	bf00      	nop
 8000bb6:	3758      	adds	r7, #88	; 0x58
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bdb0      	pop	{r4, r5, r7, pc}
 8000bbc:	080057e4 	.word	0x080057e4
 8000bc0:	20000178 	.word	0x20000178
 8000bc4:	0800580c 	.word	0x0800580c
 8000bc8:	2000017c 	.word	0x2000017c
 8000bcc:	08005834 	.word	0x08005834
 8000bd0:	20000180 	.word	0x20000180

08000bd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f003 fae3 	bl	80041a8 <osDelay>
 8000be2:	e7fb      	b.n	8000bdc <StartDefaultTask+0x8>

08000be4 <StartTask_4ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_4ms */
void StartTask_4ms(void const * argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_4ms */
	TickType_t pxPreviousWakeTime;
	pxPreviousWakeTime = xTaskGetTickCount();
 8000bec:	f003 ff10 	bl	8004a10 <xTaskGetTickCount>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  Stick_Scan();//获取摇杆数据
 8000bf4:	f7ff ff32 	bl	8000a5c <Stick_Scan>
	  RemoteData(TX_BUFF);//封装数据
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <StartTask_4ms+0x30>)
 8000bfa:	f7ff fe01 	bl	8000800 <RemoteData>
	  NRF24L01_TxPacket(TX_BUFF);//发送数据
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <StartTask_4ms+0x30>)
 8000c00:	f000 fa4c 	bl	800109c <NRF24L01_TxPacket>
	  vTaskDelayUntil(&pxPreviousWakeTime, 4);
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2104      	movs	r1, #4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 fd3a 	bl	8004684 <vTaskDelayUntil>
  {
 8000c10:	e7f0      	b.n	8000bf4 <StartTask_4ms+0x10>
 8000c12:	bf00      	nop
 8000c14:	20000484 	.word	0x20000484

08000c18 <StartTask_20ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_20ms */
void StartTask_20ms(void const * argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_20ms */
	TickType_t pxPreviousWakeTime;
	pxPreviousWakeTime = xTaskGetTickCount();
 8000c20:	f003 fef6 	bl	8004a10 <xTaskGetTickCount>
 8000c24:	4603      	mov	r3, r0
 8000c26:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  KeyPress();//按键扫描
 8000c28:	f7ff fd9e 	bl	8000768 <KeyPress>
	  vTaskDelayUntil(&pxPreviousWakeTime, 20);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2114      	movs	r1, #20
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fd26 	bl	8004684 <vTaskDelayUntil>
  {
 8000c38:	e7f6      	b.n	8000c28 <StartTask_20ms+0x10>
	...

08000c3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c50:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a41      	ldr	r2, [pc, #260]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a3b      	ldr	r2, [pc, #236]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c80:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a35      	ldr	r2, [pc, #212]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000c86:	f043 0308 	orr.w	r3, r3, #8
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <MX_GPIO_Init+0x120>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c9e:	4830      	ldr	r0, [pc, #192]	; (8000d60 <MX_GPIO_Init+0x124>)
 8000ca0:	f001 fd01 	bl	80026a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000caa:	482e      	ldr	r0, [pc, #184]	; (8000d64 <MX_GPIO_Init+0x128>)
 8000cac:	f001 fcfb 	bl	80026a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = KEY3_Pin|KEY4_Pin;
 8000cb0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4828      	ldr	r0, [pc, #160]	; (8000d68 <MX_GPIO_Init+0x12c>)
 8000cc6:	f001 fb53 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEY5_Pin|KEY6_Pin|KEY2_Pin;
 8000cca:	f640 0303 	movw	r3, #2051	; 0x803
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4820      	ldr	r0, [pc, #128]	; (8000d60 <MX_GPIO_Init+0x124>)
 8000ce0:	f001 fb46 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4818      	ldr	r0, [pc, #96]	; (8000d60 <MX_GPIO_Init+0x124>)
 8000cfe:	f001 fb37 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4813      	ldr	r0, [pc, #76]	; (8000d64 <MX_GPIO_Init+0x128>)
 8000d18:	f001 fb2a 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE_Pin|BUZZ_Pin;
 8000d1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4619      	mov	r1, r3
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <MX_GPIO_Init+0x128>)
 8000d36:	f001 fb1b 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_GPIO_Init+0x128>)
 8000d50:	f001 fb0e 	bl	8002370 <HAL_GPIO_Init>

}
 8000d54:	bf00      	nop
 8000d56:	3720      	adds	r7, #32
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010c00 	.word	0x40010c00
 8000d64:	40010800 	.word	0x40010800
 8000d68:	40011000 	.word	0x40011000

08000d6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d72:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <MX_I2C1_Init+0x54>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d78:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <MX_I2C1_Init+0x58>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_I2C1_Init+0x50>)
 8000daa:	f001 fc95 	bl	80026d8 <HAL_I2C_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000db4:	f000 f8ca 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000424 	.word	0x20000424
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	000186a0 	.word	0x000186a0

08000dc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <HAL_I2C_MspInit+0x70>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d123      	bne.n	8000e30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e00:	23c0      	movs	r3, #192	; 0xc0
 8000e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e04:	2312      	movs	r3, #18
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <HAL_I2C_MspInit+0x78>)
 8000e14:	f001 faac 	bl	8002370 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000e1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e22:	61d3      	str	r3, [r2, #28]
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f000 fba2 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f81c 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f7ff fef4 	bl	8000c3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e54:	f7ff fe3e 	bl	8000ad4 <MX_DMA_Init>
  MX_SPI2_Init();
 8000e58:	f000 f99e 	bl	8001198 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000e5c:	f000 fb04 	bl	8001468 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000e60:	f7ff ff84 	bl	8000d6c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000e64:	f7ff f974 	bl	8000150 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    NRF24L01_TX_Mode();//配置为发送模式
 8000e68:	f000 f95a 	bl	8001120 <NRF24L01_TX_Mode>

    //启动ADC的DMA
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 4);
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4904      	ldr	r1, [pc, #16]	; (8000e80 <main+0x3c>)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <main+0x40>)
 8000e72:	f000 fcbb 	bl	80017ec <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000e76:	f7ff fe63 	bl	8000b40 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e7a:	f003 f942 	bl	8004102 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <main+0x3a>
 8000e80:	20000478 	.word	0x20000478
 8000e84:	2000007c 	.word	0x2000007c

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b094      	sub	sp, #80	; 0x50
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e92:	2228      	movs	r2, #40	; 0x28
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 fbba 	bl	8005610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 fd47 	bl	8002960 <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000ed8:	f000 f838 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	230f      	movs	r3, #15
 8000ede:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 ffb4 	bl	8002e64 <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f02:	f000 f823 	bl	8000f4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f06:	2302      	movs	r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 f951 	bl	80031b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f1c:	f000 f816 	bl	8000f4c <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	3750      	adds	r7, #80	; 0x50
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f3a:	f000 fb3f 	bl	80015bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40000800 	.word	0x40000800

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>

08000f56 <SPIx_ReadWriteByte>:
  * 输入参数: byte：待发送数据
  * 返 回 值: uint8_t：接收到的数据
  * 说    明：无
  */
uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af02      	add	r7, sp, #8
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	70fb      	strb	r3, [r7, #3]
  uint8_t d_read,d_send=byte;
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	73bb      	strb	r3, [r7, #14]
  if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK)
 8000f66:	f107 020f 	add.w	r2, r7, #15
 8000f6a:	f107 010e 	add.w	r1, r7, #14
 8000f6e:	23ff      	movs	r3, #255	; 0xff
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f002 fa59 	bl	800342c <HAL_SPI_TransmitReceive>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SPIx_ReadWriteByte+0x2e>
  {
    d_read=0xFF;
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	73fb      	strb	r3, [r7, #15]
  }
  return d_read;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <NRF24L01_Write_Reg>:
  * 返 回 值: 无
  * 说    明：reg:指定寄存器地址
  *
  */
uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	460a      	mov	r2, r1
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	71bb      	strb	r3, [r7, #6]
    uint8_t status;
  NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <NRF24L01_Write_Reg+0x4c>)
 8000fa8:	f001 fb7d 	bl	80026a6 <HAL_GPIO_WritePin>
  status =SPIx_ReadWriteByte(&hspi2,reg);   //发送寄存器号
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <NRF24L01_Write_Reg+0x50>)
 8000fb2:	f7ff ffd0 	bl	8000f56 <SPIx_ReadWriteByte>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  SPIx_ReadWriteByte(&hspi2,value);         //写入寄存器的值
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <NRF24L01_Write_Reg+0x50>)
 8000fc0:	f7ff ffc9 	bl	8000f56 <SPIx_ReadWriteByte>
  NRF24L01_SPI_CS_DISABLE();                //禁止SPI传输
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <NRF24L01_Write_Reg+0x4c>)
 8000fcc:	f001 fb6b 	bl	80026a6 <HAL_GPIO_WritePin>
  return(status);       			//返回状态值
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	200004a4 	.word	0x200004a4

08000fe4 <NRF24L01_Read_Reg>:
  * 返 回 值: 无
  * 说    明：reg:要读的寄存器
  *
  */
uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
 	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <NRF24L01_Read_Reg+0x44>)
 8000ff6:	f001 fb56 	bl	80026a6 <HAL_GPIO_WritePin>
  SPIx_ReadWriteByte(&hspi2,reg);   //发送寄存器号
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480b      	ldr	r0, [pc, #44]	; (800102c <NRF24L01_Read_Reg+0x48>)
 8001000:	f7ff ffa9 	bl	8000f56 <SPIx_ReadWriteByte>
  reg_val=SPIx_ReadWriteByte(&hspi2,0XFF);//读取寄存器内容
 8001004:	21ff      	movs	r1, #255	; 0xff
 8001006:	4809      	ldr	r0, [pc, #36]	; (800102c <NRF24L01_Read_Reg+0x48>)
 8001008:	f7ff ffa5 	bl	8000f56 <SPIx_ReadWriteByte>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
  NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <NRF24L01_Read_Reg+0x44>)
 8001018:	f001 fb45 	bl	80026a6 <HAL_GPIO_WritePin>
  return(reg_val);           //返回状态值
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40010c00 	.word	0x40010c00
 800102c:	200004a4 	.word	0x200004a4

08001030 <NRF24L01_Write_Buf>:
  * 返 回 值: 无
  * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度
  *
  */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	71bb      	strb	r3, [r7, #6]
	uint8_t status,uint8_t_ctr;
 	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001046:	4813      	ldr	r0, [pc, #76]	; (8001094 <NRF24L01_Write_Buf+0x64>)
 8001048:	f001 fb2d 	bl	80026a6 <HAL_GPIO_WritePin>
  status = SPIx_ReadWriteByte(&hspi2,reg);//发送寄存器值(位置),并读取状态值
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4619      	mov	r1, r3
 8001050:	4811      	ldr	r0, [pc, #68]	; (8001098 <NRF24L01_Write_Buf+0x68>)
 8001052:	f7ff ff80 	bl	8000f56 <SPIx_ReadWriteByte>
 8001056:	4603      	mov	r3, r0
 8001058:	73bb      	strb	r3, [r7, #14]
  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	e00a      	b.n	8001076 <NRF24L01_Write_Buf+0x46>
  {
    SPIx_ReadWriteByte(&hspi2,*pBuf++); //写入数据
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	603a      	str	r2, [r7, #0]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <NRF24L01_Write_Buf+0x68>)
 800106c:	f7ff ff73 	bl	8000f56 <SPIx_ReadWriteByte>
  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	3301      	adds	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	79bb      	ldrb	r3, [r7, #6]
 800107a:	429a      	cmp	r2, r3
 800107c:	d3f0      	bcc.n	8001060 <NRF24L01_Write_Buf+0x30>
  }
  NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <NRF24L01_Write_Buf+0x64>)
 8001086:	f001 fb0e 	bl	80026a6 <HAL_GPIO_WritePin>
  return status;          //返回读到的状态值
 800108a:	7bbb      	ldrb	r3, [r7, #14]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40010c00 	.word	0x40010c00
 8001098:	200004a4 	.word	0x200004a4

0800109c <NRF24L01_TxPacket>:
  * 返 回 值: 发送完成状况
  * 说    明：txbuf:待发送数据首地址
  *
  */
uint8_t NRF24L01_TxPacket(uint8_t *txbuf)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	NRF24L01_CE_LOW();
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010aa:	481c      	ldr	r0, [pc, #112]	; (800111c <NRF24L01_TxPacket+0x80>)
 80010ac:	f001 fafb 	bl	80026a6 <HAL_GPIO_WritePin>
    NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//写数据到TX BUF  32个字节
 80010b0:	2220      	movs	r2, #32
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	20a0      	movs	r0, #160	; 0xa0
 80010b6:	f7ff ffbb 	bl	8001030 <NRF24L01_Write_Buf>
 	NRF24L01_CE_HIGH();//启动发送
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c0:	4816      	ldr	r0, [pc, #88]	; (800111c <NRF24L01_TxPacket+0x80>)
 80010c2:	f001 faf0 	bl	80026a6 <HAL_GPIO_WritePin>

	while(NRF24L01_IRQ_PIN_READ()!=0);//等待发送完成
 80010c6:	bf00      	nop
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	4813      	ldr	r0, [pc, #76]	; (800111c <NRF24L01_TxPacket+0x80>)
 80010ce:	f001 fad3 	bl	8002678 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f7      	bne.n	80010c8 <NRF24L01_TxPacket+0x2c>

	sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 80010d8:	2007      	movs	r0, #7
 80010da:	f7ff ff83 	bl	8000fe4 <NRF24L01_Read_Reg>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	4619      	mov	r1, r3
 80010e6:	2027      	movs	r0, #39	; 0x27
 80010e8:	f7ff ff52 	bl	8000f90 <NRF24L01_Write_Reg>
	if(sta&MAX_TX)//达到最大重发次数
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <NRF24L01_TxPacket+0x66>
	{
		NRF24L01_Write_Reg(FLUSH_TX,0xff);//清除TX FIFO寄存器
 80010f6:	21ff      	movs	r1, #255	; 0xff
 80010f8:	20e1      	movs	r0, #225	; 0xe1
 80010fa:	f7ff ff49 	bl	8000f90 <NRF24L01_Write_Reg>
		return MAX_TX;
 80010fe:	2310      	movs	r3, #16
 8001100:	e007      	b.n	8001112 <NRF24L01_TxPacket+0x76>
	}
	if(sta&TX_OK)//发送完成
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	f003 0320 	and.w	r3, r3, #32
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <NRF24L01_TxPacket+0x74>
	{
		return TX_OK;
 800110c:	2320      	movs	r3, #32
 800110e:	e000      	b.n	8001112 <NRF24L01_TxPacket+0x76>
	}
	return 0xff;//其他原因发送失败
 8001110:	23ff      	movs	r3, #255	; 0xff
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40010800 	.word	0x40010800

08001120 <NRF24L01_TX_Mode>:
  * 返 回 值: 无
  * 说    明：无
  *
  */
void NRF24L01_TX_Mode(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  NRF24L01_CE_LOW();
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112a:	4818      	ldr	r0, [pc, #96]	; (800118c <NRF24L01_TX_Mode+0x6c>)
 800112c:	f001 fabb 	bl	80026a6 <HAL_GPIO_WritePin>
  NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址
 8001130:	2205      	movs	r2, #5
 8001132:	4917      	ldr	r1, [pc, #92]	; (8001190 <NRF24L01_TX_Mode+0x70>)
 8001134:	2030      	movs	r0, #48	; 0x30
 8001136:	f7ff ff7b 	bl	8001030 <NRF24L01_Write_Buf>
  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK
 800113a:	2205      	movs	r2, #5
 800113c:	4915      	ldr	r1, [pc, #84]	; (8001194 <NRF24L01_TX_Mode+0x74>)
 800113e:	202a      	movs	r0, #42	; 0x2a
 8001140:	f7ff ff76 	bl	8001030 <NRF24L01_Write_Buf>
  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答
 8001144:	2101      	movs	r1, #1
 8001146:	2021      	movs	r0, #33	; 0x21
 8001148:	f7ff ff22 	bl	8000f90 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址
 800114c:	2101      	movs	r1, #1
 800114e:	2022      	movs	r0, #34	; 0x22
 8001150:	f7ff ff1e 	bl	8000f90 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次
 8001154:	21ff      	movs	r1, #255	; 0xff
 8001156:	2024      	movs	r0, #36	; 0x24
 8001158:	f7ff ff1a 	bl	8000f90 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40
 800115c:	2128      	movs	r1, #40	; 0x28
 800115e:	2025      	movs	r0, #37	; 0x25
 8001160:	f7ff ff16 	bl	8000f90 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8001164:	210f      	movs	r1, #15
 8001166:	2026      	movs	r0, #38	; 0x26
 8001168:	f7ff ff12 	bl	8000f90 <NRF24L01_Write_Reg>
  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
 800116c:	210e      	movs	r1, #14
 800116e:	2020      	movs	r0, #32
 8001170:	f7ff ff0e 	bl	8000f90 <NRF24L01_Write_Reg>
  NRF24L01_CE_HIGH();//CE为高,10us后启动发送
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117a:	4804      	ldr	r0, [pc, #16]	; (800118c <NRF24L01_TX_Mode+0x6c>)
 800117c:	f001 fa93 	bl	80026a6 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f000 fa37 	bl	80015f4 <HAL_Delay>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010800 	.word	0x40010800
 8001190:	08005858 	.word	0x08005858
 8001194:	08005860 	.word	0x08005860

08001198 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_SPI2_Init+0x64>)
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <MX_SPI2_Init+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_SPI2_Init+0x64>)
 80011a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_SPI2_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_SPI2_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_SPI2_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_SPI2_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_SPI2_Init+0x64>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_SPI2_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_SPI2_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_SPI2_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_SPI2_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_SPI2_Init+0x64>)
 80011e4:	220a      	movs	r2, #10
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_SPI2_Init+0x64>)
 80011ea:	f002 f89b 	bl	8003324 <HAL_SPI_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011f4:	f7ff feaa 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200004a4 	.word	0x200004a4
 8001200:	40003800 	.word	0x40003800

08001204 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <HAL_SPI_MspInit+0x8c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d131      	bne.n	8001288 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_SPI_MspInit+0x90>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_SPI_MspInit+0x90>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122e:	61d3      	str	r3, [r2, #28]
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_SPI_MspInit+0x90>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_SPI_MspInit+0x90>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_SPI_MspInit+0x90>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_SPI_MspInit+0x90>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001254:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <HAL_SPI_MspInit+0x94>)
 800126a:	f001 f881 	bl	8002370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800126e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_SPI_MspInit+0x94>)
 8001284:	f001 f874 	bl	8002370 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40003800 	.word	0x40003800
 8001294:	40021000 	.word	0x40021000
 8001298:	40010c00 	.word	0x40010c00

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_MspInit+0x68>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_MspInit+0x68>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6193      	str	r3, [r2, #24]
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_MspInit+0x68>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_MspInit+0x68>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <HAL_MspInit+0x68>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_MspInit+0x68>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	210f      	movs	r1, #15
 80012d6:	f06f 0001 	mvn.w	r0, #1
 80012da:	f000 fe30 	bl	8001f3e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_MspInit+0x6c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_MspInit+0x6c>)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000

0800130c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08e      	sub	sp, #56	; 0x38
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <HAL_InitTick+0xe8>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a33      	ldr	r2, [pc, #204]	; (80013f4 <HAL_InitTick+0xe8>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_InitTick+0xe8>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800133a:	f107 0210 	add.w	r2, r7, #16
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fee9 	bl	800311c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001354:	f001 fece 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8001358:	6378      	str	r0, [r7, #52]	; 0x34
 800135a:	e004      	b.n	8001366 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800135c:	f001 feca 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8001360:	4603      	mov	r3, r0
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001368:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <HAL_InitTick+0xec>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0c9b      	lsrs	r3, r3, #18
 8001370:	3b01      	subs	r3, #1
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_InitTick+0xf0>)
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <HAL_InitTick+0xf4>)
 8001378:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <HAL_InitTick+0xf0>)
 800137c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001380:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001382:	4a1e      	ldr	r2, [pc, #120]	; (80013fc <HAL_InitTick+0xf0>)
 8001384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001386:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_InitTick+0xf0>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_InitTick+0xf0>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_InitTick+0xf0>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <HAL_InitTick+0xf0>)
 800139c:	f002 faa9 	bl	80038f2 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d11b      	bne.n	80013e6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80013ae:	4813      	ldr	r0, [pc, #76]	; (80013fc <HAL_InitTick+0xf0>)
 80013b0:	f002 faee 	bl	8003990 <HAL_TIM_Base_Start_IT>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d111      	bne.n	80013e6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013c2:	201e      	movs	r0, #30
 80013c4:	f000 fdd7 	bl	8001f76 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	d808      	bhi.n	80013e0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80013ce:	2200      	movs	r2, #0
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	201e      	movs	r0, #30
 80013d4:	f000 fdb3 	bl	8001f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_InitTick+0xf8>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e002      	b.n	80013e6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	431bde83 	.word	0x431bde83
 80013fc:	200004fc 	.word	0x200004fc
 8001400:	40000800 	.word	0x40000800
 8001404:	20000004 	.word	0x20000004

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800140c:	e7fe      	b.n	800140c <NMI_Handler+0x4>

0800140e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <MemManage_Handler+0x4>

0800141a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler+0x4>

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
	...

08001434 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA1_Channel1_IRQHandler+0x10>)
 800143a:	f000 fe65 	bl	8002108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200000ac 	.word	0x200000ac

08001448 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM4_IRQHandler+0x10>)
 800144e:	f002 faf1 	bl	8003a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200004fc 	.word	0x200004fc

0800145c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_TIM1_Init+0x98>)
 8001486:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <MX_TIM1_Init+0x9c>)
 8001488:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_TIM1_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_TIM1_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_TIM1_Init+0x98>)
 8001498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_TIM1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_TIM1_Init+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_TIM1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b0:	4813      	ldr	r0, [pc, #76]	; (8001500 <MX_TIM1_Init+0x98>)
 80014b2:	f002 fa1e 	bl	80038f2 <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014bc:	f7ff fd46 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <MX_TIM1_Init+0x98>)
 80014ce:	f002 fba1 	bl	8003c14 <HAL_TIM_ConfigClockSource>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014d8:	f7ff fd38 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_TIM1_Init+0x98>)
 80014ea:	f002 fd83 	bl	8003ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014f4:	f7ff fd2a 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000544 	.word	0x20000544
 8001504:	40012c00 	.word	0x40012c00

08001508 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_TIM_Base_MspInit+0x34>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10b      	bne.n	8001532 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_TIM_Base_MspInit+0x38>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_TIM_Base_MspInit+0x38>)
 8001520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_TIM_Base_MspInit+0x38>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40012c00 	.word	0x40012c00
 8001540:	40021000 	.word	0x40021000

08001544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001544:	f7ff ff8a 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800154a:	490c      	ldr	r1, [pc, #48]	; (800157c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800154c:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <LoopFillZerobss+0x16>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001560:	4c09      	ldr	r4, [pc, #36]	; (8001588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800156e:	f004 f8ad 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001572:	f7ff fc67 	bl	8000e44 <main>
  bx lr
 8001576:	4770      	bx	lr
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001580:	0800589c 	.word	0x0800589c
  ldr r2, =_sbss
 8001584:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001588:	20001424 	.word	0x20001424

0800158c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC1_2_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_Init+0x28>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_Init+0x28>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 fcc1 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a6:	200f      	movs	r0, #15
 80015a8:	f7ff feb0 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ac:	f7ff fe76 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40022000 	.word	0x40022000

080015bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_IncTick+0x1c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_IncTick+0x20>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a03      	ldr	r2, [pc, #12]	; (80015dc <HAL_IncTick+0x20>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000008 	.word	0x20000008
 80015dc:	2000058c 	.word	0x2000058c

080015e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return uwTick;
 80015e4:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <HAL_GetTick+0x10>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	2000058c 	.word	0x2000058c

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff fff0 	bl	80015e0 <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d005      	beq.n	800161a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_Delay+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800161a:	bf00      	nop
 800161c:	f7ff ffe0 	bl	80015e0 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d8f7      	bhi.n	800161c <HAL_Delay+0x28>
  {
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008

0800163c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0be      	b.n	80017dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe fdd2 	bl	8000224 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 faff 	bl	8001c84 <ADC_ConversionStop_Disable>
 8001686:	4603      	mov	r3, r0
 8001688:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 8099 	bne.w	80017ca <HAL_ADC_Init+0x18e>
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 8095 	bne.w	80017ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a8:	f023 0302 	bic.w	r3, r3, #2
 80016ac:	f043 0202 	orr.w	r2, r3, #2
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7b1b      	ldrb	r3, [r3, #12]
 80016c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016d4:	d003      	beq.n	80016de <HAL_ADC_Init+0xa2>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d102      	bne.n	80016e4 <HAL_ADC_Init+0xa8>
 80016de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e2:	e000      	b.n	80016e6 <HAL_ADC_Init+0xaa>
 80016e4:	2300      	movs	r3, #0
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7d1b      	ldrb	r3, [r3, #20]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d119      	bne.n	8001728 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7b1b      	ldrb	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d109      	bne.n	8001710 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	3b01      	subs	r3, #1
 8001702:	035a      	lsls	r2, r3, #13
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	e00b      	b.n	8001728 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f043 0220 	orr.w	r2, r3, #32
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	430a      	orrs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <HAL_ADC_Init+0x1a8>)
 8001744:	4013      	ands	r3, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	430b      	orrs	r3, r1
 800174e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001758:	d003      	beq.n	8001762 <HAL_ADC_Init+0x126>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d104      	bne.n	800176c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	3b01      	subs	r3, #1
 8001768:	051b      	lsls	r3, r3, #20
 800176a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	430a      	orrs	r2, r1
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_ADC_Init+0x1ac>)
 8001788:	4013      	ands	r3, r2
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	d10b      	bne.n	80017a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	f023 0303 	bic.w	r3, r3, #3
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017a6:	e018      	b.n	80017da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	f023 0312 	bic.w	r3, r3, #18
 80017b0:	f043 0210 	orr.w	r2, r3, #16
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017c8:	e007      	b.n	80017da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	f043 0210 	orr.w	r2, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017da:	7dfb      	ldrb	r3, [r7, #23]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	ffe1f7fd 	.word	0xffe1f7fd
 80017e8:	ff1f0efe 	.word	0xff1f0efe

080017ec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a64      	ldr	r2, [pc, #400]	; (8001994 <HAL_ADC_Start_DMA+0x1a8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d004      	beq.n	8001810 <HAL_ADC_Start_DMA+0x24>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a63      	ldr	r2, [pc, #396]	; (8001998 <HAL_ADC_Start_DMA+0x1ac>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d106      	bne.n	800181e <HAL_ADC_Start_DMA+0x32>
 8001810:	4b60      	ldr	r3, [pc, #384]	; (8001994 <HAL_ADC_Start_DMA+0x1a8>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 80b3 	bne.w	8001984 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_ADC_Start_DMA+0x40>
 8001828:	2302      	movs	r3, #2
 800182a:	e0ae      	b.n	800198a <HAL_ADC_Start_DMA+0x19e>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 f9cb 	bl	8001bd0 <ADC_Enable>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f040 809a 	bne.w	800197a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a4e      	ldr	r2, [pc, #312]	; (8001998 <HAL_ADC_Start_DMA+0x1ac>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d105      	bne.n	8001870 <HAL_ADC_Start_DMA+0x84>
 8001864:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_ADC_Start_DMA+0x1a8>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d115      	bne.n	800189c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001886:	2b00      	cmp	r3, #0
 8001888:	d026      	beq.n	80018d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001892:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800189a:	e01d      	b.n	80018d8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a39      	ldr	r2, [pc, #228]	; (8001994 <HAL_ADC_Start_DMA+0x1a8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d004      	beq.n	80018bc <HAL_ADC_Start_DMA+0xd0>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a38      	ldr	r2, [pc, #224]	; (8001998 <HAL_ADC_Start_DMA+0x1ac>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d10d      	bne.n	80018d8 <HAL_ADC_Start_DMA+0xec>
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_ADC_Start_DMA+0x1a8>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	f023 0206 	bic.w	r2, r3, #6
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80018f0:	e002      	b.n	80018f8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a25      	ldr	r2, [pc, #148]	; (800199c <HAL_ADC_Start_DMA+0x1b0>)
 8001906:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <HAL_ADC_Start_DMA+0x1b4>)
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a23      	ldr	r2, [pc, #140]	; (80019a4 <HAL_ADC_Start_DMA+0x1b8>)
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f06f 0202 	mvn.w	r2, #2
 8001920:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001930:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a18      	ldr	r0, [r3, #32]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	334c      	adds	r3, #76	; 0x4c
 800193c:	4619      	mov	r1, r3
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f000 fb81 	bl	8002048 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001950:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001954:	d108      	bne.n	8001968 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001964:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001966:	e00f      	b.n	8001988 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001976:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001978:	e006      	b.n	8001988 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001982:	e001      	b.n	8001988 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001988:	7dfb      	ldrb	r3, [r7, #23]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40012400 	.word	0x40012400
 8001998:	40012800 	.word	0x40012800
 800199c:	08001d07 	.word	0x08001d07
 80019a0:	08001d83 	.word	0x08001d83
 80019a4:	08001d9f 	.word	0x08001d9f

080019a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x20>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e0dc      	b.n	8001bba <HAL_ADC_ConfigChannel+0x1da>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	d81c      	bhi.n	8001a4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b05      	subs	r3, #5
 8001a22:	221f      	movs	r2, #31
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4019      	ands	r1, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3b05      	subs	r3, #5
 8001a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34
 8001a48:	e03c      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d81c      	bhi.n	8001a8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3b23      	subs	r3, #35	; 0x23
 8001a64:	221f      	movs	r2, #31
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	4019      	ands	r1, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3b23      	subs	r3, #35	; 0x23
 8001a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
 8001a8a:	e01b      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b41      	subs	r3, #65	; 0x41
 8001a9e:	221f      	movs	r2, #31
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4019      	ands	r1, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3b41      	subs	r3, #65	; 0x41
 8001ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	d91c      	bls.n	8001b06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68d9      	ldr	r1, [r3, #12]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	3b1e      	subs	r3, #30
 8001ade:	2207      	movs	r2, #7
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4019      	ands	r1, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6898      	ldr	r0, [r3, #8]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	3b1e      	subs	r3, #30
 8001af8:	fa00 f203 	lsl.w	r2, r0, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	e019      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6919      	ldr	r1, [r3, #16]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	2207      	movs	r2, #7
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4019      	ands	r1, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6898      	ldr	r0, [r3, #8]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d003      	beq.n	8001b4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b46:	2b11      	cmp	r3, #17
 8001b48:	d132      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d125      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d126      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d11a      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <HAL_ADC_ConfigChannel+0x1ec>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	0c9a      	lsrs	r2, r3, #18
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b90:	e002      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f9      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x1b2>
 8001b9e:	e007      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f043 0220 	orr.w	r2, r3, #32
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	40012400 	.word	0x40012400
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	431bde83 	.word	0x431bde83

08001bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d040      	beq.n	8001c70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <ADC_Enable+0xac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <ADC_Enable+0xb0>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	0c9b      	lsrs	r3, r3, #18
 8001c0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c0c:	e002      	b.n	8001c14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f9      	bne.n	8001c0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c1a:	f7ff fce1 	bl	80015e0 <HAL_GetTick>
 8001c1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c20:	e01f      	b.n	8001c62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c22:	f7ff fcdd 	bl	80015e0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d918      	bls.n	8001c62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d011      	beq.n	8001c62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	f043 0210 	orr.w	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e007      	b.n	8001c72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d1d8      	bne.n	8001c22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	431bde83 	.word	0x431bde83

08001c84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d12e      	bne.n	8001cfc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cae:	f7ff fc97 	bl	80015e0 <HAL_GetTick>
 8001cb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cb4:	e01b      	b.n	8001cee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cb6:	f7ff fc93 	bl	80015e0 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d914      	bls.n	8001cee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10d      	bne.n	8001cee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f043 0210 	orr.w	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e007      	b.n	8001cfe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d0dc      	beq.n	8001cb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d127      	bne.n	8001d70 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d3a:	d115      	bne.n	8001d68 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d111      	bne.n	8001d68 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f7ff fe1d 	bl	80019a8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d6e:	e004      	b.n	8001d7a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff fe12 	bl	80019ba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	f043 0204 	orr.w	r2, r3, #4
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7ff fe01 	bl	80019cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4906      	ldr	r1, [pc, #24]	; (8001e6c <__NVIC_EnableIRQ+0x34>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	; (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff4f 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff64 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ffb2 	bl	8001ec4 <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff81 	bl	8001e70 <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff57 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e043      	b.n	8002032 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_DMA_Init+0xa8>)
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a22      	ldr	r2, [pc, #136]	; (8002040 <HAL_DMA_Init+0xac>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	009a      	lsls	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_DMA_Init+0xb0>)
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fe2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	bffdfff8 	.word	0xbffdfff8
 8002040:	cccccccd 	.word	0xcccccccd
 8002044:	40020000 	.word	0x40020000

08002048 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_DMA_Start_IT+0x20>
 8002064:	2302      	movs	r3, #2
 8002066:	e04b      	b.n	8002100 <HAL_DMA_Start_IT+0xb8>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d13a      	bne.n	80020f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f937 	bl	8002314 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 020e 	orr.w	r2, r2, #14
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e00f      	b.n	80020e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0204 	bic.w	r2, r2, #4
 80020ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 020a 	orr.w	r2, r2, #10
 80020de:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e005      	b.n	80020fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
 80020fc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	2204      	movs	r2, #4
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d04f      	beq.n	80021d0 <HAL_DMA_IRQHandler+0xc8>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d107      	bne.n	8002158 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0204 	bic.w	r2, r2, #4
 8002156:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a66      	ldr	r2, [pc, #408]	; (80022f8 <HAL_DMA_IRQHandler+0x1f0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d029      	beq.n	80021b6 <HAL_DMA_IRQHandler+0xae>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a65      	ldr	r2, [pc, #404]	; (80022fc <HAL_DMA_IRQHandler+0x1f4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d022      	beq.n	80021b2 <HAL_DMA_IRQHandler+0xaa>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a63      	ldr	r2, [pc, #396]	; (8002300 <HAL_DMA_IRQHandler+0x1f8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01a      	beq.n	80021ac <HAL_DMA_IRQHandler+0xa4>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a62      	ldr	r2, [pc, #392]	; (8002304 <HAL_DMA_IRQHandler+0x1fc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d012      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x9e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a60      	ldr	r2, [pc, #384]	; (8002308 <HAL_DMA_IRQHandler+0x200>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00a      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x98>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a5f      	ldr	r2, [pc, #380]	; (800230c <HAL_DMA_IRQHandler+0x204>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d102      	bne.n	800219a <HAL_DMA_IRQHandler+0x92>
 8002194:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002198:	e00e      	b.n	80021b8 <HAL_DMA_IRQHandler+0xb0>
 800219a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800219e:	e00b      	b.n	80021b8 <HAL_DMA_IRQHandler+0xb0>
 80021a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021a4:	e008      	b.n	80021b8 <HAL_DMA_IRQHandler+0xb0>
 80021a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021aa:	e005      	b.n	80021b8 <HAL_DMA_IRQHandler+0xb0>
 80021ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b0:	e002      	b.n	80021b8 <HAL_DMA_IRQHandler+0xb0>
 80021b2:	2340      	movs	r3, #64	; 0x40
 80021b4:	e000      	b.n	80021b8 <HAL_DMA_IRQHandler+0xb0>
 80021b6:	2304      	movs	r3, #4
 80021b8:	4a55      	ldr	r2, [pc, #340]	; (8002310 <HAL_DMA_IRQHandler+0x208>)
 80021ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 8094 	beq.w	80022ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021ce:	e08e      	b.n	80022ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2202      	movs	r2, #2
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d056      	beq.n	800228e <HAL_DMA_IRQHandler+0x186>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d051      	beq.n	800228e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10b      	bne.n	8002210 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 020a 	bic.w	r2, r2, #10
 8002206:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <HAL_DMA_IRQHandler+0x1f0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d029      	beq.n	800226e <HAL_DMA_IRQHandler+0x166>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a37      	ldr	r2, [pc, #220]	; (80022fc <HAL_DMA_IRQHandler+0x1f4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <HAL_DMA_IRQHandler+0x162>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a35      	ldr	r2, [pc, #212]	; (8002300 <HAL_DMA_IRQHandler+0x1f8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01a      	beq.n	8002264 <HAL_DMA_IRQHandler+0x15c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a34      	ldr	r2, [pc, #208]	; (8002304 <HAL_DMA_IRQHandler+0x1fc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d012      	beq.n	800225e <HAL_DMA_IRQHandler+0x156>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a32      	ldr	r2, [pc, #200]	; (8002308 <HAL_DMA_IRQHandler+0x200>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00a      	beq.n	8002258 <HAL_DMA_IRQHandler+0x150>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a31      	ldr	r2, [pc, #196]	; (800230c <HAL_DMA_IRQHandler+0x204>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d102      	bne.n	8002252 <HAL_DMA_IRQHandler+0x14a>
 800224c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002250:	e00e      	b.n	8002270 <HAL_DMA_IRQHandler+0x168>
 8002252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002256:	e00b      	b.n	8002270 <HAL_DMA_IRQHandler+0x168>
 8002258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225c:	e008      	b.n	8002270 <HAL_DMA_IRQHandler+0x168>
 800225e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002262:	e005      	b.n	8002270 <HAL_DMA_IRQHandler+0x168>
 8002264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002268:	e002      	b.n	8002270 <HAL_DMA_IRQHandler+0x168>
 800226a:	2320      	movs	r3, #32
 800226c:	e000      	b.n	8002270 <HAL_DMA_IRQHandler+0x168>
 800226e:	2302      	movs	r3, #2
 8002270:	4a27      	ldr	r2, [pc, #156]	; (8002310 <HAL_DMA_IRQHandler+0x208>)
 8002272:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d034      	beq.n	80022ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800228c:	e02f      	b.n	80022ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2208      	movs	r2, #8
 8002294:	409a      	lsls	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d028      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x1e8>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d023      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 020e 	bic.w	r2, r2, #14
 80022b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c0:	2101      	movs	r1, #1
 80022c2:	fa01 f202 	lsl.w	r2, r1, r2
 80022c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
    }
  }
  return;
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
}
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40020008 	.word	0x40020008
 80022fc:	4002001c 	.word	0x4002001c
 8002300:	40020030 	.word	0x40020030
 8002304:	40020044 	.word	0x40020044
 8002308:	40020058 	.word	0x40020058
 800230c:	4002006c 	.word	0x4002006c
 8002310:	40020000 	.word	0x40020000

08002314 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b10      	cmp	r3, #16
 8002340:	d108      	bne.n	8002354 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002352:	e007      	b.n	8002364 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	60da      	str	r2, [r3, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
	...

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b08b      	sub	sp, #44	; 0x2c
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002382:	e169      	b.n	8002658 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002384:	2201      	movs	r2, #1
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	429a      	cmp	r2, r3
 800239e:	f040 8158 	bne.w	8002652 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4a9a      	ldr	r2, [pc, #616]	; (8002610 <HAL_GPIO_Init+0x2a0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d05e      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023ac:	4a98      	ldr	r2, [pc, #608]	; (8002610 <HAL_GPIO_Init+0x2a0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d875      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023b2:	4a98      	ldr	r2, [pc, #608]	; (8002614 <HAL_GPIO_Init+0x2a4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d058      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023b8:	4a96      	ldr	r2, [pc, #600]	; (8002614 <HAL_GPIO_Init+0x2a4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d86f      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023be:	4a96      	ldr	r2, [pc, #600]	; (8002618 <HAL_GPIO_Init+0x2a8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d052      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023c4:	4a94      	ldr	r2, [pc, #592]	; (8002618 <HAL_GPIO_Init+0x2a8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d869      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023ca:	4a94      	ldr	r2, [pc, #592]	; (800261c <HAL_GPIO_Init+0x2ac>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d04c      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023d0:	4a92      	ldr	r2, [pc, #584]	; (800261c <HAL_GPIO_Init+0x2ac>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d863      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023d6:	4a92      	ldr	r2, [pc, #584]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d046      	beq.n	800246a <HAL_GPIO_Init+0xfa>
 80023dc:	4a90      	ldr	r2, [pc, #576]	; (8002620 <HAL_GPIO_Init+0x2b0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d85d      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d82a      	bhi.n	800243c <HAL_GPIO_Init+0xcc>
 80023e6:	2b12      	cmp	r3, #18
 80023e8:	d859      	bhi.n	800249e <HAL_GPIO_Init+0x12e>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <HAL_GPIO_Init+0x80>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	0800246b 	.word	0x0800246b
 80023f4:	08002445 	.word	0x08002445
 80023f8:	08002457 	.word	0x08002457
 80023fc:	08002499 	.word	0x08002499
 8002400:	0800249f 	.word	0x0800249f
 8002404:	0800249f 	.word	0x0800249f
 8002408:	0800249f 	.word	0x0800249f
 800240c:	0800249f 	.word	0x0800249f
 8002410:	0800249f 	.word	0x0800249f
 8002414:	0800249f 	.word	0x0800249f
 8002418:	0800249f 	.word	0x0800249f
 800241c:	0800249f 	.word	0x0800249f
 8002420:	0800249f 	.word	0x0800249f
 8002424:	0800249f 	.word	0x0800249f
 8002428:	0800249f 	.word	0x0800249f
 800242c:	0800249f 	.word	0x0800249f
 8002430:	0800249f 	.word	0x0800249f
 8002434:	0800244d 	.word	0x0800244d
 8002438:	08002461 	.word	0x08002461
 800243c:	4a79      	ldr	r2, [pc, #484]	; (8002624 <HAL_GPIO_Init+0x2b4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002442:	e02c      	b.n	800249e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	623b      	str	r3, [r7, #32]
          break;
 800244a:	e029      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	3304      	adds	r3, #4
 8002452:	623b      	str	r3, [r7, #32]
          break;
 8002454:	e024      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	3308      	adds	r3, #8
 800245c:	623b      	str	r3, [r7, #32]
          break;
 800245e:	e01f      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	330c      	adds	r3, #12
 8002466:	623b      	str	r3, [r7, #32]
          break;
 8002468:	e01a      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002472:	2304      	movs	r3, #4
 8002474:	623b      	str	r3, [r7, #32]
          break;
 8002476:	e013      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002480:	2308      	movs	r3, #8
 8002482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	611a      	str	r2, [r3, #16]
          break;
 800248a:	e009      	b.n	80024a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800248c:	2308      	movs	r3, #8
 800248e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	615a      	str	r2, [r3, #20]
          break;
 8002496:	e003      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
          break;
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x130>
          break;
 800249e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2bff      	cmp	r3, #255	; 0xff
 80024a4:	d801      	bhi.n	80024aa <HAL_GPIO_Init+0x13a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	e001      	b.n	80024ae <HAL_GPIO_Init+0x13e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2bff      	cmp	r3, #255	; 0xff
 80024b4:	d802      	bhi.n	80024bc <HAL_GPIO_Init+0x14c>
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	e002      	b.n	80024c2 <HAL_GPIO_Init+0x152>
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	3b08      	subs	r3, #8
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	210f      	movs	r1, #15
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	401a      	ands	r2, r3
 80024d4:	6a39      	ldr	r1, [r7, #32]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	431a      	orrs	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80b1 	beq.w	8002652 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024f0:	4b4d      	ldr	r3, [pc, #308]	; (8002628 <HAL_GPIO_Init+0x2b8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a4c      	ldr	r2, [pc, #304]	; (8002628 <HAL_GPIO_Init+0x2b8>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <HAL_GPIO_Init+0x2b8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002508:	4a48      	ldr	r2, [pc, #288]	; (800262c <HAL_GPIO_Init+0x2bc>)
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a40      	ldr	r2, [pc, #256]	; (8002630 <HAL_GPIO_Init+0x2c0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_GPIO_Init+0x1ec>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a3f      	ldr	r2, [pc, #252]	; (8002634 <HAL_GPIO_Init+0x2c4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00d      	beq.n	8002558 <HAL_GPIO_Init+0x1e8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a3e      	ldr	r2, [pc, #248]	; (8002638 <HAL_GPIO_Init+0x2c8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d007      	beq.n	8002554 <HAL_GPIO_Init+0x1e4>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a3d      	ldr	r2, [pc, #244]	; (800263c <HAL_GPIO_Init+0x2cc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d101      	bne.n	8002550 <HAL_GPIO_Init+0x1e0>
 800254c:	2303      	movs	r3, #3
 800254e:	e006      	b.n	800255e <HAL_GPIO_Init+0x1ee>
 8002550:	2304      	movs	r3, #4
 8002552:	e004      	b.n	800255e <HAL_GPIO_Init+0x1ee>
 8002554:	2302      	movs	r3, #2
 8002556:	e002      	b.n	800255e <HAL_GPIO_Init+0x1ee>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_GPIO_Init+0x1ee>
 800255c:	2300      	movs	r3, #0
 800255e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002560:	f002 0203 	and.w	r2, r2, #3
 8002564:	0092      	lsls	r2, r2, #2
 8002566:	4093      	lsls	r3, r2
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800256e:	492f      	ldr	r1, [pc, #188]	; (800262c <HAL_GPIO_Init+0x2bc>)
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	492c      	ldr	r1, [pc, #176]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]
 8002594:	e006      	b.n	80025a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002596:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	43db      	mvns	r3, r3
 800259e:	4928      	ldr	r1, [pc, #160]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	4922      	ldr	r1, [pc, #136]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60cb      	str	r3, [r1, #12]
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	491e      	ldr	r1, [pc, #120]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4918      	ldr	r1, [pc, #96]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	4914      	ldr	r1, [pc, #80]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d021      	beq.n	8002644 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	490e      	ldr	r1, [pc, #56]	; (8002640 <HAL_GPIO_Init+0x2d0>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]
 800260c:	e021      	b.n	8002652 <HAL_GPIO_Init+0x2e2>
 800260e:	bf00      	nop
 8002610:	10320000 	.word	0x10320000
 8002614:	10310000 	.word	0x10310000
 8002618:	10220000 	.word	0x10220000
 800261c:	10210000 	.word	0x10210000
 8002620:	10120000 	.word	0x10120000
 8002624:	10110000 	.word	0x10110000
 8002628:	40021000 	.word	0x40021000
 800262c:	40010000 	.word	0x40010000
 8002630:	40010800 	.word	0x40010800
 8002634:	40010c00 	.word	0x40010c00
 8002638:	40011000 	.word	0x40011000
 800263c:	40011400 	.word	0x40011400
 8002640:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_GPIO_Init+0x304>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	43db      	mvns	r3, r3
 800264c:	4909      	ldr	r1, [pc, #36]	; (8002674 <HAL_GPIO_Init+0x304>)
 800264e:	4013      	ands	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	3301      	adds	r3, #1
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	f47f ae8e 	bne.w	8002384 <HAL_GPIO_Init+0x14>
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	372c      	adds	r7, #44	; 0x2c
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	40010400 	.word	0x40010400

08002678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
 8002694:	e001      	b.n	800269a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	807b      	strh	r3, [r7, #2]
 80026b2:	4613      	mov	r3, r2
 80026b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b6:	787b      	ldrb	r3, [r7, #1]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026bc:	887a      	ldrh	r2, [r7, #2]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026c2:	e003      	b.n	80026cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	041a      	lsls	r2, r3, #16
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	611a      	str	r2, [r3, #16]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e12b      	b.n	8002942 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fb62 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800272a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800273a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800273c:	f000 fcda 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8002740:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a81      	ldr	r2, [pc, #516]	; (800294c <HAL_I2C_Init+0x274>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d807      	bhi.n	800275c <HAL_I2C_Init+0x84>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a80      	ldr	r2, [pc, #512]	; (8002950 <HAL_I2C_Init+0x278>)
 8002750:	4293      	cmp	r3, r2
 8002752:	bf94      	ite	ls
 8002754:	2301      	movls	r3, #1
 8002756:	2300      	movhi	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e006      	b.n	800276a <HAL_I2C_Init+0x92>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a7d      	ldr	r2, [pc, #500]	; (8002954 <HAL_I2C_Init+0x27c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	bf94      	ite	ls
 8002764:	2301      	movls	r3, #1
 8002766:	2300      	movhi	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0e7      	b.n	8002942 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4a78      	ldr	r2, [pc, #480]	; (8002958 <HAL_I2C_Init+0x280>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0c9b      	lsrs	r3, r3, #18
 800277c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_I2C_Init+0x274>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d802      	bhi.n	80027ac <HAL_I2C_Init+0xd4>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3301      	adds	r3, #1
 80027aa:	e009      	b.n	80027c0 <HAL_I2C_Init+0xe8>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	4a69      	ldr	r2, [pc, #420]	; (800295c <HAL_I2C_Init+0x284>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	3301      	adds	r3, #1
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	495c      	ldr	r1, [pc, #368]	; (800294c <HAL_I2C_Init+0x274>)
 80027dc:	428b      	cmp	r3, r1
 80027de:	d819      	bhi.n	8002814 <HAL_I2C_Init+0x13c>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1e59      	subs	r1, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ee:	1c59      	adds	r1, r3, #1
 80027f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027f4:	400b      	ands	r3, r1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_I2C_Init+0x138>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1e59      	subs	r1, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fbb1 f3f3 	udiv	r3, r1, r3
 8002808:	3301      	adds	r3, #1
 800280a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280e:	e051      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002810:	2304      	movs	r3, #4
 8002812:	e04f      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d111      	bne.n	8002840 <HAL_I2C_Init+0x168>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e012      	b.n	8002866 <HAL_I2C_Init+0x18e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	0099      	lsls	r1, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Init+0x196>
 800286a:	2301      	movs	r3, #1
 800286c:	e022      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10e      	bne.n	8002894 <HAL_I2C_Init+0x1bc>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1e58      	subs	r0, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	440b      	add	r3, r1
 8002884:	fbb0 f3f3 	udiv	r3, r0, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002892:	e00f      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e58      	subs	r0, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	0099      	lsls	r1, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	6809      	ldr	r1, [r1, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6911      	ldr	r1, [r2, #16]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68d2      	ldr	r2, [r2, #12]
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	000186a0 	.word	0x000186a0
 8002950:	001e847f 	.word	0x001e847f
 8002954:	003d08ff 	.word	0x003d08ff
 8002958:	431bde83 	.word	0x431bde83
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e272      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8087 	beq.w	8002a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002980:	4b92      	ldr	r3, [pc, #584]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b04      	cmp	r3, #4
 800298a:	d00c      	beq.n	80029a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800298c:	4b8f      	ldr	r3, [pc, #572]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d112      	bne.n	80029be <HAL_RCC_OscConfig+0x5e>
 8002998:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d10b      	bne.n	80029be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a6:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d06c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x12c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d168      	bne.n	8002a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e24c      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_OscConfig+0x76>
 80029c8:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a7f      	ldr	r2, [pc, #508]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e02e      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x98>
 80029de:	4b7b      	ldr	r3, [pc, #492]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7a      	ldr	r2, [pc, #488]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b78      	ldr	r3, [pc, #480]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a77      	ldr	r2, [pc, #476]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e01d      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0xbc>
 8002a02:	4b72      	ldr	r3, [pc, #456]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a71      	ldr	r2, [pc, #452]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6e      	ldr	r2, [pc, #440]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 8002a1c:	4b6b      	ldr	r3, [pc, #428]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b68      	ldr	r3, [pc, #416]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a67      	ldr	r2, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fdd0 	bl	80015e0 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fdcc 	bl	80015e0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e200      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0xe4>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe fdbc 	bl	80015e0 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fdb8 	bl	80015e0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1ec      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x10c>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d063      	beq.n	8002b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9a:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aa6:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d11c      	bne.n	8002aec <HAL_RCC_OscConfig+0x18c>
 8002ab2:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d116      	bne.n	8002aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	4b43      	ldr	r3, [pc, #268]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x176>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e1c0      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4939      	ldr	r1, [pc, #228]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	e03a      	b.n	8002b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af4:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCC_OscConfig+0x270>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7fe fd71 	bl	80015e0 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b02:	f7fe fd6d 	bl	80015e0 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e1a1      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4927      	ldr	r1, [pc, #156]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
 8002b34:	e015      	b.n	8002b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_RCC_OscConfig+0x270>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fd50 	bl	80015e0 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b44:	f7fe fd4c 	bl	80015e0 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e180      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03a      	beq.n	8002be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d019      	beq.n	8002baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fd30 	bl	80015e0 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7fe fd2c 	bl	80015e0 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e160      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f000 faea 	bl	800317c <RCC_Delay>
 8002ba8:	e01c      	b.n	8002be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fd16 	bl	80015e0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb6:	e00f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fd12 	bl	80015e0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d908      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e146      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	42420000 	.word	0x42420000
 8002bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	4b92      	ldr	r3, [pc, #584]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e9      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80a6 	beq.w	8002d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b8b      	ldr	r3, [pc, #556]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4a87      	ldr	r2, [pc, #540]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	61d3      	str	r3, [r2, #28]
 8002c0e:	4b85      	ldr	r3, [pc, #532]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d118      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7e      	ldr	r2, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fcd3 	bl	80015e0 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7fe fccf 	bl	80015e0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e103      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	4b75      	ldr	r3, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x312>
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a6e      	ldr	r2, [pc, #440]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	e02d      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x334>
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6213      	str	r3, [r2, #32]
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a66      	ldr	r2, [pc, #408]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6213      	str	r3, [r2, #32]
 8002c92:	e01c      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x356>
 8002c9c:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a60      	ldr	r2, [pc, #384]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6213      	str	r3, [r2, #32]
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a5d      	ldr	r2, [pc, #372]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6213      	str	r3, [r2, #32]
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002cb6:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a5a      	ldr	r2, [pc, #360]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6213      	str	r3, [r2, #32]
 8002cc2:	4b58      	ldr	r3, [pc, #352]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fc83 	bl	80015e0 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fc7f 	bl	80015e0 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0b1      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	4b4b      	ldr	r3, [pc, #300]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <HAL_RCC_OscConfig+0x37e>
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fe fc6d 	bl	80015e0 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fc69 	bl	80015e0 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e09b      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8087 	beq.w	8002e56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d061      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d146      	bne.n	8002dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe fc3d 	bl	80015e0 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe fc39 	bl	80015e0 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e06d      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	4921      	ldr	r1, [pc, #132]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a19      	ldr	r1, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	430b      	orrs	r3, r1
 8002db6:	491b      	ldr	r1, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x4cc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fc0d 	bl	80015e0 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fe fc09 	bl	80015e0 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e03d      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x46a>
 8002de8:	e035      	b.n	8002e56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_RCC_OscConfig+0x4cc>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fbf6 	bl	80015e0 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fbf2 	bl	80015e0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e026      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x498>
 8002e16:	e01e      	b.n	8002e56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e019      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_OscConfig+0x500>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000

08002e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0d0      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d910      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b67      	ldr	r3, [pc, #412]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4965      	ldr	r1, [pc, #404]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b8      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ee2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b50      	ldr	r3, [pc, #320]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	494d      	ldr	r1, [pc, #308]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d040      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07f      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e073      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06b      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b39      	ldr	r3, [pc, #228]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4936      	ldr	r1, [pc, #216]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7fe fb44 	bl	80015e0 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fe fb40 	bl	80015e0 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e053      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d210      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4922      	ldr	r1, [pc, #136]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e032      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ff2:	f000 f821 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	490a      	ldr	r1, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	5ccb      	ldrb	r3, [r1, r3]
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1cc>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1d0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe f97a 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40022000 	.word	0x40022000
 8003028:	40021000 	.word	0x40021000
 800302c:	08005868 	.word	0x08005868
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b04      	cmp	r3, #4
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x30>
 8003062:	2b08      	cmp	r3, #8
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x36>
 8003066:	e027      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800306a:	613b      	str	r3, [r7, #16]
      break;
 800306c:	e027      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	0c9b      	lsrs	r3, r3, #18
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	0c5b      	lsrs	r3, r3, #17
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	4a11      	ldr	r2, [pc, #68]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800309a:	fb03 f202 	mul.w	r2, r3, r2
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e004      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	613b      	str	r3, [r7, #16]
      break;
 80030b6:	e002      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ba:	613b      	str	r3, [r7, #16]
      break;
 80030bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030be:	693b      	ldr	r3, [r7, #16]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	007a1200 	.word	0x007a1200
 80030d4:	08005880 	.word	0x08005880
 80030d8:	08005890 	.word	0x08005890
 80030dc:	003d0900 	.word	0x003d0900

080030e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e4:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	20000000 	.word	0x20000000

080030f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f8:	f7ff fff2 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	08005878 	.word	0x08005878

0800311c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	220f      	movs	r2, #15
 800312a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_GetClockConfig+0x58>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_RCC_GetClockConfig+0x58>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_GetClockConfig+0x58>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCC_GetClockConfig+0x58>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	08db      	lsrs	r3, r3, #3
 8003156:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_GetClockConfig+0x5c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0207 	and.w	r2, r3, #7
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40021000 	.word	0x40021000
 8003178:	40022000 	.word	0x40022000

0800317c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <RCC_Delay+0x34>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <RCC_Delay+0x38>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003198:	bf00      	nop
  }
  while (Delay --);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f9      	bne.n	8003198 <RCC_Delay+0x1c>
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	20000000 	.word	0x20000000
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d07d      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d8:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e4:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	4a4b      	ldr	r2, [pc, #300]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ee:	61d3      	str	r3, [r2, #28]
 80031f0:	4b49      	ldr	r3, [pc, #292]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d118      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a42      	ldr	r2, [pc, #264]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003218:	f7fe f9e2 	bl	80015e0 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	e008      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003220:	f7fe f9de 	bl	80015e0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e06d      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003232:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800323e:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003246:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d02e      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d027      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800325c:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003264:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003268:	2201      	movs	r2, #1
 800326a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800326c:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003272:	4a29      	ldr	r2, [pc, #164]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d014      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003282:	f7fe f9ad 	bl	80015e0 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003288:	e00a      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fe f9a9 	bl	80015e0 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e036      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ee      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4917      	ldr	r1, [pc, #92]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	4a13      	ldr	r2, [pc, #76]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	490b      	ldr	r1, [pc, #44]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032fa:	4b07      	ldr	r3, [pc, #28]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4904      	ldr	r1, [pc, #16]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	40007000 	.word	0x40007000
 8003320:	42420440 	.word	0x42420440

08003324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e076      	b.n	8003424 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003346:	d009      	beq.n	800335c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
 800334e:	e005      	b.n	800335c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd ff44 	bl	8001204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	ea42 0103 	orr.w	r1, r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	0c1a      	lsrs	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f002 0204 	and.w	r2, r2, #4
 8003402:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003412:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800343a:	2301      	movs	r3, #1
 800343c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800343e:	f7fe f8cf 	bl	80015e0 <HAL_GetTick>
 8003442:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800344a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003452:	887b      	ldrh	r3, [r7, #2]
 8003454:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d00c      	beq.n	8003476 <HAL_SPI_TransmitReceive+0x4a>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003462:	d106      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x46>
 800346c:	7ffb      	ldrb	r3, [r7, #31]
 800346e:	2b04      	cmp	r3, #4
 8003470:	d001      	beq.n	8003476 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003472:	2302      	movs	r3, #2
 8003474:	e17f      	b.n	8003776 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x5c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x5c>
 8003482:	887b      	ldrh	r3, [r7, #2]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e174      	b.n	8003776 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_SPI_TransmitReceive+0x6e>
 8003496:	2302      	movs	r3, #2
 8003498:	e16d      	b.n	8003776 <HAL_SPI_TransmitReceive+0x34a>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d003      	beq.n	80034b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2205      	movs	r2, #5
 80034b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	887a      	ldrh	r2, [r7, #2]
 80034c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	887a      	ldrh	r2, [r7, #2]
 80034de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d007      	beq.n	800350a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003508:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d17e      	bne.n	8003612 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_SPI_TransmitReceive+0xf6>
 800351c:	8afb      	ldrh	r3, [r7, #22]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d16c      	bne.n	80035fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	881a      	ldrh	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	1c9a      	adds	r2, r3, #2
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003546:	e059      	b.n	80035fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d11b      	bne.n	800358e <HAL_SPI_TransmitReceive+0x162>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d016      	beq.n	800358e <HAL_SPI_TransmitReceive+0x162>
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	2b01      	cmp	r3, #1
 8003564:	d113      	bne.n	800358e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	881a      	ldrh	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	1c9a      	adds	r2, r3, #2
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d119      	bne.n	80035d0 <HAL_SPI_TransmitReceive+0x1a4>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d014      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	b292      	uxth	r2, r2
 80035b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035cc:	2301      	movs	r3, #1
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035d0:	f7fe f806 	bl	80015e0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035dc:	429a      	cmp	r2, r3
 80035de:	d80d      	bhi.n	80035fc <HAL_SPI_TransmitReceive+0x1d0>
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d009      	beq.n	80035fc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0bc      	b.n	8003776 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1a0      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x11c>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d19b      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x11c>
 8003610:	e082      	b.n	8003718 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x1f4>
 800361a:	8afb      	ldrh	r3, [r7, #22]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d171      	bne.n	8003704 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	7812      	ldrb	r2, [r2, #0]
 800362c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003646:	e05d      	b.n	8003704 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d11c      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x264>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d017      	beq.n	8003690 <HAL_SPI_TransmitReceive+0x264>
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	2b01      	cmp	r3, #1
 8003664:	d114      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d119      	bne.n	80036d2 <HAL_SPI_TransmitReceive+0x2a6>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d014      	beq.n	80036d2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036ce:	2301      	movs	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036d2:	f7fd ff85 	bl	80015e0 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036de:	429a      	cmp	r2, r3
 80036e0:	d803      	bhi.n	80036ea <HAL_SPI_TransmitReceive+0x2be>
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d102      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x2c4>
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e038      	b.n	8003776 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d19c      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x21c>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d197      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f8b7 	bl	8003890 <SPI_EndRxTxTransaction>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e01d      	b.n	8003776 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003774:	2300      	movs	r3, #0
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3728      	adds	r7, #40	; 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003790:	f7fd ff26 	bl	80015e0 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	4413      	add	r3, r2
 800379e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037a0:	f7fd ff1e 	bl	80015e0 <HAL_GetTick>
 80037a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	015b      	lsls	r3, r3, #5
 80037ac:	0d1b      	lsrs	r3, r3, #20
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b6:	e054      	b.n	8003862 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d050      	beq.n	8003862 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037c0:	f7fd ff0e 	bl	80015e0 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d902      	bls.n	80037d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d13d      	bne.n	8003852 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ee:	d111      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f8:	d004      	beq.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003802:	d107      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381c:	d10f      	bne.n	800383e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e017      	b.n	8003882 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3b01      	subs	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	bf0c      	ite	eq
 8003872:	2301      	moveq	r3, #1
 8003874:	2300      	movne	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	429a      	cmp	r2, r3
 800387e:	d19b      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000000 	.word	0x20000000

08003890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2201      	movs	r2, #1
 80038a4:	2102      	movs	r1, #2
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f7ff ff6a 	bl	8003780 <SPI_WaitFlagStateUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e013      	b.n	80038ea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2180      	movs	r1, #128	; 0x80
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff ff57 	bl	8003780 <SPI_WaitFlagStateUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e000      	b.n	80038ea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e041      	b.n	8003988 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7fd fdf5 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f000 fa5b 	bl	8003dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d001      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e03a      	b.n	8003a1e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <HAL_TIM_Base_Start_IT+0x98>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_TIM_Base_Start_IT+0x58>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d2:	d009      	beq.n	80039e8 <HAL_TIM_Base_Start_IT+0x58>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a14      	ldr	r2, [pc, #80]	; (8003a2c <HAL_TIM_Base_Start_IT+0x9c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_TIM_Base_Start_IT+0x58>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <HAL_TIM_Base_Start_IT+0xa0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d111      	bne.n	8003a0c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d010      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	e007      	b.n	8003a1c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800

08003a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d020      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01b      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0202 	mvn.w	r2, #2
 8003a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f998 	bl	8003db4 <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f98b 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f99a 	bl	8003dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d020      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01b      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0204 	mvn.w	r2, #4
 8003ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f972 	bl	8003db4 <HAL_TIM_IC_CaptureCallback>
 8003ad0:	e005      	b.n	8003ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f965 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f974 	bl	8003dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d020      	beq.n	8003b30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01b      	beq.n	8003b30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0208 	mvn.w	r2, #8
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2204      	movs	r2, #4
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f94c 	bl	8003db4 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f93f 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f94e 	bl	8003dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d020      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01b      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0210 	mvn.w	r2, #16
 8003b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2208      	movs	r2, #8
 8003b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f926 	bl	8003db4 <HAL_TIM_IC_CaptureCallback>
 8003b68:	e005      	b.n	8003b76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f919 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f928 	bl	8003dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00c      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0201 	mvn.w	r2, #1
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd f9c4 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa7f 	bl	80040c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00c      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8f8 	bl	8003dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0220 	mvn.w	r2, #32
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa52 	bl	80040b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_TIM_ConfigClockSource+0x1c>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0b4      	b.n	8003d9a <HAL_TIM_ConfigClockSource+0x186>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c68:	d03e      	beq.n	8003ce8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6e:	f200 8087 	bhi.w	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c76:	f000 8086 	beq.w	8003d86 <HAL_TIM_ConfigClockSource+0x172>
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d87f      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b70      	cmp	r3, #112	; 0x70
 8003c82:	d01a      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0xa6>
 8003c84:	2b70      	cmp	r3, #112	; 0x70
 8003c86:	d87b      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b60      	cmp	r3, #96	; 0x60
 8003c8a:	d050      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x11a>
 8003c8c:	2b60      	cmp	r3, #96	; 0x60
 8003c8e:	d877      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b50      	cmp	r3, #80	; 0x50
 8003c92:	d03c      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0xfa>
 8003c94:	2b50      	cmp	r3, #80	; 0x50
 8003c96:	d873      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d058      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x13a>
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d86f      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b30      	cmp	r3, #48	; 0x30
 8003ca2:	d064      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003ca4:	2b30      	cmp	r3, #48	; 0x30
 8003ca6:	d86b      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d060      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d867      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d05c      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d05a      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003cb8:	e062      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cca:	f000 f974 	bl	8003fb6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	609a      	str	r2, [r3, #8]
      break;
 8003ce6:	e04f      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cf8:	f000 f95d 	bl	8003fb6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d0a:	609a      	str	r2, [r3, #8]
      break;
 8003d0c:	e03c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 f8d4 	bl	8003ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2150      	movs	r1, #80	; 0x50
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f92b 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e02c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 f8f2 	bl	8003f24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2160      	movs	r1, #96	; 0x60
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f91b 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e01c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 f8b4 	bl	8003ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f90b 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e00c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f000 f902 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 8003d7e:	e003      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      break;
 8003d84:	e000      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
	...

08003dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a2f      	ldr	r2, [pc, #188]	; (8003ebc <TIM_Base_SetConfig+0xd0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00b      	beq.n	8003e1c <TIM_Base_SetConfig+0x30>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0a:	d007      	beq.n	8003e1c <TIM_Base_SetConfig+0x30>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <TIM_Base_SetConfig+0xd4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_Base_SetConfig+0x30>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <TIM_Base_SetConfig+0xd8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d108      	bne.n	8003e2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <TIM_Base_SetConfig+0xd0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00b      	beq.n	8003e4e <TIM_Base_SetConfig+0x62>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d007      	beq.n	8003e4e <TIM_Base_SetConfig+0x62>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <TIM_Base_SetConfig+0xd4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_Base_SetConfig+0x62>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <TIM_Base_SetConfig+0xd8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d108      	bne.n	8003e60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <TIM_Base_SetConfig+0xd0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d103      	bne.n	8003e94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f023 0201 	bic.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	611a      	str	r2, [r3, #16]
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800

08003ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0201 	bic.w	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f023 030a 	bic.w	r3, r3, #10
 8003f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0210 	bic.w	r2, r3, #16
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	031b      	lsls	r3, r3, #12
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	621a      	str	r2, [r3, #32]
}
 8003f78:	bf00      	nop
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f043 0307 	orr.w	r3, r3, #7
 8003fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	609a      	str	r2, [r3, #8]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b087      	sub	sp, #28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	021a      	lsls	r2, r3, #8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	609a      	str	r2, [r3, #8]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004008:	2302      	movs	r3, #2
 800400a:	e046      	b.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d009      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a10      	ldr	r2, [pc, #64]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d10c      	bne.n	8004088 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	4313      	orrs	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800

080040b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80040e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040e6:	2b84      	cmp	r3, #132	; 0x84
 80040e8:	d005      	beq.n	80040f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80040ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	3303      	adds	r3, #3
 80040f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80040f6:	68fb      	ldr	r3, [r7, #12]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004106:	f000 fb6f 	bl	80047e8 <vTaskStartScheduler>
  
  return osOK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}

08004110 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af04      	add	r7, sp, #16
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d020      	beq.n	8004164 <osThreadCreate+0x54>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01c      	beq.n	8004164 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685c      	ldr	r4, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691e      	ldr	r6, [r3, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ffc9 	bl	80040d4 <makeFreeRtosPriority>
 8004142:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800414c:	9202      	str	r2, [sp, #8]
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	9100      	str	r1, [sp, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4632      	mov	r2, r6
 8004156:	4629      	mov	r1, r5
 8004158:	4620      	mov	r0, r4
 800415a:	f000 f8e8 	bl	800432e <xTaskCreateStatic>
 800415e:	4603      	mov	r3, r0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e01c      	b.n	800419e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685c      	ldr	r4, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004170:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ffab 	bl	80040d4 <makeFreeRtosPriority>
 800417e:	4602      	mov	r2, r0
 8004180:	f107 030c 	add.w	r3, r7, #12
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	9200      	str	r2, [sp, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4632      	mov	r2, r6
 800418c:	4629      	mov	r1, r5
 800418e:	4620      	mov	r0, r4
 8004190:	f000 f92a 	bl	80043e8 <xTaskCreate>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <osDelay+0x16>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	e000      	b.n	80041c0 <osDelay+0x18>
 80041be:	2301      	movs	r3, #1
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fadd 	bl	8004780 <vTaskDelay>
  
  return osOK;
 80041c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f103 0208 	add.w	r2, r3, #8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f04f 32ff 	mov.w	r2, #4294967295
 80041e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f103 0208 	add.w	r2, r3, #8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f103 0208 	add.w	r2, r3, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
}
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	d103      	bne.n	800428c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e00c      	b.n	80042a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3308      	adds	r3, #8
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	e002      	b.n	800429a <vListInsert+0x2e>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d2f6      	bcs.n	8004294 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6892      	ldr	r2, [r2, #8]
 80042f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6852      	ldr	r2, [r2, #4]
 80042fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d103      	bne.n	8004310 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800432e:	b580      	push	{r7, lr}
 8004330:	b08e      	sub	sp, #56	; 0x38
 8004332:	af04      	add	r7, sp, #16
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800433c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10a      	bne.n	8004358 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <xTaskCreateStatic+0x46>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	61fb      	str	r3, [r7, #28]
}
 8004370:	bf00      	nop
 8004372:	e7fe      	b.n	8004372 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004374:	23a0      	movs	r3, #160	; 0xa0
 8004376:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2ba0      	cmp	r3, #160	; 0xa0
 800437c:	d00a      	beq.n	8004394 <xTaskCreateStatic+0x66>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	61bb      	str	r3, [r7, #24]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004394:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01e      	beq.n	80043da <xTaskCreateStatic+0xac>
 800439c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01b      	beq.n	80043da <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043b4:	2300      	movs	r3, #0
 80043b6:	9303      	str	r3, [sp, #12]
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	9302      	str	r3, [sp, #8]
 80043bc:	f107 0314 	add.w	r3, r7, #20
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f851 	bl	8004474 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043d4:	f000 f8ec 	bl	80045b0 <prvAddNewTaskToReadyList>
 80043d8:	e001      	b.n	80043de <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043de:	697b      	ldr	r3, [r7, #20]
	}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3728      	adds	r7, #40	; 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08c      	sub	sp, #48	; 0x30
 80043ec:	af04      	add	r7, sp, #16
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 ff1f 	bl	8005240 <pvPortMalloc>
 8004402:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00e      	beq.n	8004428 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800440a:	20a0      	movs	r0, #160	; 0xa0
 800440c:	f000 ff18 	bl	8005240 <pvPortMalloc>
 8004410:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	631a      	str	r2, [r3, #48]	; 0x30
 800441e:	e005      	b.n	800442c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004420:	6978      	ldr	r0, [r7, #20]
 8004422:	f000 ffd9 	bl	80053d8 <vPortFree>
 8004426:	e001      	b.n	800442c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d017      	beq.n	8004462 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	2300      	movs	r3, #0
 800443e:	9303      	str	r3, [sp, #12]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	9302      	str	r3, [sp, #8]
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f80f 	bl	8004474 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004456:	69f8      	ldr	r0, [r7, #28]
 8004458:	f000 f8aa 	bl	80045b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800445c:	2301      	movs	r3, #1
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e002      	b.n	8004468 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004468:	69bb      	ldr	r3, [r7, #24]
	}
 800446a:	4618      	mov	r0, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800448c:	3b01      	subs	r3, #1
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f023 0307 	bic.w	r3, r3, #7
 800449a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	617b      	str	r3, [r7, #20]
}
 80044b8:	bf00      	nop
 80044ba:	e7fe      	b.n	80044ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01f      	beq.n	8004502 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	e012      	b.n	80044ee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	7819      	ldrb	r1, [r3, #0]
 80044d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	3334      	adds	r3, #52	; 0x34
 80044d8:	460a      	mov	r2, r1
 80044da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	3301      	adds	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b0f      	cmp	r3, #15
 80044f2:	d9e9      	bls.n	80044c8 <prvInitialiseNewTask+0x54>
 80044f4:	e000      	b.n	80044f8 <prvInitialiseNewTask+0x84>
			{
				break;
 80044f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004500:	e003      	b.n	800450a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	2b06      	cmp	r3, #6
 800450e:	d901      	bls.n	8004514 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004510:	2306      	movs	r3, #6
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004518:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800451e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	2200      	movs	r2, #0
 8004524:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	3304      	adds	r3, #4
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fe6f 	bl	800420e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	3318      	adds	r3, #24
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fe6a 	bl	800420e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	f1c3 0207 	rsb	r2, r3, #7
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	2200      	movs	r2, #0
 8004554:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	2200      	movs	r2, #0
 800455c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	334c      	adds	r3, #76	; 0x4c
 8004564:	224c      	movs	r2, #76	; 0x4c
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f001 f851 	bl	8005610 <memset>
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	4a0c      	ldr	r2, [pc, #48]	; (80045a4 <prvInitialiseNewTask+0x130>)
 8004572:	651a      	str	r2, [r3, #80]	; 0x50
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <prvInitialiseNewTask+0x134>)
 8004578:	655a      	str	r2, [r3, #84]	; 0x54
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	4a0b      	ldr	r2, [pc, #44]	; (80045ac <prvInitialiseNewTask+0x138>)
 800457e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	69b8      	ldr	r0, [r7, #24]
 8004586:	f000 fcab 	bl	8004ee0 <pxPortInitialiseStack>
 800458a:	4602      	mov	r2, r0
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800459c:	bf00      	nop
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	200012e4 	.word	0x200012e4
 80045a8:	2000134c 	.word	0x2000134c
 80045ac:	200013b4 	.word	0x200013b4

080045b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045b8:	f000 fd80 	bl	80050bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045bc:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <prvAddNewTaskToReadyList+0xb8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	4a29      	ldr	r2, [pc, #164]	; (8004668 <prvAddNewTaskToReadyList+0xb8>)
 80045c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045c6:	4b29      	ldr	r3, [pc, #164]	; (800466c <prvAddNewTaskToReadyList+0xbc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045ce:	4a27      	ldr	r2, [pc, #156]	; (800466c <prvAddNewTaskToReadyList+0xbc>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045d4:	4b24      	ldr	r3, [pc, #144]	; (8004668 <prvAddNewTaskToReadyList+0xb8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d110      	bne.n	80045fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045dc:	f000 fb58 	bl	8004c90 <prvInitialiseTaskLists>
 80045e0:	e00d      	b.n	80045fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045e2:	4b23      	ldr	r3, [pc, #140]	; (8004670 <prvAddNewTaskToReadyList+0xc0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <prvAddNewTaskToReadyList+0xbc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d802      	bhi.n	80045fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045f8:	4a1c      	ldr	r2, [pc, #112]	; (800466c <prvAddNewTaskToReadyList+0xbc>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <prvAddNewTaskToReadyList+0xc4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <prvAddNewTaskToReadyList+0xc4>)
 8004606:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	2201      	movs	r2, #1
 800460e:	409a      	lsls	r2, r3
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <prvAddNewTaskToReadyList+0xc8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4313      	orrs	r3, r2
 8004616:	4a18      	ldr	r2, [pc, #96]	; (8004678 <prvAddNewTaskToReadyList+0xc8>)
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4a15      	ldr	r2, [pc, #84]	; (800467c <prvAddNewTaskToReadyList+0xcc>)
 8004628:	441a      	add	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f7ff fdf8 	bl	8004226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004636:	f000 fd71 	bl	800511c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800463a:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <prvAddNewTaskToReadyList+0xc0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00e      	beq.n	8004660 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <prvAddNewTaskToReadyList+0xbc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	429a      	cmp	r2, r3
 800464e:	d207      	bcs.n	8004660 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <prvAddNewTaskToReadyList+0xd0>)
 8004652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000690 	.word	0x20000690
 800466c:	20000590 	.word	0x20000590
 8004670:	2000069c 	.word	0x2000069c
 8004674:	200006ac 	.word	0x200006ac
 8004678:	20000698 	.word	0x20000698
 800467c:	20000594 	.word	0x20000594
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800468e:	2300      	movs	r3, #0
 8004690:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <vTaskDelayUntil+0x2a>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	617b      	str	r3, [r7, #20]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <vTaskDelayUntil+0x46>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	613b      	str	r3, [r7, #16]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80046ca:	4b2a      	ldr	r3, [pc, #168]	; (8004774 <vTaskDelayUntil+0xf0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <vTaskDelayUntil+0x64>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	60fb      	str	r3, [r7, #12]
}
 80046e4:	bf00      	nop
 80046e6:	e7fe      	b.n	80046e6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80046e8:	f000 f8e8 	bl	80048bc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80046ec:	4b22      	ldr	r3, [pc, #136]	; (8004778 <vTaskDelayUntil+0xf4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	4413      	add	r3, r2
 80046fa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	429a      	cmp	r2, r3
 8004704:	d20b      	bcs.n	800471e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	429a      	cmp	r2, r3
 800470e:	d211      	bcs.n	8004734 <vTaskDelayUntil+0xb0>
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	429a      	cmp	r2, r3
 8004716:	d90d      	bls.n	8004734 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004718:	2301      	movs	r3, #1
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
 800471c:	e00a      	b.n	8004734 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	429a      	cmp	r2, r3
 8004726:	d303      	bcc.n	8004730 <vTaskDelayUntil+0xac>
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	429a      	cmp	r2, r3
 800472e:	d901      	bls.n	8004734 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004730:	2301      	movs	r3, #1
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d006      	beq.n	800474e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2100      	movs	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fb63 	bl	8004e14 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800474e:	f000 f8c3 	bl	80048d8 <xTaskResumeAll>
 8004752:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <vTaskDelayUntil+0xf8>)
 800475c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800476a:	bf00      	nop
 800476c:	3728      	adds	r7, #40	; 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200006b8 	.word	0x200006b8
 8004778:	20000694 	.word	0x20000694
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d017      	beq.n	80047c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004792:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <vTaskDelay+0x60>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <vTaskDelay+0x30>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60bb      	str	r3, [r7, #8]
}
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047b0:	f000 f884 	bl	80048bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047b4:	2100      	movs	r1, #0
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fb2c 	bl	8004e14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047bc:	f000 f88c 	bl	80048d8 <xTaskResumeAll>
 80047c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d107      	bne.n	80047d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <vTaskDelay+0x64>)
 80047ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	200006b8 	.word	0x200006b8
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047f6:	463a      	mov	r2, r7
 80047f8:	1d39      	adds	r1, r7, #4
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fc f986 	bl	8000b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	9202      	str	r2, [sp, #8]
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	2300      	movs	r3, #0
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2300      	movs	r3, #0
 8004814:	460a      	mov	r2, r1
 8004816:	4921      	ldr	r1, [pc, #132]	; (800489c <vTaskStartScheduler+0xb4>)
 8004818:	4821      	ldr	r0, [pc, #132]	; (80048a0 <vTaskStartScheduler+0xb8>)
 800481a:	f7ff fd88 	bl	800432e <xTaskCreateStatic>
 800481e:	4603      	mov	r3, r0
 8004820:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <vTaskStartScheduler+0xbc>)
 8004822:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004824:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <vTaskStartScheduler+0xbc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800482c:	2301      	movs	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	e001      	b.n	8004836 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d11b      	bne.n	8004874 <vTaskStartScheduler+0x8c>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	613b      	str	r3, [r7, #16]
}
 800484e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004850:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <vTaskStartScheduler+0xc0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	334c      	adds	r3, #76	; 0x4c
 8004856:	4a15      	ldr	r2, [pc, #84]	; (80048ac <vTaskStartScheduler+0xc4>)
 8004858:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <vTaskStartScheduler+0xc8>)
 800485c:	f04f 32ff 	mov.w	r2, #4294967295
 8004860:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <vTaskStartScheduler+0xcc>)
 8004864:	2201      	movs	r2, #1
 8004866:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <vTaskStartScheduler+0xd0>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800486e:	f000 fbb3 	bl	8004fd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004872:	e00e      	b.n	8004892 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d10a      	bne.n	8004892 <vTaskStartScheduler+0xaa>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	60fb      	str	r3, [r7, #12]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <vTaskStartScheduler+0xa8>
}
 8004892:	bf00      	nop
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	08005850 	.word	0x08005850
 80048a0:	08004c61 	.word	0x08004c61
 80048a4:	200006b4 	.word	0x200006b4
 80048a8:	20000590 	.word	0x20000590
 80048ac:	2000005c 	.word	0x2000005c
 80048b0:	200006b0 	.word	0x200006b0
 80048b4:	2000069c 	.word	0x2000069c
 80048b8:	20000694 	.word	0x20000694

080048bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <vTaskSuspendAll+0x18>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	4a03      	ldr	r2, [pc, #12]	; (80048d4 <vTaskSuspendAll+0x18>)
 80048c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048ca:	bf00      	nop
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	200006b8 	.word	0x200006b8

080048d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048e6:	4b41      	ldr	r3, [pc, #260]	; (80049ec <xTaskResumeAll+0x114>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <xTaskResumeAll+0x2c>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	603b      	str	r3, [r7, #0]
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004904:	f000 fbda 	bl	80050bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004908:	4b38      	ldr	r3, [pc, #224]	; (80049ec <xTaskResumeAll+0x114>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3b01      	subs	r3, #1
 800490e:	4a37      	ldr	r2, [pc, #220]	; (80049ec <xTaskResumeAll+0x114>)
 8004910:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <xTaskResumeAll+0x114>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d161      	bne.n	80049de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800491a:	4b35      	ldr	r3, [pc, #212]	; (80049f0 <xTaskResumeAll+0x118>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d05d      	beq.n	80049de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004922:	e02e      	b.n	8004982 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004924:	4b33      	ldr	r3, [pc, #204]	; (80049f4 <xTaskResumeAll+0x11c>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3318      	adds	r3, #24
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fcd3 	bl	80042dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3304      	adds	r3, #4
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fcce 	bl	80042dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	2201      	movs	r2, #1
 8004946:	409a      	lsls	r2, r3
 8004948:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <xTaskResumeAll+0x120>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4313      	orrs	r3, r2
 800494e:	4a2a      	ldr	r2, [pc, #168]	; (80049f8 <xTaskResumeAll+0x120>)
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4a27      	ldr	r2, [pc, #156]	; (80049fc <xTaskResumeAll+0x124>)
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7ff fc5c 	bl	8004226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004972:	4b23      	ldr	r3, [pc, #140]	; (8004a00 <xTaskResumeAll+0x128>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	429a      	cmp	r2, r3
 800497a:	d302      	bcc.n	8004982 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800497c:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <xTaskResumeAll+0x12c>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004982:	4b1c      	ldr	r3, [pc, #112]	; (80049f4 <xTaskResumeAll+0x11c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1cc      	bne.n	8004924 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004990:	f000 fa20 	bl	8004dd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004994:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <xTaskResumeAll+0x130>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049a0:	f000 f844 	bl	8004a2c <xTaskIncrementTick>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80049aa:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <xTaskResumeAll+0x12c>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f1      	bne.n	80049a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80049bc:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <xTaskResumeAll+0x130>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <xTaskResumeAll+0x12c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049ca:	2301      	movs	r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <xTaskResumeAll+0x134>)
 80049d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049de:	f000 fb9d 	bl	800511c <vPortExitCritical>

	return xAlreadyYielded;
 80049e2:	68bb      	ldr	r3, [r7, #8]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	200006b8 	.word	0x200006b8
 80049f0:	20000690 	.word	0x20000690
 80049f4:	20000650 	.word	0x20000650
 80049f8:	20000698 	.word	0x20000698
 80049fc:	20000594 	.word	0x20000594
 8004a00:	20000590 	.word	0x20000590
 8004a04:	200006a4 	.word	0x200006a4
 8004a08:	200006a0 	.word	0x200006a0
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a16:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <xTaskGetTickCount+0x18>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a1c:	687b      	ldr	r3, [r7, #4]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	20000694 	.word	0x20000694

08004a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a36:	4b4e      	ldr	r3, [pc, #312]	; (8004b70 <xTaskIncrementTick+0x144>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f040 808e 	bne.w	8004b5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a40:	4b4c      	ldr	r3, [pc, #304]	; (8004b74 <xTaskIncrementTick+0x148>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a48:	4a4a      	ldr	r2, [pc, #296]	; (8004b74 <xTaskIncrementTick+0x148>)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d120      	bne.n	8004a96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a54:	4b48      	ldr	r3, [pc, #288]	; (8004b78 <xTaskIncrementTick+0x14c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <xTaskIncrementTick+0x48>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	603b      	str	r3, [r7, #0]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <xTaskIncrementTick+0x46>
 8004a74:	4b40      	ldr	r3, [pc, #256]	; (8004b78 <xTaskIncrementTick+0x14c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <xTaskIncrementTick+0x150>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3e      	ldr	r2, [pc, #248]	; (8004b78 <xTaskIncrementTick+0x14c>)
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4a3e      	ldr	r2, [pc, #248]	; (8004b7c <xTaskIncrementTick+0x150>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	4b3d      	ldr	r3, [pc, #244]	; (8004b80 <xTaskIncrementTick+0x154>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	4a3c      	ldr	r2, [pc, #240]	; (8004b80 <xTaskIncrementTick+0x154>)
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	f000 f99f 	bl	8004dd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <xTaskIncrementTick+0x158>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d348      	bcc.n	8004b32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa0:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <xTaskIncrementTick+0x14c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aaa:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <xTaskIncrementTick+0x158>)
 8004aac:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab0:	601a      	str	r2, [r3, #0]
					break;
 8004ab2:	e03e      	b.n	8004b32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <xTaskIncrementTick+0x14c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d203      	bcs.n	8004ad4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004acc:	4a2d      	ldr	r2, [pc, #180]	; (8004b84 <xTaskIncrementTick+0x158>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ad2:	e02e      	b.n	8004b32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fbff 	bl	80042dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d004      	beq.n	8004af0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	3318      	adds	r3, #24
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fbf6 	bl	80042dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	2201      	movs	r2, #1
 8004af6:	409a      	lsls	r2, r3
 8004af8:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <xTaskIncrementTick+0x15c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	4a22      	ldr	r2, [pc, #136]	; (8004b88 <xTaskIncrementTick+0x15c>)
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4a1f      	ldr	r2, [pc, #124]	; (8004b8c <xTaskIncrementTick+0x160>)
 8004b10:	441a      	add	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f7ff fb84 	bl	8004226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b22:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <xTaskIncrementTick+0x164>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3b9      	bcc.n	8004aa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b30:	e7b6      	b.n	8004aa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b32:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <xTaskIncrementTick+0x164>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b38:	4914      	ldr	r1, [pc, #80]	; (8004b8c <xTaskIncrementTick+0x160>)
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d901      	bls.n	8004b4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b4e:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <xTaskIncrementTick+0x168>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004b56:	2301      	movs	r3, #1
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	e004      	b.n	8004b66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <xTaskIncrementTick+0x16c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3301      	adds	r3, #1
 8004b62:	4a0d      	ldr	r2, [pc, #52]	; (8004b98 <xTaskIncrementTick+0x16c>)
 8004b64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b66:	697b      	ldr	r3, [r7, #20]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	200006b8 	.word	0x200006b8
 8004b74:	20000694 	.word	0x20000694
 8004b78:	20000648 	.word	0x20000648
 8004b7c:	2000064c 	.word	0x2000064c
 8004b80:	200006a8 	.word	0x200006a8
 8004b84:	200006b0 	.word	0x200006b0
 8004b88:	20000698 	.word	0x20000698
 8004b8c:	20000594 	.word	0x20000594
 8004b90:	20000590 	.word	0x20000590
 8004b94:	200006a4 	.word	0x200006a4
 8004b98:	200006a0 	.word	0x200006a0

08004b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ba2:	4b29      	ldr	r3, [pc, #164]	; (8004c48 <vTaskSwitchContext+0xac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004baa:	4b28      	ldr	r3, [pc, #160]	; (8004c4c <vTaskSwitchContext+0xb0>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004bb0:	e044      	b.n	8004c3c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004bb2:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <vTaskSwitchContext+0xb0>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb8:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <vTaskSwitchContext+0xb4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	fab3 f383 	clz	r3, r3
 8004bc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004bc6:	7afb      	ldrb	r3, [r7, #11]
 8004bc8:	f1c3 031f 	rsb	r3, r3, #31
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	4921      	ldr	r1, [pc, #132]	; (8004c54 <vTaskSwitchContext+0xb8>)
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	607b      	str	r3, [r7, #4]
}
 8004bf4:	bf00      	nop
 8004bf6:	e7fe      	b.n	8004bf6 <vTaskSwitchContext+0x5a>
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4a14      	ldr	r2, [pc, #80]	; (8004c54 <vTaskSwitchContext+0xb8>)
 8004c04:	4413      	add	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d104      	bne.n	8004c28 <vTaskSwitchContext+0x8c>
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <vTaskSwitchContext+0xbc>)
 8004c30:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c32:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <vTaskSwitchContext+0xbc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	334c      	adds	r3, #76	; 0x4c
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <vTaskSwitchContext+0xc0>)
 8004c3a:	6013      	str	r3, [r2, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	200006b8 	.word	0x200006b8
 8004c4c:	200006a4 	.word	0x200006a4
 8004c50:	20000698 	.word	0x20000698
 8004c54:	20000594 	.word	0x20000594
 8004c58:	20000590 	.word	0x20000590
 8004c5c:	2000005c 	.word	0x2000005c

08004c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c68:	f000 f852 	bl	8004d10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <prvIdleTask+0x28>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d9f9      	bls.n	8004c68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <prvIdleTask+0x2c>)
 8004c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c84:	e7f0      	b.n	8004c68 <prvIdleTask+0x8>
 8004c86:	bf00      	nop
 8004c88:	20000594 	.word	0x20000594
 8004c8c:	e000ed04 	.word	0xe000ed04

08004c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c96:	2300      	movs	r3, #0
 8004c98:	607b      	str	r3, [r7, #4]
 8004c9a:	e00c      	b.n	8004cb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4a12      	ldr	r2, [pc, #72]	; (8004cf0 <prvInitialiseTaskLists+0x60>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fa90 	bl	80041d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	607b      	str	r3, [r7, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b06      	cmp	r3, #6
 8004cba:	d9ef      	bls.n	8004c9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cbc:	480d      	ldr	r0, [pc, #52]	; (8004cf4 <prvInitialiseTaskLists+0x64>)
 8004cbe:	f7ff fa87 	bl	80041d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cc2:	480d      	ldr	r0, [pc, #52]	; (8004cf8 <prvInitialiseTaskLists+0x68>)
 8004cc4:	f7ff fa84 	bl	80041d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cc8:	480c      	ldr	r0, [pc, #48]	; (8004cfc <prvInitialiseTaskLists+0x6c>)
 8004cca:	f7ff fa81 	bl	80041d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cce:	480c      	ldr	r0, [pc, #48]	; (8004d00 <prvInitialiseTaskLists+0x70>)
 8004cd0:	f7ff fa7e 	bl	80041d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cd4:	480b      	ldr	r0, [pc, #44]	; (8004d04 <prvInitialiseTaskLists+0x74>)
 8004cd6:	f7ff fa7b 	bl	80041d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <prvInitialiseTaskLists+0x78>)
 8004cdc:	4a05      	ldr	r2, [pc, #20]	; (8004cf4 <prvInitialiseTaskLists+0x64>)
 8004cde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <prvInitialiseTaskLists+0x7c>)
 8004ce2:	4a05      	ldr	r2, [pc, #20]	; (8004cf8 <prvInitialiseTaskLists+0x68>)
 8004ce4:	601a      	str	r2, [r3, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000594 	.word	0x20000594
 8004cf4:	20000620 	.word	0x20000620
 8004cf8:	20000634 	.word	0x20000634
 8004cfc:	20000650 	.word	0x20000650
 8004d00:	20000664 	.word	0x20000664
 8004d04:	2000067c 	.word	0x2000067c
 8004d08:	20000648 	.word	0x20000648
 8004d0c:	2000064c 	.word	0x2000064c

08004d10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d16:	e019      	b.n	8004d4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d18:	f000 f9d0 	bl	80050bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d1c:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <prvCheckTasksWaitingTermination+0x50>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff fad7 	bl	80042dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <prvCheckTasksWaitingTermination+0x54>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	4a0b      	ldr	r2, [pc, #44]	; (8004d64 <prvCheckTasksWaitingTermination+0x54>)
 8004d36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <prvCheckTasksWaitingTermination+0x58>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <prvCheckTasksWaitingTermination+0x58>)
 8004d40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d42:	f000 f9eb 	bl	800511c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f810 	bl	8004d6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <prvCheckTasksWaitingTermination+0x58>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e1      	bne.n	8004d18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000664 	.word	0x20000664
 8004d64:	20000690 	.word	0x20000690
 8004d68:	20000678 	.word	0x20000678

08004d6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	334c      	adds	r3, #76	; 0x4c
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fc51 	bl	8005620 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d108      	bne.n	8004d9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fb23 	bl	80053d8 <vPortFree>
				vPortFree( pxTCB );
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fb20 	bl	80053d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d98:	e018      	b.n	8004dcc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d103      	bne.n	8004dac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fb17 	bl	80053d8 <vPortFree>
	}
 8004daa:	e00f      	b.n	8004dcc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d00a      	beq.n	8004dcc <prvDeleteTCB+0x60>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60fb      	str	r3, [r7, #12]
}
 8004dc8:	bf00      	nop
 8004dca:	e7fe      	b.n	8004dca <prvDeleteTCB+0x5e>
	}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <prvResetNextTaskUnblockTime+0x38>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d104      	bne.n	8004dee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004de4:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <prvResetNextTaskUnblockTime+0x3c>)
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004dec:	e008      	b.n	8004e00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dee:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <prvResetNextTaskUnblockTime+0x38>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4a04      	ldr	r2, [pc, #16]	; (8004e10 <prvResetNextTaskUnblockTime+0x3c>)
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000648 	.word	0x20000648
 8004e10:	200006b0 	.word	0x200006b0

08004e14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e1e:	4b29      	ldr	r3, [pc, #164]	; (8004ec4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e24:	4b28      	ldr	r3, [pc, #160]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fa56 	bl	80042dc <uxListRemove>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43da      	mvns	r2, r3
 8004e44:	4b21      	ldr	r3, [pc, #132]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	4a20      	ldr	r2, [pc, #128]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d10a      	bne.n	8004e6c <prvAddCurrentTaskToDelayedList+0x58>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3304      	adds	r3, #4
 8004e62:	4619      	mov	r1, r3
 8004e64:	481a      	ldr	r0, [pc, #104]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e66:	f7ff f9de 	bl	8004226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e6a:	e026      	b.n	8004eba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e74:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d209      	bcs.n	8004e98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e84:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7ff f9eb 	bl	800426c <vListInsert>
}
 8004e96:	e010      	b.n	8004eba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e98:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f7ff f9e1 	bl	800426c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eaa:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d202      	bcs.n	8004eba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004eb4:	4a09      	ldr	r2, [pc, #36]	; (8004edc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6013      	str	r3, [r2, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000694 	.word	0x20000694
 8004ec8:	20000590 	.word	0x20000590
 8004ecc:	20000698 	.word	0x20000698
 8004ed0:	2000067c 	.word	0x2000067c
 8004ed4:	2000064c 	.word	0x2000064c
 8004ed8:	20000648 	.word	0x20000648
 8004edc:	200006b0 	.word	0x200006b0

08004ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3b04      	subs	r3, #4
 8004ef0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3b04      	subs	r3, #4
 8004f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f10:	4a08      	ldr	r2, [pc, #32]	; (8004f34 <pxPortInitialiseStack+0x54>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b14      	subs	r3, #20
 8004f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3b20      	subs	r3, #32
 8004f26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f28:	68fb      	ldr	r3, [r7, #12]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr
 8004f34:	08004f39 	.word	0x08004f39

08004f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <prvTaskExitError+0x54>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d00a      	beq.n	8004f62 <prvTaskExitError+0x2a>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	60fb      	str	r3, [r7, #12]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <prvTaskExitError+0x28>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	60bb      	str	r3, [r7, #8]
}
 8004f74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f76:	bf00      	nop
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0fc      	beq.n	8004f78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	2000000c 	.word	0x2000000c

08004f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <pxCurrentTCBConst2>)
 8004f92:	6819      	ldr	r1, [r3, #0]
 8004f94:	6808      	ldr	r0, [r1, #0]
 8004f96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f9a:	f380 8809 	msr	PSP, r0
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8811 	msr	BASEPRI, r0
 8004faa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004fae:	4770      	bx	lr

08004fb0 <pxCurrentTCBConst2>:
 8004fb0:	20000590 	.word	0x20000590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop

08004fb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004fb8:	4806      	ldr	r0, [pc, #24]	; (8004fd4 <prvPortStartFirstTask+0x1c>)
 8004fba:	6800      	ldr	r0, [r0, #0]
 8004fbc:	6800      	ldr	r0, [r0, #0]
 8004fbe:	f380 8808 	msr	MSP, r0
 8004fc2:	b662      	cpsie	i
 8004fc4:	b661      	cpsie	f
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	df00      	svc	0
 8004fd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fd2:	bf00      	nop
 8004fd4:	e000ed08 	.word	0xe000ed08

08004fd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fde:	4b32      	ldr	r3, [pc, #200]	; (80050a8 <xPortStartScheduler+0xd0>)
 8004fe0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	22ff      	movs	r2, #255	; 0xff
 8004fee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005000:	b2da      	uxtb	r2, r3
 8005002:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <xPortStartScheduler+0xd4>)
 8005004:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005006:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <xPortStartScheduler+0xd8>)
 8005008:	2207      	movs	r2, #7
 800500a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800500c:	e009      	b.n	8005022 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800500e:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <xPortStartScheduler+0xd8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3b01      	subs	r3, #1
 8005014:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <xPortStartScheduler+0xd8>)
 8005016:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	b2db      	uxtb	r3, r3
 8005020:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b80      	cmp	r3, #128	; 0x80
 800502c:	d0ef      	beq.n	800500e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800502e:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <xPortStartScheduler+0xd8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1c3 0307 	rsb	r3, r3, #7
 8005036:	2b04      	cmp	r3, #4
 8005038:	d00a      	beq.n	8005050 <xPortStartScheduler+0x78>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	60bb      	str	r3, [r7, #8]
}
 800504c:	bf00      	nop
 800504e:	e7fe      	b.n	800504e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005050:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <xPortStartScheduler+0xd8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	4a16      	ldr	r2, [pc, #88]	; (80050b0 <xPortStartScheduler+0xd8>)
 8005058:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <xPortStartScheduler+0xd8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005062:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <xPortStartScheduler+0xd8>)
 8005064:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800506e:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <xPortStartScheduler+0xdc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <xPortStartScheduler+0xdc>)
 8005074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005078:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <xPortStartScheduler+0xdc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a0d      	ldr	r2, [pc, #52]	; (80050b4 <xPortStartScheduler+0xdc>)
 8005080:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005084:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005086:	f000 f8b9 	bl	80051fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800508a:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <xPortStartScheduler+0xe0>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005090:	f7ff ff92 	bl	8004fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005094:	f7ff fd82 	bl	8004b9c <vTaskSwitchContext>
	prvTaskExitError();
 8005098:	f7ff ff4e 	bl	8004f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	e000e400 	.word	0xe000e400
 80050ac:	200006bc 	.word	0x200006bc
 80050b0:	200006c0 	.word	0x200006c0
 80050b4:	e000ed20 	.word	0xe000ed20
 80050b8:	2000000c 	.word	0x2000000c

080050bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	607b      	str	r3, [r7, #4]
}
 80050d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050d6:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <vPortEnterCritical+0x58>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3301      	adds	r3, #1
 80050dc:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <vPortEnterCritical+0x58>)
 80050de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <vPortEnterCritical+0x58>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d10f      	bne.n	8005108 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <vPortEnterCritical+0x5c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <vPortEnterCritical+0x4c>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	603b      	str	r3, [r7, #0]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <vPortEnterCritical+0x4a>
	}
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	2000000c 	.word	0x2000000c
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <vPortExitCritical+0x4c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10a      	bne.n	8005140 <vPortExitCritical+0x24>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	607b      	str	r3, [r7, #4]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <vPortExitCritical+0x4c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3b01      	subs	r3, #1
 8005146:	4a08      	ldr	r2, [pc, #32]	; (8005168 <vPortExitCritical+0x4c>)
 8005148:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800514a:	4b07      	ldr	r3, [pc, #28]	; (8005168 <vPortExitCritical+0x4c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d105      	bne.n	800515e <vPortExitCritical+0x42>
 8005152:	2300      	movs	r3, #0
 8005154:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800515c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr
 8005168:	2000000c 	.word	0x2000000c
 800516c:	00000000 	.word	0x00000000

08005170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005170:	f3ef 8009 	mrs	r0, PSP
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <pxCurrentTCBConst>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005180:	6010      	str	r0, [r2, #0]
 8005182:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005186:	f04f 0050 	mov.w	r0, #80	; 0x50
 800518a:	f380 8811 	msr	BASEPRI, r0
 800518e:	f7ff fd05 	bl	8004b9c <vTaskSwitchContext>
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f380 8811 	msr	BASEPRI, r0
 800519a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	6808      	ldr	r0, [r1, #0]
 80051a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051a6:	f380 8809 	msr	PSP, r0
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	4770      	bx	lr

080051b0 <pxCurrentTCBConst>:
 80051b0:	20000590 	.word	0x20000590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop

080051b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
}
 80051d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051d2:	f7ff fc2b 	bl	8004a2c <xTaskIncrementTick>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <SysTick_Handler+0x40>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f383 8811 	msr	BASEPRI, r3
}
 80051ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <vPortSetupTimerInterrupt+0x30>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005206:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <vPortSetupTimerInterrupt+0x34>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800520c:	4b09      	ldr	r3, [pc, #36]	; (8005234 <vPortSetupTimerInterrupt+0x38>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a09      	ldr	r2, [pc, #36]	; (8005238 <vPortSetupTimerInterrupt+0x3c>)
 8005212:	fba2 2303 	umull	r2, r3, r2, r3
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	4a08      	ldr	r2, [pc, #32]	; (800523c <vPortSetupTimerInterrupt+0x40>)
 800521a:	3b01      	subs	r3, #1
 800521c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800521e:	4b03      	ldr	r3, [pc, #12]	; (800522c <vPortSetupTimerInterrupt+0x30>)
 8005220:	2207      	movs	r2, #7
 8005222:	601a      	str	r2, [r3, #0]
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	e000e010 	.word	0xe000e010
 8005230:	e000e018 	.word	0xe000e018
 8005234:	20000000 	.word	0x20000000
 8005238:	10624dd3 	.word	0x10624dd3
 800523c:	e000e014 	.word	0xe000e014

08005240 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800524c:	f7ff fb36 	bl	80048bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005250:	4b5b      	ldr	r3, [pc, #364]	; (80053c0 <pvPortMalloc+0x180>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005258:	f000 f920 	bl	800549c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800525c:	4b59      	ldr	r3, [pc, #356]	; (80053c4 <pvPortMalloc+0x184>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 8093 	bne.w	8005390 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01d      	beq.n	80052ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005270:	2208      	movs	r2, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	2b00      	cmp	r3, #0
 8005280:	d014      	beq.n	80052ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f023 0307 	bic.w	r3, r3, #7
 8005288:	3308      	adds	r3, #8
 800528a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <pvPortMalloc+0x6c>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	617b      	str	r3, [r7, #20]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d06e      	beq.n	8005390 <pvPortMalloc+0x150>
 80052b2:	4b45      	ldr	r3, [pc, #276]	; (80053c8 <pvPortMalloc+0x188>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d869      	bhi.n	8005390 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052bc:	4b43      	ldr	r3, [pc, #268]	; (80053cc <pvPortMalloc+0x18c>)
 80052be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052c0:	4b42      	ldr	r3, [pc, #264]	; (80053cc <pvPortMalloc+0x18c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052c6:	e004      	b.n	80052d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d903      	bls.n	80052e4 <pvPortMalloc+0xa4>
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f1      	bne.n	80052c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052e4:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <pvPortMalloc+0x180>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d050      	beq.n	8005390 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2208      	movs	r2, #8
 80052f4:	4413      	add	r3, r2
 80052f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	1ad2      	subs	r2, r2, r3
 8005308:	2308      	movs	r3, #8
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	429a      	cmp	r2, r3
 800530e:	d91f      	bls.n	8005350 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4413      	add	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <pvPortMalloc+0xf8>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	613b      	str	r3, [r7, #16]
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800534a:	69b8      	ldr	r0, [r7, #24]
 800534c:	f000 f908 	bl	8005560 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005350:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <pvPortMalloc+0x188>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	4a1b      	ldr	r2, [pc, #108]	; (80053c8 <pvPortMalloc+0x188>)
 800535c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800535e:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <pvPortMalloc+0x188>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <pvPortMalloc+0x190>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d203      	bcs.n	8005372 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800536a:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <pvPortMalloc+0x188>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a18      	ldr	r2, [pc, #96]	; (80053d0 <pvPortMalloc+0x190>)
 8005370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <pvPortMalloc+0x184>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	431a      	orrs	r2, r3
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005386:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <pvPortMalloc+0x194>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3301      	adds	r3, #1
 800538c:	4a11      	ldr	r2, [pc, #68]	; (80053d4 <pvPortMalloc+0x194>)
 800538e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005390:	f7ff faa2 	bl	80048d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <pvPortMalloc+0x174>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	60fb      	str	r3, [r7, #12]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <pvPortMalloc+0x172>
	return pvReturn;
 80053b4:	69fb      	ldr	r3, [r7, #28]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3728      	adds	r7, #40	; 0x28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	200012cc 	.word	0x200012cc
 80053c4:	200012e0 	.word	0x200012e0
 80053c8:	200012d0 	.word	0x200012d0
 80053cc:	200012c4 	.word	0x200012c4
 80053d0:	200012d4 	.word	0x200012d4
 80053d4:	200012d8 	.word	0x200012d8

080053d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d04d      	beq.n	8005486 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053ea:	2308      	movs	r3, #8
 80053ec:	425b      	negs	r3, r3
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4413      	add	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	4b24      	ldr	r3, [pc, #144]	; (8005490 <vPortFree+0xb8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <vPortFree+0x44>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	60fb      	str	r3, [r7, #12]
}
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <vPortFree+0x62>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	60bb      	str	r3, [r7, #8]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	4b14      	ldr	r3, [pc, #80]	; (8005490 <vPortFree+0xb8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01e      	beq.n	8005486 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d11a      	bne.n	8005486 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <vPortFree+0xb8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	43db      	mvns	r3, r3
 800545a:	401a      	ands	r2, r3
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005460:	f7ff fa2c 	bl	80048bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <vPortFree+0xbc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4413      	add	r3, r2
 800546e:	4a09      	ldr	r2, [pc, #36]	; (8005494 <vPortFree+0xbc>)
 8005470:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005472:	6938      	ldr	r0, [r7, #16]
 8005474:	f000 f874 	bl	8005560 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005478:	4b07      	ldr	r3, [pc, #28]	; (8005498 <vPortFree+0xc0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	4a06      	ldr	r2, [pc, #24]	; (8005498 <vPortFree+0xc0>)
 8005480:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005482:	f7ff fa29 	bl	80048d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005486:	bf00      	nop
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	200012e0 	.word	0x200012e0
 8005494:	200012d0 	.word	0x200012d0
 8005498:	200012dc 	.word	0x200012dc

0800549c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80054a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054a8:	4b27      	ldr	r3, [pc, #156]	; (8005548 <prvHeapInit+0xac>)
 80054aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00c      	beq.n	80054d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3307      	adds	r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0307 	bic.w	r3, r3, #7
 80054c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <prvHeapInit+0xac>)
 80054cc:	4413      	add	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054d4:	4a1d      	ldr	r2, [pc, #116]	; (800554c <prvHeapInit+0xb0>)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054da:	4b1c      	ldr	r3, [pc, #112]	; (800554c <prvHeapInit+0xb0>)
 80054dc:	2200      	movs	r2, #0
 80054de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	4413      	add	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054e8:	2208      	movs	r2, #8
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0307 	bic.w	r3, r3, #7
 80054f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4a15      	ldr	r2, [pc, #84]	; (8005550 <prvHeapInit+0xb4>)
 80054fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054fe:	4b14      	ldr	r3, [pc, #80]	; (8005550 <prvHeapInit+0xb4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <prvHeapInit+0xb4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800551c:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <prvHeapInit+0xb4>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <prvHeapInit+0xb8>)
 800552a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a09      	ldr	r2, [pc, #36]	; (8005558 <prvHeapInit+0xbc>)
 8005532:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <prvHeapInit+0xc0>)
 8005536:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800553a:	601a      	str	r2, [r3, #0]
}
 800553c:	bf00      	nop
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	200006c4 	.word	0x200006c4
 800554c:	200012c4 	.word	0x200012c4
 8005550:	200012cc 	.word	0x200012cc
 8005554:	200012d4 	.word	0x200012d4
 8005558:	200012d0 	.word	0x200012d0
 800555c:	200012e0 	.word	0x200012e0

08005560 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005568:	4b27      	ldr	r3, [pc, #156]	; (8005608 <prvInsertBlockIntoFreeList+0xa8>)
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	e002      	b.n	8005574 <prvInsertBlockIntoFreeList+0x14>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d8f7      	bhi.n	800556e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	4413      	add	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d108      	bne.n	80055a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	441a      	add	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	441a      	add	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d118      	bne.n	80055e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b14      	ldr	r3, [pc, #80]	; (800560c <prvInsertBlockIntoFreeList+0xac>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d00d      	beq.n	80055de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	441a      	add	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e008      	b.n	80055f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <prvInsertBlockIntoFreeList+0xac>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e003      	b.n	80055f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d002      	beq.n	80055fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	200012c4 	.word	0x200012c4
 800560c:	200012cc 	.word	0x200012cc

08005610 <memset>:
 8005610:	4603      	mov	r3, r0
 8005612:	4402      	add	r2, r0
 8005614:	4293      	cmp	r3, r2
 8005616:	d100      	bne.n	800561a <memset+0xa>
 8005618:	4770      	bx	lr
 800561a:	f803 1b01 	strb.w	r1, [r3], #1
 800561e:	e7f9      	b.n	8005614 <memset+0x4>

08005620 <_reclaim_reent>:
 8005620:	4b29      	ldr	r3, [pc, #164]	; (80056c8 <_reclaim_reent+0xa8>)
 8005622:	b570      	push	{r4, r5, r6, lr}
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4604      	mov	r4, r0
 8005628:	4283      	cmp	r3, r0
 800562a:	d04b      	beq.n	80056c4 <_reclaim_reent+0xa4>
 800562c:	69c3      	ldr	r3, [r0, #28]
 800562e:	b143      	cbz	r3, 8005642 <_reclaim_reent+0x22>
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d144      	bne.n	80056c0 <_reclaim_reent+0xa0>
 8005636:	69e3      	ldr	r3, [r4, #28]
 8005638:	6819      	ldr	r1, [r3, #0]
 800563a:	b111      	cbz	r1, 8005642 <_reclaim_reent+0x22>
 800563c:	4620      	mov	r0, r4
 800563e:	f000 f86b 	bl	8005718 <_free_r>
 8005642:	6961      	ldr	r1, [r4, #20]
 8005644:	b111      	cbz	r1, 800564c <_reclaim_reent+0x2c>
 8005646:	4620      	mov	r0, r4
 8005648:	f000 f866 	bl	8005718 <_free_r>
 800564c:	69e1      	ldr	r1, [r4, #28]
 800564e:	b111      	cbz	r1, 8005656 <_reclaim_reent+0x36>
 8005650:	4620      	mov	r0, r4
 8005652:	f000 f861 	bl	8005718 <_free_r>
 8005656:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005658:	b111      	cbz	r1, 8005660 <_reclaim_reent+0x40>
 800565a:	4620      	mov	r0, r4
 800565c:	f000 f85c 	bl	8005718 <_free_r>
 8005660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005662:	b111      	cbz	r1, 800566a <_reclaim_reent+0x4a>
 8005664:	4620      	mov	r0, r4
 8005666:	f000 f857 	bl	8005718 <_free_r>
 800566a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800566c:	b111      	cbz	r1, 8005674 <_reclaim_reent+0x54>
 800566e:	4620      	mov	r0, r4
 8005670:	f000 f852 	bl	8005718 <_free_r>
 8005674:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005676:	b111      	cbz	r1, 800567e <_reclaim_reent+0x5e>
 8005678:	4620      	mov	r0, r4
 800567a:	f000 f84d 	bl	8005718 <_free_r>
 800567e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005680:	b111      	cbz	r1, 8005688 <_reclaim_reent+0x68>
 8005682:	4620      	mov	r0, r4
 8005684:	f000 f848 	bl	8005718 <_free_r>
 8005688:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800568a:	b111      	cbz	r1, 8005692 <_reclaim_reent+0x72>
 800568c:	4620      	mov	r0, r4
 800568e:	f000 f843 	bl	8005718 <_free_r>
 8005692:	6a23      	ldr	r3, [r4, #32]
 8005694:	b1b3      	cbz	r3, 80056c4 <_reclaim_reent+0xa4>
 8005696:	4620      	mov	r0, r4
 8005698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800569c:	4718      	bx	r3
 800569e:	5949      	ldr	r1, [r1, r5]
 80056a0:	b941      	cbnz	r1, 80056b4 <_reclaim_reent+0x94>
 80056a2:	3504      	adds	r5, #4
 80056a4:	69e3      	ldr	r3, [r4, #28]
 80056a6:	2d80      	cmp	r5, #128	; 0x80
 80056a8:	68d9      	ldr	r1, [r3, #12]
 80056aa:	d1f8      	bne.n	800569e <_reclaim_reent+0x7e>
 80056ac:	4620      	mov	r0, r4
 80056ae:	f000 f833 	bl	8005718 <_free_r>
 80056b2:	e7c0      	b.n	8005636 <_reclaim_reent+0x16>
 80056b4:	680e      	ldr	r6, [r1, #0]
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 f82e 	bl	8005718 <_free_r>
 80056bc:	4631      	mov	r1, r6
 80056be:	e7ef      	b.n	80056a0 <_reclaim_reent+0x80>
 80056c0:	2500      	movs	r5, #0
 80056c2:	e7ef      	b.n	80056a4 <_reclaim_reent+0x84>
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
 80056c6:	bf00      	nop
 80056c8:	2000005c 	.word	0x2000005c

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	2600      	movs	r6, #0
 80056d0:	4d0c      	ldr	r5, [pc, #48]	; (8005704 <__libc_init_array+0x38>)
 80056d2:	4c0d      	ldr	r4, [pc, #52]	; (8005708 <__libc_init_array+0x3c>)
 80056d4:	1b64      	subs	r4, r4, r5
 80056d6:	10a4      	asrs	r4, r4, #2
 80056d8:	42a6      	cmp	r6, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	f000 f870 	bl	80057c0 <_init>
 80056e0:	2600      	movs	r6, #0
 80056e2:	4d0a      	ldr	r5, [pc, #40]	; (800570c <__libc_init_array+0x40>)
 80056e4:	4c0a      	ldr	r4, [pc, #40]	; (8005710 <__libc_init_array+0x44>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f4:	4798      	blx	r3
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fe:	4798      	blx	r3
 8005700:	3601      	adds	r6, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	08005894 	.word	0x08005894
 8005708:	08005894 	.word	0x08005894
 800570c:	08005894 	.word	0x08005894
 8005710:	08005898 	.word	0x08005898

08005714 <__retarget_lock_acquire_recursive>:
 8005714:	4770      	bx	lr

08005716 <__retarget_lock_release_recursive>:
 8005716:	4770      	bx	lr

08005718 <_free_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4605      	mov	r5, r0
 800571c:	2900      	cmp	r1, #0
 800571e:	d040      	beq.n	80057a2 <_free_r+0x8a>
 8005720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005724:	1f0c      	subs	r4, r1, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfb8      	it	lt
 800572a:	18e4      	addlt	r4, r4, r3
 800572c:	f000 f83c 	bl	80057a8 <__malloc_lock>
 8005730:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <_free_r+0x8c>)
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	b933      	cbnz	r3, 8005744 <_free_r+0x2c>
 8005736:	6063      	str	r3, [r4, #4]
 8005738:	6014      	str	r4, [r2, #0]
 800573a:	4628      	mov	r0, r5
 800573c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005740:	f000 b838 	b.w	80057b4 <__malloc_unlock>
 8005744:	42a3      	cmp	r3, r4
 8005746:	d908      	bls.n	800575a <_free_r+0x42>
 8005748:	6820      	ldr	r0, [r4, #0]
 800574a:	1821      	adds	r1, r4, r0
 800574c:	428b      	cmp	r3, r1
 800574e:	bf01      	itttt	eq
 8005750:	6819      	ldreq	r1, [r3, #0]
 8005752:	685b      	ldreq	r3, [r3, #4]
 8005754:	1809      	addeq	r1, r1, r0
 8005756:	6021      	streq	r1, [r4, #0]
 8005758:	e7ed      	b.n	8005736 <_free_r+0x1e>
 800575a:	461a      	mov	r2, r3
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b10b      	cbz	r3, 8005764 <_free_r+0x4c>
 8005760:	42a3      	cmp	r3, r4
 8005762:	d9fa      	bls.n	800575a <_free_r+0x42>
 8005764:	6811      	ldr	r1, [r2, #0]
 8005766:	1850      	adds	r0, r2, r1
 8005768:	42a0      	cmp	r0, r4
 800576a:	d10b      	bne.n	8005784 <_free_r+0x6c>
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	4401      	add	r1, r0
 8005770:	1850      	adds	r0, r2, r1
 8005772:	4283      	cmp	r3, r0
 8005774:	6011      	str	r1, [r2, #0]
 8005776:	d1e0      	bne.n	800573a <_free_r+0x22>
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4408      	add	r0, r1
 800577e:	6010      	str	r0, [r2, #0]
 8005780:	6053      	str	r3, [r2, #4]
 8005782:	e7da      	b.n	800573a <_free_r+0x22>
 8005784:	d902      	bls.n	800578c <_free_r+0x74>
 8005786:	230c      	movs	r3, #12
 8005788:	602b      	str	r3, [r5, #0]
 800578a:	e7d6      	b.n	800573a <_free_r+0x22>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	1821      	adds	r1, r4, r0
 8005790:	428b      	cmp	r3, r1
 8005792:	bf01      	itttt	eq
 8005794:	6819      	ldreq	r1, [r3, #0]
 8005796:	685b      	ldreq	r3, [r3, #4]
 8005798:	1809      	addeq	r1, r1, r0
 800579a:	6021      	streq	r1, [r4, #0]
 800579c:	6063      	str	r3, [r4, #4]
 800579e:	6054      	str	r4, [r2, #4]
 80057a0:	e7cb      	b.n	800573a <_free_r+0x22>
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	20001420 	.word	0x20001420

080057a8 <__malloc_lock>:
 80057a8:	4801      	ldr	r0, [pc, #4]	; (80057b0 <__malloc_lock+0x8>)
 80057aa:	f7ff bfb3 	b.w	8005714 <__retarget_lock_acquire_recursive>
 80057ae:	bf00      	nop
 80057b0:	2000141c 	.word	0x2000141c

080057b4 <__malloc_unlock>:
 80057b4:	4801      	ldr	r0, [pc, #4]	; (80057bc <__malloc_unlock+0x8>)
 80057b6:	f7ff bfae 	b.w	8005716 <__retarget_lock_release_recursive>
 80057ba:	bf00      	nop
 80057bc:	2000141c 	.word	0x2000141c

080057c0 <_init>:
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	bf00      	nop
 80057c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c6:	bc08      	pop	{r3}
 80057c8:	469e      	mov	lr, r3
 80057ca:	4770      	bx	lr

080057cc <_fini>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	bf00      	nop
 80057d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d2:	bc08      	pop	{r3}
 80057d4:	469e      	mov	lr, r3
 80057d6:	4770      	bx	lr
